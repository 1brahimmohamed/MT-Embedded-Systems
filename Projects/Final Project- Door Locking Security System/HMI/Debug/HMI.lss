
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003a2e  00003ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080012a  0080012a  00003b8c  2**0
                  ALLOC
  3 .stab         000035e8  00000000  00000000  00003b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001427  00000000  00000000  00007174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000859b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000086db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000884b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c519  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 10 	call	0x216e	; 0x216e <main>
      8a:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_CallBack>:

/*******************************************************************************
 *                        	 	Function Definitions                           *
 *******************************************************************************/
void TIMER1_CallBack(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	++timerTicks;
     b4e:	80 91 2a 01 	lds	r24, 0x012A
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 2a 01 	sts	0x012A, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <HMI_mainMenu>:

/*send entered password to be checked on control side*/

void HMI_mainMenu(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	aa 97       	sbiw	r28, 0x2a	; 42
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	/*	clear the screen and display menu	*/
	LCD_clearScreen();
     b72:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
	LCD_displayString("+: Open Door");
     b76:	80 e6       	ldi	r24, 0x60	; 96
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
	LCD_moveCursor(1, 0);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>
	LCD_displayString("-: Change Pass ");
     b86:	8d e6       	ldi	r24, 0x6D	; 109
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

	/*	listen to keypadd keys	*/
	KEYPAD_keyPressed=KEYPAD_getPressedKey();
     b8e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
     b92:	80 93 36 01 	sts	0x0136, r24
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	aa ef       	ldi	r26, 0xFA	; 250
     b9c:	b3 e4       	ldi	r27, 0x43	; 67
     b9e:	8f a3       	std	Y+39, r24	; 0x27
     ba0:	98 a7       	std	Y+40, r25	; 0x28
     ba2:	a9 a7       	std	Y+41, r26	; 0x29
     ba4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6f a1       	ldd	r22, Y+39	; 0x27
     ba8:	78 a5       	ldd	r23, Y+40	; 0x28
     baa:	89 a5       	ldd	r24, Y+41	; 0x29
     bac:	9a a5       	ldd	r25, Y+42	; 0x2a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ef       	ldi	r20, 0xFA	; 250
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8b a3       	std	Y+35, r24	; 0x23
     bc0:	9c a3       	std	Y+36, r25	; 0x24
     bc2:	ad a3       	std	Y+37, r26	; 0x25
     bc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bc6:	6b a1       	ldd	r22, Y+35	; 0x23
     bc8:	7c a1       	ldd	r23, Y+36	; 0x24
     bca:	8d a1       	ldd	r24, Y+37	; 0x25
     bcc:	9e a1       	ldd	r25, Y+38	; 0x26
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <HMI_mainMenu+0x8a>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9a a3       	std	Y+34, r25	; 0x22
     be4:	89 a3       	std	Y+33, r24	; 0x21
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <HMI_mainMenu+0x108>
	else if (__tmp > 65535)
     be8:	6b a1       	ldd	r22, Y+35	; 0x23
     bea:	7c a1       	ldd	r23, Y+36	; 0x24
     bec:	8d a1       	ldd	r24, Y+37	; 0x25
     bee:	9e a1       	ldd	r25, Y+38	; 0x26
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <HMI_mainMenu+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6f a1       	ldd	r22, Y+39	; 0x27
     c02:	78 a5       	ldd	r23, Y+40	; 0x28
     c04:	89 a5       	ldd	r24, Y+41	; 0x29
     c06:	9a a5       	ldd	r25, Y+42	; 0x2a
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9a a3       	std	Y+34, r25	; 0x22
     c26:	89 a3       	std	Y+33, r24	; 0x21
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <HMI_mainMenu+0xea>
     c2a:	88 ec       	ldi	r24, 0xC8	; 200
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	98 a3       	std	Y+32, r25	; 0x20
     c30:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c34:	98 a1       	ldd	r25, Y+32	; 0x20
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <HMI_mainMenu+0xd8>
     c3a:	98 a3       	std	Y+32, r25	; 0x20
     c3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	89 a1       	ldd	r24, Y+33	; 0x21
     c40:	9a a1       	ldd	r25, Y+34	; 0x22
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9a a3       	std	Y+34, r25	; 0x22
     c46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	89 a1       	ldd	r24, Y+33	; 0x21
     c4a:	9a a1       	ldd	r25, Y+34	; 0x22
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <HMI_mainMenu+0xcc>
     c50:	8b c0       	rjmp	.+278    	; 0xd68 <HMI_mainMenu+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6b a1       	ldd	r22, Y+35	; 0x23
     c54:	7c a1       	ldd	r23, Y+36	; 0x24
     c56:	8d a1       	ldd	r24, Y+37	; 0x25
     c58:	9e a1       	ldd	r25, Y+38	; 0x26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9a a3       	std	Y+34, r25	; 0x22
     c64:	89 a3       	std	Y+33, r24	; 0x21
     c66:	89 a1       	ldd	r24, Y+33	; 0x21
     c68:	9a a1       	ldd	r25, Y+34	; 0x22
     c6a:	9e 8f       	std	Y+30, r25	; 0x1e
     c6c:	8d 8f       	std	Y+29, r24	; 0x1d
     c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <HMI_mainMenu+0x114>
     c76:	9e 8f       	std	Y+30, r25	; 0x1e
     c78:	8d 8f       	std	Y+29, r24	; 0x1d
     c7a:	76 c0       	rjmp	.+236    	; 0xd68 <HMI_mainMenu+0x20a>
	_delay_ms(KEYPAD_DELAY);

	/*	ignore any keys rather than '+' or '-'	*/
	while(KEYPAD_keyPressed!='+' && KEYPAD_keyPressed!='-')
	{
		KEYPAD_keyPressed=KEYPAD_getPressedKey();
     c7c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
     c80:	80 93 36 01 	sts	0x0136, r24
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	aa ef       	ldi	r26, 0xFA	; 250
     c8a:	b3 e4       	ldi	r27, 0x43	; 67
     c8c:	89 8f       	std	Y+25, r24	; 0x19
     c8e:	9a 8f       	std	Y+26, r25	; 0x1a
     c90:	ab 8f       	std	Y+27, r26	; 0x1b
     c92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c94:	69 8d       	ldd	r22, Y+25	; 0x19
     c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a ef       	ldi	r20, 0xFA	; 250
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	8d 8b       	std	Y+21, r24	; 0x15
     cae:	9e 8b       	std	Y+22, r25	; 0x16
     cb0:	af 8b       	std	Y+23, r26	; 0x17
     cb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cb4:	6d 89       	ldd	r22, Y+21	; 0x15
     cb6:	7e 89       	ldd	r23, Y+22	; 0x16
     cb8:	8f 89       	ldd	r24, Y+23	; 0x17
     cba:	98 8d       	ldd	r25, Y+24	; 0x18
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	2c f4       	brge	.+10     	; 0xcd6 <HMI_mainMenu+0x178>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9c 8b       	std	Y+20, r25	; 0x14
     cd2:	8b 8b       	std	Y+19, r24	; 0x13
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <HMI_mainMenu+0x1f6>
	else if (__tmp > 65535)
     cd6:	6d 89       	ldd	r22, Y+21	; 0x15
     cd8:	7e 89       	ldd	r23, Y+22	; 0x16
     cda:	8f 89       	ldd	r24, Y+23	; 0x17
     cdc:	98 8d       	ldd	r25, Y+24	; 0x18
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	4c f5       	brge	.+82     	; 0xd40 <HMI_mainMenu+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	69 8d       	ldd	r22, Y+25	; 0x19
     cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9c 8b       	std	Y+20, r25	; 0x14
     d14:	8b 8b       	std	Y+19, r24	; 0x13
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <HMI_mainMenu+0x1d8>
     d18:	88 ec       	ldi	r24, 0xC8	; 200
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
     d20:	89 89       	ldd	r24, Y+17	; 0x11
     d22:	9a 89       	ldd	r25, Y+18	; 0x12
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <HMI_mainMenu+0x1c6>
     d28:	9a 8b       	std	Y+18, r25	; 0x12
     d2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	8b 89       	ldd	r24, Y+19	; 0x13
     d2e:	9c 89       	ldd	r25, Y+20	; 0x14
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9c 8b       	std	Y+20, r25	; 0x14
     d34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	8b 89       	ldd	r24, Y+19	; 0x13
     d38:	9c 89       	ldd	r25, Y+20	; 0x14
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	69 f7       	brne	.-38     	; 0xd18 <HMI_mainMenu+0x1ba>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <HMI_mainMenu+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	6d 89       	ldd	r22, Y+21	; 0x15
     d42:	7e 89       	ldd	r23, Y+22	; 0x16
     d44:	8f 89       	ldd	r24, Y+23	; 0x17
     d46:	98 8d       	ldd	r25, Y+24	; 0x18
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9c 8b       	std	Y+20, r25	; 0x14
     d52:	8b 8b       	std	Y+19, r24	; 0x13
     d54:	8b 89       	ldd	r24, Y+19	; 0x13
     d56:	9c 89       	ldd	r25, Y+20	; 0x14
     d58:	98 8b       	std	Y+16, r25	; 0x10
     d5a:	8f 87       	std	Y+15, r24	; 0x0f
     d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5e:	98 89       	ldd	r25, Y+16	; 0x10
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <HMI_mainMenu+0x202>
     d64:	98 8b       	std	Y+16, r25	; 0x10
     d66:	8f 87       	std	Y+15, r24	; 0x0f
	/*	listen to keypadd keys	*/
	KEYPAD_keyPressed=KEYPAD_getPressedKey();
	_delay_ms(KEYPAD_DELAY);

	/*	ignore any keys rather than '+' or '-'	*/
	while(KEYPAD_keyPressed!='+' && KEYPAD_keyPressed!='-')
     d68:	80 91 36 01 	lds	r24, 0x0136
     d6c:	8b 32       	cpi	r24, 0x2B	; 43
     d6e:	29 f0       	breq	.+10     	; 0xd7a <HMI_mainMenu+0x21c>
     d70:	80 91 36 01 	lds	r24, 0x0136
     d74:	8d 32       	cpi	r24, 0x2D	; 45
     d76:	09 f0       	breq	.+2      	; 0xd7a <HMI_mainMenu+0x21c>
     d78:	81 cf       	rjmp	.-254    	; 0xc7c <HMI_mainMenu+0x11e>
		_delay_ms(KEYPAD_DELAY);
	}

	/* wait for the other mc to be ready	*/

	while(UART_recieveByte() != READY);
     d7a:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	e1 f7       	brne	.-8      	; 0xd7a <HMI_mainMenu+0x21c>

	/*	send the selected option to the other mc*/
	UART_sendByte(KEYPAD_keyPressed);
     d82:	80 91 36 01 	lds	r24, 0x0136
     d86:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a8 e4       	ldi	r26, 0x48	; 72
     d90:	b2 e4       	ldi	r27, 0x42	; 66
     d92:	8b 87       	std	Y+11, r24	; 0x0b
     d94:	9c 87       	std	Y+12, r25	; 0x0c
     d96:	ad 87       	std	Y+13, r26	; 0x0d
     d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a ef       	ldi	r20, 0xFA	; 250
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8f 83       	std	Y+7, r24	; 0x07
     db4:	98 87       	std	Y+8, r25	; 0x08
     db6:	a9 87       	std	Y+9, r26	; 0x09
     db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dba:	6f 81       	ldd	r22, Y+7	; 0x07
     dbc:	78 85       	ldd	r23, Y+8	; 0x08
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	2c f4       	brge	.+10     	; 0xddc <HMI_mainMenu+0x27e>
		__ticks = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <HMI_mainMenu+0x2fc>
	else if (__tmp > 65535)
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	78 85       	ldd	r23, Y+8	; 0x08
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	57 e4       	ldi	r21, 0x47	; 71
     dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df0:	18 16       	cp	r1, r24
     df2:	4c f5       	brge	.+82     	; 0xe46 <HMI_mainMenu+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	6b 85       	ldd	r22, Y+11	; 0x0b
     df6:	7c 85       	ldd	r23, Y+12	; 0x0c
     df8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <HMI_mainMenu+0x2de>
     e1e:	88 ec       	ldi	r24, 0xC8	; 200
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <HMI_mainMenu+0x2cc>
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f7       	brne	.-38     	; 0xe1e <HMI_mainMenu+0x2c0>
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <HMI_mainMenu+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e46:	6f 81       	ldd	r22, Y+7	; 0x07
     e48:	78 85       	ldd	r23, Y+8	; 0x08
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <HMI_mainMenu+0x308>
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(UART_DELAY);

	/*	if the key is + then go to the open door	*/
	if(KEYPAD_keyPressed=='+')
     e6e:	80 91 36 01 	lds	r24, 0x0136
     e72:	8b 32       	cpi	r24, 0x2B	; 43
     e74:	19 f4       	brne	.+6      	; 0xe7c <HMI_mainMenu+0x31e>
	{
		/*OPEN DOOR FUNC*/
		HMI_openDoor();
     e76:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <HMI_openDoor>
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <HMI_mainMenu+0x322>

	/*	if the key is - then go to the change password	*/

	else{
		/*CHANGE password FUNC*/
		HMI_changePassword();
     e7c:	0e 94 3e 0c 	call	0x187c	; 0x187c <HMI_changePassword>
	}
}
     e80:	aa 96       	adiw	r28, 0x2a	; 42
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <HMI_createPassword>:

void HMI_createPassword(void)
{
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	c8 56       	subi	r28, 0x68	; 104
     ea0:	d0 40       	sbci	r29, 0x00	; 0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	matching_state=0;
     eac:	10 92 2b 01 	sts	0x012B, r1
     eb0:	54 c4       	rjmp	.+2216   	; 0x175a <HMI_createPassword+0x8c8>

	while(matching_state==0)
	{


		KEYPAD_keyPressed = 0;
     eb2:	10 92 36 01 	sts	0x0136, r1

		/*	clear LCD screen	*/
		LCD_clearScreen();
     eb6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*	enter password message*/
		LCD_displayString("Enter New Pass:");
     eba:	8d e7       	ldi	r24, 0x7D	; 125
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>

		int counter_pass_1 = 0;
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 59       	subi	r30, 0x99	; 153
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	10 82       	st	Z, r1
     ed4:	d6 c0       	rjmp	.+428    	; 0x1082 <HMI_createPassword+0x1f0>
		while(counter_pass_1 < PASSWORD_LENGTH)
		{
			/*	get key pressed from keypad	*/
			KEYPAD_keyPressed=KEYPAD_getPressedKey();
     ed6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
     eda:	80 93 36 01 	sts	0x0136, r24

			if(KEYPAD_keyPressed<=9 && KEYPAD_keyPressed >=0)
     ede:	80 91 36 01 	lds	r24, 0x0136
     ee2:	8a 30       	cpi	r24, 0x0A	; 10
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <HMI_createPassword+0x56>
     ee6:	cd c0       	rjmp	.+410    	; 0x1082 <HMI_createPassword+0x1f0>
			{
				/* show interaction the input	*/
				LCD_displayCharacter('*');
     ee8:	8a e2       	ldi	r24, 0x2A	; 42
     eea:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayCharacter>

				/*	password 1 storing in array	*/
				password[counter_pass_1]=KEYPAD_keyPressed;
     eee:	fe 01       	movw	r30, r28
     ef0:	e9 59       	subi	r30, 0x99	; 153
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	20 91 36 01 	lds	r18, 0x0136
     efc:	fc 01       	movw	r30, r24
     efe:	e2 5d       	subi	r30, 0xD2	; 210
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	20 83       	st	Z, r18
     f04:	fe 01       	movw	r30, r28
     f06:	e1 5a       	subi	r30, 0xA1	; 161
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	aa ef       	ldi	r26, 0xFA	; 250
     f10:	b3 e4       	ldi	r27, 0x43	; 67
     f12:	80 83       	st	Z, r24
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	a2 83       	std	Z+2, r26	; 0x02
     f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	8e 01       	movw	r16, r28
     f1c:	05 5a       	subi	r16, 0xA5	; 165
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	fe 01       	movw	r30, r28
     f22:	e1 5a       	subi	r30, 0xA1	; 161
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	f8 01       	movw	r30, r16
     f40:	80 83       	st	Z, r24
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	a2 83       	std	Z+2, r26	; 0x02
     f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f48:	fe 01       	movw	r30, r28
     f4a:	e5 5a       	subi	r30, 0xA5	; 165
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f62:	88 23       	and	r24, r24
     f64:	44 f4       	brge	.+16     	; 0xf76 <HMI_createPassword+0xe4>
		__ticks = 1;
     f66:	fe 01       	movw	r30, r28
     f68:	e7 5a       	subi	r30, 0xA7	; 167
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	64 c0       	rjmp	.+200    	; 0x103e <HMI_createPassword+0x1ac>
	else if (__tmp > 65535)
     f76:	fe 01       	movw	r30, r28
     f78:	e5 5a       	subi	r30, 0xA5	; 165
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	0c f0       	brlt	.+2      	; 0xf96 <HMI_createPassword+0x104>
     f94:	43 c0       	rjmp	.+134    	; 0x101c <HMI_createPassword+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f96:	fe 01       	movw	r30, r28
     f98:	e1 5a       	subi	r30, 0xA1	; 161
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8e 01       	movw	r16, r28
     fb6:	07 5a       	subi	r16, 0xA7	; 167
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	f8 01       	movw	r30, r16
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
     fcc:	1f c0       	rjmp	.+62     	; 0x100c <HMI_createPassword+0x17a>
     fce:	fe 01       	movw	r30, r28
     fd0:	e9 5a       	subi	r30, 0xA9	; 169
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	fe 01       	movw	r30, r28
     fde:	e9 5a       	subi	r30, 0xA9	; 169
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <HMI_createPassword+0x154>
     fea:	fe 01       	movw	r30, r28
     fec:	e9 5a       	subi	r30, 0xA9	; 169
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	de 01       	movw	r26, r28
     ff6:	a7 5a       	subi	r26, 0xA7	; 167
     ff8:	bf 4f       	sbci	r27, 0xFF	; 255
     ffa:	fe 01       	movw	r30, r28
     ffc:	e7 5a       	subi	r30, 0xA7	; 167
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	fe 01       	movw	r30, r28
    100e:	e7 5a       	subi	r30, 0xA7	; 167
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	d1 f6       	brne	.-76     	; 0xfce <HMI_createPassword+0x13c>
    101a:	27 c0       	rjmp	.+78     	; 0x106a <HMI_createPassword+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	8e 01       	movw	r16, r28
    101e:	07 5a       	subi	r16, 0xA7	; 167
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	fe 01       	movw	r30, r28
    1024:	e5 5a       	subi	r30, 0xA5	; 165
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	f8 01       	movw	r30, r16
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	de 01       	movw	r26, r28
    1040:	ab 5a       	subi	r26, 0xAB	; 171
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	e7 5a       	subi	r30, 0xA7	; 167
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	8d 93       	st	X+, r24
    1050:	9c 93       	st	X, r25
    1052:	fe 01       	movw	r30, r28
    1054:	eb 5a       	subi	r30, 0xAB	; 171
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <HMI_createPassword+0x1ca>
    1060:	fe 01       	movw	r30, r28
    1062:	eb 5a       	subi	r30, 0xAB	; 171
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24

				_delay_ms(KEYPAD_DELAY);

				counter_pass_1++;
    106a:	de 01       	movw	r26, r28
    106c:	a9 59       	subi	r26, 0x99	; 153
    106e:	bf 4f       	sbci	r27, 0xFF	; 255
    1070:	fe 01       	movw	r30, r28
    1072:	e9 59       	subi	r30, 0x99	; 153
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
		/*	enter password message*/
		LCD_displayString("Enter New Pass:");
		LCD_moveCursor(1, 0);

		int counter_pass_1 = 0;
		while(counter_pass_1 < PASSWORD_LENGTH)
    1082:	fe 01       	movw	r30, r28
    1084:	e9 59       	subi	r30, 0x99	; 153
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	85 30       	cpi	r24, 0x05	; 5
    108e:	91 05       	cpc	r25, r1
    1090:	0c f4       	brge	.+2      	; 0x1094 <HMI_createPassword+0x202>
    1092:	21 cf       	rjmp	.-446    	; 0xed6 <HMI_createPassword+0x44>
				counter_pass_1++;
			}
		}

		/*	UART data frame terminator	*/
		password[counter_pass_1]='#';
    1094:	fe 01       	movw	r30, r28
    1096:	e9 59       	subi	r30, 0x99	; 153
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 5d       	subi	r30, 0xD2	; 210
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	83 e2       	ldi	r24, 0x23	; 35
    10a6:	80 83       	st	Z, r24
		password[counter_pass_1+1]='\0';
    10a8:	fe 01       	movw	r30, r28
    10aa:	e9 59       	subi	r30, 0x99	; 153
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	fc 01       	movw	r30, r24
    10b6:	e2 5d       	subi	r30, 0xD2	; 210
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	10 82       	st	Z, r1

		/* wait for user to press on the enter key to proceed to next step*/
		while(KEYPAD_getPressedKey()!=ENTER_KEY);
    10bc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    10c0:	8d 33       	cpi	r24, 0x3D	; 61
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <HMI_createPassword+0x22a>


		/* Confirmation Password */

		/*	clear the screen	*/
		LCD_clearScreen();
    10c4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*	re enter password message*/
		LCD_displayString("Re-Enter Pass:");
    10c8:	8d e8       	ldi	r24, 0x8D	; 141
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 0);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>

		KEYPAD_keyPressed=0;
    10d8:	10 92 36 01 	sts	0x0136, r1

		int counter_pass_conf = 0;
    10dc:	fe 01       	movw	r30, r28
    10de:	eb 59       	subi	r30, 0x9B	; 155
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
    10e6:	d6 c0       	rjmp	.+428    	; 0x1294 <HMI_createPassword+0x402>
		while(counter_pass_conf<PASSWORD_LENGTH)
		{
			KEYPAD_keyPressed=KEYPAD_getPressedKey();
    10e8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    10ec:	80 93 36 01 	sts	0x0136, r24
			if(KEYPAD_keyPressed<=9 && KEYPAD_keyPressed >=0)
    10f0:	80 91 36 01 	lds	r24, 0x0136
    10f4:	8a 30       	cpi	r24, 0x0A	; 10
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <HMI_createPassword+0x268>
    10f8:	cd c0       	rjmp	.+410    	; 0x1294 <HMI_createPassword+0x402>
			{
				/* show interaction the input	*/
				LCD_displayCharacter('*');
    10fa:	8a e2       	ldi	r24, 0x2A	; 42
    10fc:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayCharacter>

				/*	password confirm storing in array	*/
				password_confirmation[counter_pass_conf]=KEYPAD_keyPressed;
    1100:	fe 01       	movw	r30, r28
    1102:	eb 59       	subi	r30, 0x9B	; 155
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	20 91 36 01 	lds	r18, 0x0136
    110e:	fc 01       	movw	r30, r24
    1110:	e9 5c       	subi	r30, 0xC9	; 201
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	20 83       	st	Z, r18
    1116:	fe 01       	movw	r30, r28
    1118:	ef 5a       	subi	r30, 0xAF	; 175
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	aa ef       	ldi	r26, 0xFA	; 250
    1122:	b3 e4       	ldi	r27, 0x43	; 67
    1124:	80 83       	st	Z, r24
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	a2 83       	std	Z+2, r26	; 0x02
    112a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	8e 01       	movw	r16, r28
    112e:	03 5b       	subi	r16, 0xB3	; 179
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	fe 01       	movw	r30, r28
    1134:	ef 5a       	subi	r30, 0xAF	; 175
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a ef       	ldi	r20, 0xFA	; 250
    1146:	54 e4       	ldi	r21, 0x44	; 68
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	f8 01       	movw	r30, r16
    1152:	80 83       	st	Z, r24
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	a2 83       	std	Z+2, r26	; 0x02
    1158:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    115a:	fe 01       	movw	r30, r28
    115c:	e3 5b       	subi	r30, 0xB3	; 179
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	60 81       	ld	r22, Z
    1162:	71 81       	ldd	r23, Z+1	; 0x01
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	44 f4       	brge	.+16     	; 0x1188 <HMI_createPassword+0x2f6>
		__ticks = 1;
    1178:	fe 01       	movw	r30, r28
    117a:	e5 5b       	subi	r30, 0xB5	; 181
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	80 83       	st	Z, r24
    1186:	64 c0       	rjmp	.+200    	; 0x1250 <HMI_createPassword+0x3be>
	else if (__tmp > 65535)
    1188:	fe 01       	movw	r30, r28
    118a:	e3 5b       	subi	r30, 0xB3	; 179
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	0c f0       	brlt	.+2      	; 0x11a8 <HMI_createPassword+0x316>
    11a6:	43 c0       	rjmp	.+134    	; 0x122e <HMI_createPassword+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a8:	fe 01       	movw	r30, r28
    11aa:	ef 5a       	subi	r30, 0xAF	; 175
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	60 81       	ld	r22, Z
    11b0:	71 81       	ldd	r23, Z+1	; 0x01
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8e 01       	movw	r16, r28
    11c8:	05 5b       	subi	r16, 0xB5	; 181
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	f8 01       	movw	r30, r16
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	1f c0       	rjmp	.+62     	; 0x121e <HMI_createPassword+0x38c>
    11e0:	fe 01       	movw	r30, r28
    11e2:	e7 5b       	subi	r30, 0xB7	; 183
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	88 ec       	ldi	r24, 0xC8	; 200
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
    11ee:	fe 01       	movw	r30, r28
    11f0:	e7 5b       	subi	r30, 0xB7	; 183
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <HMI_createPassword+0x366>
    11fc:	fe 01       	movw	r30, r28
    11fe:	e7 5b       	subi	r30, 0xB7	; 183
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	de 01       	movw	r26, r28
    1208:	a5 5b       	subi	r26, 0xB5	; 181
    120a:	bf 4f       	sbci	r27, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	e5 5b       	subi	r30, 0xB5	; 181
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	9c 93       	st	X, r25
    121c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121e:	fe 01       	movw	r30, r28
    1220:	e5 5b       	subi	r30, 0xB5	; 181
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	d1 f6       	brne	.-76     	; 0x11e0 <HMI_createPassword+0x34e>
    122c:	27 c0       	rjmp	.+78     	; 0x127c <HMI_createPassword+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	8e 01       	movw	r16, r28
    1230:	05 5b       	subi	r16, 0xB5	; 181
    1232:	1f 4f       	sbci	r17, 0xFF	; 255
    1234:	fe 01       	movw	r30, r28
    1236:	e3 5b       	subi	r30, 0xB3	; 179
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	f8 01       	movw	r30, r16
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
    1250:	de 01       	movw	r26, r28
    1252:	a9 5b       	subi	r26, 0xB9	; 185
    1254:	bf 4f       	sbci	r27, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	e5 5b       	subi	r30, 0xB5	; 181
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	8d 93       	st	X+, r24
    1262:	9c 93       	st	X, r25
    1264:	fe 01       	movw	r30, r28
    1266:	e9 5b       	subi	r30, 0xB9	; 185
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <HMI_createPassword+0x3dc>
    1272:	fe 01       	movw	r30, r28
    1274:	e9 5b       	subi	r30, 0xB9	; 185
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24

				_delay_ms(KEYPAD_DELAY);
				counter_pass_conf++;
    127c:	de 01       	movw	r26, r28
    127e:	ab 59       	subi	r26, 0x9B	; 155
    1280:	bf 4f       	sbci	r27, 0xFF	; 255
    1282:	fe 01       	movw	r30, r28
    1284:	eb 59       	subi	r30, 0x9B	; 155
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	9c 93       	st	X, r25
    1292:	8e 93       	st	-X, r24
		LCD_moveCursor(1, 0);

		KEYPAD_keyPressed=0;

		int counter_pass_conf = 0;
		while(counter_pass_conf<PASSWORD_LENGTH)
    1294:	fe 01       	movw	r30, r28
    1296:	eb 59       	subi	r30, 0x9B	; 155
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	91 05       	cpc	r25, r1
    12a2:	0c f4       	brge	.+2      	; 0x12a6 <HMI_createPassword+0x414>
    12a4:	21 cf       	rjmp	.-446    	; 0x10e8 <HMI_createPassword+0x256>
			}
		}


		/*	UART data frame terminator	*/
		password_confirmation[counter_pass_conf]='#';
    12a6:	fe 01       	movw	r30, r28
    12a8:	eb 59       	subi	r30, 0x9B	; 155
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	fc 01       	movw	r30, r24
    12b2:	e9 5c       	subi	r30, 0xC9	; 201
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	83 e2       	ldi	r24, 0x23	; 35
    12b8:	80 83       	st	Z, r24
		password_confirmation[counter_pass_conf]='\0';
    12ba:	fe 01       	movw	r30, r28
    12bc:	eb 59       	subi	r30, 0x9B	; 155
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	fc 01       	movw	r30, r24
    12c6:	e9 5c       	subi	r30, 0xC9	; 201
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	10 82       	st	Z, r1

		/* wait for user to press on the enter key to proceed to next step*/
		while(KEYPAD_getPressedKey()!=ENTER_KEY);
    12cc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    12d0:	8d 33       	cpi	r24, 0x3D	; 61
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <HMI_createPassword+0x43a>


		/*	Sending Data to the other mc by UART	*/

		/*	clear screen	*/
		LCD_clearScreen();
    12d4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*	wait for the other mc to be ready	*/
		while(UART_recieveByte() != READY);
    12d8:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    12dc:	80 31       	cpi	r24, 0x10	; 16
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <HMI_createPassword+0x446>


		/*	send first password to the other mc by UART	*/
		int sendCounter = 0;
    12e0:	fe 01       	movw	r30, r28
    12e2:	ed 59       	subi	r30, 0x9D	; 157
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	11 82       	std	Z+1, r1	; 0x01
    12e8:	10 82       	st	Z, r1
    12ea:	9c c0       	rjmp	.+312    	; 0x1424 <HMI_createPassword+0x592>
		while(sendCounter<PASSWORD_LENGTH)
		{
			UART_sendByte(password[sendCounter]);
    12ec:	fe 01       	movw	r30, r28
    12ee:	ed 59       	subi	r30, 0x9D	; 157
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	fc 01       	movw	r30, r24
    12f8:	e2 5d       	subi	r30, 0xD2	; 210
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	80 81       	ld	r24, Z
    12fe:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>
    1302:	fe 01       	movw	r30, r28
    1304:	ed 5b       	subi	r30, 0xBD	; 189
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a8 e4       	ldi	r26, 0x48	; 72
    130e:	b2 e4       	ldi	r27, 0x42	; 66
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	8e 01       	movw	r16, r28
    131a:	01 5c       	subi	r16, 0xC1	; 193
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	ed 5b       	subi	r30, 0xBD	; 189
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	fe 01       	movw	r30, r28
    1348:	ff 96       	adiw	r30, 0x3f	; 63
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	2c f4       	brge	.+10     	; 0x136c <HMI_createPassword+0x4da>
		__ticks = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9e af       	std	Y+62, r25	; 0x3e
    1368:	8d af       	std	Y+61, r24	; 0x3d
    136a:	46 c0       	rjmp	.+140    	; 0x13f8 <HMI_createPassword+0x566>
	else if (__tmp > 65535)
    136c:	fe 01       	movw	r30, r28
    136e:	ff 96       	adiw	r30, 0x3f	; 63
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	64 f5       	brge	.+88     	; 0x13e0 <HMI_createPassword+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	fe 01       	movw	r30, r28
    138a:	ed 5b       	subi	r30, 0xBD	; 189
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9e af       	std	Y+62, r25	; 0x3e
    13b4:	8d af       	std	Y+61, r24	; 0x3d
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <HMI_createPassword+0x544>
    13b8:	88 ec       	ldi	r24, 0xC8	; 200
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c af       	std	Y+60, r25	; 0x3c
    13be:	8b af       	std	Y+59, r24	; 0x3b
    13c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    13c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <HMI_createPassword+0x532>
    13c8:	9c af       	std	Y+60, r25	; 0x3c
    13ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9e af       	std	Y+62, r25	; 0x3e
    13d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <HMI_createPassword+0x526>
    13de:	16 c0       	rjmp	.+44     	; 0x140c <HMI_createPassword+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	fe 01       	movw	r30, r28
    13e2:	ff 96       	adiw	r30, 0x3f	; 63
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9e af       	std	Y+62, r25	; 0x3e
    13f6:	8d af       	std	Y+61, r24	; 0x3d
    13f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    13fc:	9a af       	std	Y+58, r25	; 0x3a
    13fe:	89 af       	std	Y+57, r24	; 0x39
    1400:	89 ad       	ldd	r24, Y+57	; 0x39
    1402:	9a ad       	ldd	r25, Y+58	; 0x3a
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <HMI_createPassword+0x572>
    1408:	9a af       	std	Y+58, r25	; 0x3a
    140a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(UART_DELAY);
			sendCounter++;
    140c:	de 01       	movw	r26, r28
    140e:	ad 59       	subi	r26, 0x9D	; 157
    1410:	bf 4f       	sbci	r27, 0xFF	; 255
    1412:	fe 01       	movw	r30, r28
    1414:	ed 59       	subi	r30, 0x9D	; 157
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	11 96       	adiw	r26, 0x01	; 1
    1420:	9c 93       	st	X, r25
    1422:	8e 93       	st	-X, r24
		while(UART_recieveByte() != READY);


		/*	send first password to the other mc by UART	*/
		int sendCounter = 0;
		while(sendCounter<PASSWORD_LENGTH)
    1424:	fe 01       	movw	r30, r28
    1426:	ed 59       	subi	r30, 0x9D	; 157
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	85 30       	cpi	r24, 0x05	; 5
    1430:	91 05       	cpc	r25, r1
    1432:	0c f4       	brge	.+2      	; 0x1436 <HMI_createPassword+0x5a4>
    1434:	5b cf       	rjmp	.-330    	; 0x12ec <HMI_createPassword+0x45a>
			sendCounter++;
		}


		/*	wait for the other mc to be ready	*/
		while(UART_recieveByte() != READY);
    1436:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    143a:	80 31       	cpi	r24, 0x10	; 16
    143c:	e1 f7       	brne	.-8      	; 0x1436 <HMI_createPassword+0x5a4>

		/*	send confirmation password to the other mc by UART	*/
		sendCounter = 0;
    143e:	fe 01       	movw	r30, r28
    1440:	ed 59       	subi	r30, 0x9D	; 157
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	11 82       	std	Z+1, r1	; 0x01
    1446:	10 82       	st	Z, r1
    1448:	89 c0       	rjmp	.+274    	; 0x155c <HMI_createPassword+0x6ca>
		while(sendCounter<PASSWORD_LENGTH)
		{
			UART_sendByte(password_confirmation[sendCounter]);
    144a:	fe 01       	movw	r30, r28
    144c:	ed 59       	subi	r30, 0x9D	; 157
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	fc 01       	movw	r30, r24
    1456:	e9 5c       	subi	r30, 0xC9	; 201
    1458:	fe 4f       	sbci	r31, 0xFE	; 254
    145a:	80 81       	ld	r24, Z
    145c:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a8 e4       	ldi	r26, 0x48	; 72
    1466:	b2 e4       	ldi	r27, 0x42	; 66
    1468:	8d ab       	std	Y+53, r24	; 0x35
    146a:	9e ab       	std	Y+54, r25	; 0x36
    146c:	af ab       	std	Y+55, r26	; 0x37
    146e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6d a9       	ldd	r22, Y+53	; 0x35
    1472:	7e a9       	ldd	r23, Y+54	; 0x36
    1474:	8f a9       	ldd	r24, Y+55	; 0x37
    1476:	98 ad       	ldd	r25, Y+56	; 0x38
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	89 ab       	std	Y+49, r24	; 0x31
    148a:	9a ab       	std	Y+50, r25	; 0x32
    148c:	ab ab       	std	Y+51, r26	; 0x33
    148e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1490:	69 a9       	ldd	r22, Y+49	; 0x31
    1492:	7a a9       	ldd	r23, Y+50	; 0x32
    1494:	8b a9       	ldd	r24, Y+51	; 0x33
    1496:	9c a9       	ldd	r25, Y+52	; 0x34
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <HMI_createPassword+0x620>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 ab       	std	Y+48, r25	; 0x30
    14ae:	8f a7       	std	Y+47, r24	; 0x2f
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <HMI_createPassword+0x69e>
	else if (__tmp > 65535)
    14b2:	69 a9       	ldd	r22, Y+49	; 0x31
    14b4:	7a a9       	ldd	r23, Y+50	; 0x32
    14b6:	8b a9       	ldd	r24, Y+51	; 0x33
    14b8:	9c a9       	ldd	r25, Y+52	; 0x34
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <HMI_createPassword+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6d a9       	ldd	r22, Y+53	; 0x35
    14cc:	7e a9       	ldd	r23, Y+54	; 0x36
    14ce:	8f a9       	ldd	r24, Y+55	; 0x37
    14d0:	98 ad       	ldd	r25, Y+56	; 0x38
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <HMI_createPassword+0x680>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e a7       	std	Y+46, r25	; 0x2e
    14fa:	8d a7       	std	Y+45, r24	; 0x2d
    14fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <HMI_createPassword+0x66e>
    1504:	9e a7       	std	Y+46, r25	; 0x2e
    1506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	98 ab       	std	Y+48, r25	; 0x30
    1510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8f a5       	ldd	r24, Y+47	; 0x2f
    1514:	98 a9       	ldd	r25, Y+48	; 0x30
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <HMI_createPassword+0x662>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <HMI_createPassword+0x6b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	69 a9       	ldd	r22, Y+49	; 0x31
    151e:	7a a9       	ldd	r23, Y+50	; 0x32
    1520:	8b a9       	ldd	r24, Y+51	; 0x33
    1522:	9c a9       	ldd	r25, Y+52	; 0x34
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	98 ab       	std	Y+48, r25	; 0x30
    152e:	8f a7       	std	Y+47, r24	; 0x2f
    1530:	8f a5       	ldd	r24, Y+47	; 0x2f
    1532:	98 a9       	ldd	r25, Y+48	; 0x30
    1534:	9c a7       	std	Y+44, r25	; 0x2c
    1536:	8b a7       	std	Y+43, r24	; 0x2b
    1538:	8b a5       	ldd	r24, Y+43	; 0x2b
    153a:	9c a5       	ldd	r25, Y+44	; 0x2c
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <HMI_createPassword+0x6aa>
    1540:	9c a7       	std	Y+44, r25	; 0x2c
    1542:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(UART_DELAY);
			sendCounter++;
    1544:	de 01       	movw	r26, r28
    1546:	ad 59       	subi	r26, 0x9D	; 157
    1548:	bf 4f       	sbci	r27, 0xFF	; 255
    154a:	fe 01       	movw	r30, r28
    154c:	ed 59       	subi	r30, 0x9D	; 157
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
		/*	wait for the other mc to be ready	*/
		while(UART_recieveByte() != READY);

		/*	send confirmation password to the other mc by UART	*/
		sendCounter = 0;
		while(sendCounter<PASSWORD_LENGTH)
    155c:	fe 01       	movw	r30, r28
    155e:	ed 59       	subi	r30, 0x9D	; 157
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	85 30       	cpi	r24, 0x05	; 5
    1568:	91 05       	cpc	r25, r1
    156a:	0c f4       	brge	.+2      	; 0x156e <HMI_createPassword+0x6dc>
    156c:	6e cf       	rjmp	.-292    	; 0x144a <HMI_createPassword+0x5b8>
			sendCounter++;
		}


		/*	wait for the other mc to be ready	*/
		UART_sendByte(READY);
    156e:	80 e1       	ldi	r24, 0x10	; 16
    1570:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>

		/*	Receive Data from the other mc by UART about the state of the two passwords
		 * if they are matching or not
		 */
		matching_state=UART_recieveByte();
    1574:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    1578:	80 93 2b 01 	sts	0x012B, r24
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a8 e4       	ldi	r26, 0x48	; 72
    1582:	b2 e4       	ldi	r27, 0x42	; 66
    1584:	8f a3       	std	Y+39, r24	; 0x27
    1586:	98 a7       	std	Y+40, r25	; 0x28
    1588:	a9 a7       	std	Y+41, r26	; 0x29
    158a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6f a1       	ldd	r22, Y+39	; 0x27
    158e:	78 a5       	ldd	r23, Y+40	; 0x28
    1590:	89 a5       	ldd	r24, Y+41	; 0x29
    1592:	9a a5       	ldd	r25, Y+42	; 0x2a
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8b a3       	std	Y+35, r24	; 0x23
    15a6:	9c a3       	std	Y+36, r25	; 0x24
    15a8:	ad a3       	std	Y+37, r26	; 0x25
    15aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15ac:	6b a1       	ldd	r22, Y+35	; 0x23
    15ae:	7c a1       	ldd	r23, Y+36	; 0x24
    15b0:	8d a1       	ldd	r24, Y+37	; 0x25
    15b2:	9e a1       	ldd	r25, Y+38	; 0x26
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <HMI_createPassword+0x73c>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9a a3       	std	Y+34, r25	; 0x22
    15ca:	89 a3       	std	Y+33, r24	; 0x21
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <HMI_createPassword+0x7ba>
	else if (__tmp > 65535)
    15ce:	6b a1       	ldd	r22, Y+35	; 0x23
    15d0:	7c a1       	ldd	r23, Y+36	; 0x24
    15d2:	8d a1       	ldd	r24, Y+37	; 0x25
    15d4:	9e a1       	ldd	r25, Y+38	; 0x26
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <HMI_createPassword+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6f a1       	ldd	r22, Y+39	; 0x27
    15e8:	78 a5       	ldd	r23, Y+40	; 0x28
    15ea:	89 a5       	ldd	r24, Y+41	; 0x29
    15ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9a a3       	std	Y+34, r25	; 0x22
    160c:	89 a3       	std	Y+33, r24	; 0x21
    160e:	0f c0       	rjmp	.+30     	; 0x162e <HMI_createPassword+0x79c>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	98 a3       	std	Y+32, r25	; 0x20
    1616:	8f 8f       	std	Y+31, r24	; 0x1f
    1618:	8f 8d       	ldd	r24, Y+31	; 0x1f
    161a:	98 a1       	ldd	r25, Y+32	; 0x20
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <HMI_createPassword+0x78a>
    1620:	98 a3       	std	Y+32, r25	; 0x20
    1622:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	89 a1       	ldd	r24, Y+33	; 0x21
    1626:	9a a1       	ldd	r25, Y+34	; 0x22
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	89 a1       	ldd	r24, Y+33	; 0x21
    1630:	9a a1       	ldd	r25, Y+34	; 0x22
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <HMI_createPassword+0x77e>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <HMI_createPassword+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6b a1       	ldd	r22, Y+35	; 0x23
    163a:	7c a1       	ldd	r23, Y+36	; 0x24
    163c:	8d a1       	ldd	r24, Y+37	; 0x25
    163e:	9e a1       	ldd	r25, Y+38	; 0x26
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9a a3       	std	Y+34, r25	; 0x22
    164a:	89 a3       	std	Y+33, r24	; 0x21
    164c:	89 a1       	ldd	r24, Y+33	; 0x21
    164e:	9a a1       	ldd	r25, Y+34	; 0x22
    1650:	9e 8f       	std	Y+30, r25	; 0x1e
    1652:	8d 8f       	std	Y+29, r24	; 0x1d
    1654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1656:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <HMI_createPassword+0x7c6>
    165c:	9e 8f       	std	Y+30, r25	; 0x1e
    165e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(UART_DELAY);

		/*	if two passwords don't match*/
		if(matching_state==0)
    1660:	80 91 2b 01 	lds	r24, 0x012B
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <HMI_createPassword+0x7d8>
    1668:	78 c0       	rjmp	.+240    	; 0x175a <HMI_createPassword+0x8c8>
		{
			/*	clear the screen and display not matching	*/
			LCD_clearScreen();
    166a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
			LCD_displayString("Not Matching");
    166e:	8c e9       	ldi	r24, 0x9C	; 156
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	aa e7       	ldi	r26, 0x7A	; 122
    167c:	b4 e4       	ldi	r27, 0x44	; 68
    167e:	89 8f       	std	Y+25, r24	; 0x19
    1680:	9a 8f       	std	Y+26, r25	; 0x1a
    1682:	ab 8f       	std	Y+27, r26	; 0x1b
    1684:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	69 8d       	ldd	r22, Y+25	; 0x19
    1688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8d 8b       	std	Y+21, r24	; 0x15
    16a0:	9e 8b       	std	Y+22, r25	; 0x16
    16a2:	af 8b       	std	Y+23, r26	; 0x17
    16a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a6:	6d 89       	ldd	r22, Y+21	; 0x15
    16a8:	7e 89       	ldd	r23, Y+22	; 0x16
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <HMI_createPassword+0x836>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <HMI_createPassword+0x8b4>
	else if (__tmp > 65535)
    16c8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ca:	7e 89       	ldd	r23, Y+22	; 0x16
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <HMI_createPassword+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	69 8d       	ldd	r22, Y+25	; 0x19
    16e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9c 8b       	std	Y+20, r25	; 0x14
    1706:	8b 8b       	std	Y+19, r24	; 0x13
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <HMI_createPassword+0x896>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9a 8b       	std	Y+18, r25	; 0x12
    1710:	89 8b       	std	Y+17, r24	; 0x11
    1712:	89 89       	ldd	r24, Y+17	; 0x11
    1714:	9a 89       	ldd	r25, Y+18	; 0x12
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <HMI_createPassword+0x884>
    171a:	9a 8b       	std	Y+18, r25	; 0x12
    171c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <HMI_createPassword+0x878>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <HMI_createPassword+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	98 8b       	std	Y+16, r25	; 0x10
    174c:	8f 87       	std	Y+15, r24	; 0x0f
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	98 89       	ldd	r25, Y+16	; 0x10
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <HMI_createPassword+0x8c0>
    1756:	98 8b       	std	Y+16, r25	; 0x10
    1758:	8f 87       	std	Y+15, r24	; 0x0f

void HMI_createPassword(void)
{
	matching_state=0;

	while(matching_state==0)
    175a:	80 91 2b 01 	lds	r24, 0x012B
    175e:	88 23       	and	r24, r24
    1760:	09 f4       	brne	.+2      	; 0x1764 <HMI_createPassword+0x8d2>
    1762:	a7 cb       	rjmp	.-2226   	; 0xeb2 <HMI_createPassword+0x20>
		}
	}
	/*	if two passwords match*/
	/*	clear the screen and display password created	*/

	LCD_clearScreen();
    1764:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
	LCD_displayString("Password");
    1768:	89 ea       	ldi	r24, 0xA9	; 169
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
	LCD_moveCursor(1, 0);
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>
	LCD_displayString("Created");
    1778:	82 eb       	ldi	r24, 0xB2	; 178
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	aa e7       	ldi	r26, 0x7A	; 122
    1786:	b4 e4       	ldi	r27, 0x44	; 68
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	ad 87       	std	Y+13, r26	; 0x0d
    178e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a ef       	ldi	r20, 0xFA	; 250
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <HMI_createPassword+0x940>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <HMI_createPassword+0x9be>
	else if (__tmp > 65535)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <HMI_createPassword+0x9aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <HMI_createPassword+0x9a0>
    1814:	88 ec       	ldi	r24, 0xC8	; 200
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <HMI_createPassword+0x98e>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <HMI_createPassword+0x982>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <HMI_createPassword+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <HMI_createPassword+0x9ca>
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    1864:	c8 59       	subi	r28, 0x98	; 152
    1866:	df 4f       	sbci	r29, 0xFF	; 255
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <HMI_changePassword>:

void HMI_changePassword(void)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	ae 97       	sbiw	r28, 0x2e	; 46
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
	matching_state = 0;
    1890:	10 92 2b 01 	sts	0x012B, r1
	int passwordTrials = 0;
    1894:	1e a6       	std	Y+46, r1	; 0x2e
    1896:	1d a6       	std	Y+45, r1	; 0x2d
    1898:	a9 c1       	rjmp	.+850    	; 0x1bec <HMI_changePassword+0x370>
	/*	if the user is entering passwords and has trails	*/
	while(matching_state==0 && passwordTrials<3)
	{

		/*Clear Screen then write Enter Current Password*/
		LCD_clearScreen();
    189a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
		LCD_displayString("Enter Current");
    189e:	8a eb       	ldi	r24, 0xBA	; 186
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 0);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>
		LCD_displayString("Password: ");
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 9);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	69 e0       	ldi	r22, 0x09	; 9
    18ba:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>

		KEYPAD_keyPressed=0;
    18be:	10 92 36 01 	sts	0x0136, r1

		int currentPassword_counter = 0;
    18c2:	1c a6       	std	Y+44, r1	; 0x2c
    18c4:	1b a6       	std	Y+43, r1	; 0x2b
    18c6:	8b c0       	rjmp	.+278    	; 0x19de <HMI_changePassword+0x162>
		while(currentPassword_counter<PASSWORD_LENGTH)
		{
			/*	get password form the user	*/
			KEYPAD_keyPressed=KEYPAD_getPressedKey();
    18c8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    18cc:	80 93 36 01 	sts	0x0136, r24

			if(KEYPAD_keyPressed<=9 && KEYPAD_keyPressed >=0)
    18d0:	80 91 36 01 	lds	r24, 0x0136
    18d4:	8a 30       	cpi	r24, 0x0A	; 10
    18d6:	08 f0       	brcs	.+2      	; 0x18da <HMI_changePassword+0x5e>
    18d8:	82 c0       	rjmp	.+260    	; 0x19de <HMI_changePassword+0x162>
			{
				/* show interaction the input	*/
				LCD_displayCharacter('*');
    18da:	8a e2       	ldi	r24, 0x2A	; 42
    18dc:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayCharacter>

				/*	store the password in password array	*/
				password[currentPassword_counter]=KEYPAD_keyPressed;
    18e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e4:	20 91 36 01 	lds	r18, 0x0136
    18e8:	fc 01       	movw	r30, r24
    18ea:	e2 5d       	subi	r30, 0xD2	; 210
    18ec:	fe 4f       	sbci	r31, 0xFE	; 254
    18ee:	20 83       	st	Z, r18
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	aa ef       	ldi	r26, 0xFA	; 250
    18f6:	b3 e4       	ldi	r27, 0x43	; 67
    18f8:	8f a3       	std	Y+39, r24	; 0x27
    18fa:	98 a7       	std	Y+40, r25	; 0x28
    18fc:	a9 a7       	std	Y+41, r26	; 0x29
    18fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6f a1       	ldd	r22, Y+39	; 0x27
    1902:	78 a5       	ldd	r23, Y+40	; 0x28
    1904:	89 a5       	ldd	r24, Y+41	; 0x29
    1906:	9a a5       	ldd	r25, Y+42	; 0x2a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	9c a3       	std	Y+36, r25	; 0x24
    191c:	ad a3       	std	Y+37, r26	; 0x25
    191e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <HMI_changePassword+0xc6>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <HMI_changePassword+0x144>
	else if (__tmp > 65535)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <HMI_changePassword+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6f a1       	ldd	r22, Y+39	; 0x27
    195c:	78 a5       	ldd	r23, Y+40	; 0x28
    195e:	89 a5       	ldd	r24, Y+41	; 0x29
    1960:	9a a5       	ldd	r25, Y+42	; 0x2a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <HMI_changePassword+0x126>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	98 a1       	ldd	r25, Y+32	; 0x20
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <HMI_changePassword+0x114>
    1994:	98 a3       	std	Y+32, r25	; 0x20
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9a a3       	std	Y+34, r25	; 0x22
    19a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <HMI_changePassword+0x108>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <HMI_changePassword+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <HMI_changePassword+0x150>
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d

				_delay_ms(KEYPAD_DELAY);
				currentPassword_counter++;
    19d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	9c a7       	std	Y+44, r25	; 0x2c
    19dc:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_moveCursor(1, 9);

		KEYPAD_keyPressed=0;

		int currentPassword_counter = 0;
		while(currentPassword_counter<PASSWORD_LENGTH)
    19de:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e2:	85 30       	cpi	r24, 0x05	; 5
    19e4:	91 05       	cpc	r25, r1
    19e6:	0c f4       	brge	.+2      	; 0x19ea <HMI_changePassword+0x16e>
    19e8:	6f cf       	rjmp	.-290    	; 0x18c8 <HMI_changePassword+0x4c>
				currentPassword_counter++;
			}
		}

		/* wait for user to press on the enter key to proceed to next step*/
		while(KEYPAD_getPressedKey()!=ENTER_KEY);
    19ea:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    19ee:	8d 33       	cpi	r24, 0x3D	; 61
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <HMI_changePassword+0x16e>


		/*	call HMI_checkPassword function to compare entered password with the one stored in the memory	*/
		HMI_checkPassword();
    19f2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <HMI_checkPassword>

		/*	send ready to the other mc	*/
		UART_sendByte(READY);
    19f6:	80 e1       	ldi	r24, 0x10	; 16
    19f8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>

		/*	Receive the matching decision	*/
		matching_state=UART_recieveByte();
    19fc:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    1a00:	80 93 2b 01 	sts	0x012B, r24
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a8 e4       	ldi	r26, 0x48	; 72
    1a0a:	b2 e4       	ldi	r27, 0x42	; 66
    1a0c:	89 8f       	std	Y+25, r24	; 0x19
    1a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a10:	ab 8f       	std	Y+27, r26	; 0x1b
    1a12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	69 8d       	ldd	r22, Y+25	; 0x19
    1a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a ef       	ldi	r20, 0xFA	; 250
    1a22:	54 e4       	ldi	r21, 0x44	; 68
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8d 8b       	std	Y+21, r24	; 0x15
    1a2e:	9e 8b       	std	Y+22, r25	; 0x16
    1a30:	af 8b       	std	Y+23, r26	; 0x17
    1a32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a34:	6d 89       	ldd	r22, Y+21	; 0x15
    1a36:	7e 89       	ldd	r23, Y+22	; 0x16
    1a38:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <HMI_changePassword+0x1da>
		__ticks = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <HMI_changePassword+0x258>
	else if (__tmp > 65535)
    1a56:	6d 89       	ldd	r22, Y+21	; 0x15
    1a58:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	4c f5       	brge	.+82     	; 0x1ac0 <HMI_changePassword+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e2       	ldi	r20, 0x20	; 32
    1a7c:	51 e4       	ldi	r21, 0x41	; 65
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9c 8b       	std	Y+20, r25	; 0x14
    1a94:	8b 8b       	std	Y+19, r24	; 0x13
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <HMI_changePassword+0x23a>
    1a98:	88 ec       	ldi	r24, 0xC8	; 200
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9a 8b       	std	Y+18, r25	; 0x12
    1a9e:	89 8b       	std	Y+17, r24	; 0x11
    1aa0:	89 89       	ldd	r24, Y+17	; 0x11
    1aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <HMI_changePassword+0x228>
    1aa8:	9a 8b       	std	Y+18, r25	; 0x12
    1aaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <HMI_changePassword+0x21c>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <HMI_changePassword+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9c 8b       	std	Y+20, r25	; 0x14
    1ad2:	8b 8b       	std	Y+19, r24	; 0x13
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	98 8b       	std	Y+16, r25	; 0x10
    1ada:	8f 87       	std	Y+15, r24	; 0x0f
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	98 89       	ldd	r25, Y+16	; 0x10
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <HMI_changePassword+0x264>
    1ae4:	98 8b       	std	Y+16, r25	; 0x10
    1ae6:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(UART_DELAY);

		/*increment trials*/
		passwordTrials++;
    1ae8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9e a7       	std	Y+46, r25	; 0x2e
    1af0:	8d a7       	std	Y+45, r24	; 0x2d

		/*	if the matching state equal to 0, this means wrong pass	*/
		if(matching_state==0)
    1af2:	80 91 2b 01 	lds	r24, 0x012B
    1af6:	88 23       	and	r24, r24
    1af8:	09 f0       	breq	.+2      	; 0x1afc <HMI_changePassword+0x280>
    1afa:	78 c0       	rjmp	.+240    	; 0x1bec <HMI_changePassword+0x370>
		{
			LCD_clearScreen();
    1afc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1b00:	83 ed       	ldi	r24, 0xD3	; 211
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	aa e7       	ldi	r26, 0x7A	; 122
    1b0e:	b4 e4       	ldi	r27, 0x44	; 68
    1b10:	8b 87       	std	Y+11, r24	; 0x0b
    1b12:	9c 87       	std	Y+12, r25	; 0x0c
    1b14:	ad 87       	std	Y+13, r26	; 0x0d
    1b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8f 83       	std	Y+7, r24	; 0x07
    1b32:	98 87       	std	Y+8, r25	; 0x08
    1b34:	a9 87       	std	Y+9, r26	; 0x09
    1b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <HMI_changePassword+0x2de>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <HMI_changePassword+0x35c>
	else if (__tmp > 65535)
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <HMI_changePassword+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <HMI_changePassword+0x33e>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <HMI_changePassword+0x32c>
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <HMI_changePassword+0x320>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <HMI_changePassword+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <HMI_changePassword+0x368>
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
{
	matching_state = 0;
	int passwordTrials = 0;

	/*	if the user is entering passwords and has trails	*/
	while(matching_state==0 && passwordTrials<3)
    1bec:	80 91 2b 01 	lds	r24, 0x012B
    1bf0:	88 23       	and	r24, r24
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <HMI_changePassword+0x384>
    1bf4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	0c f4       	brge	.+2      	; 0x1c00 <HMI_changePassword+0x384>
    1bfe:	4d ce       	rjmp	.-870    	; 0x189a <HMI_changePassword+0x1e>
			_delay_ms(1000);
		}
	}

	/*	if passwords match	*/
	if(matching_state==1)
    1c00:	80 91 2b 01 	lds	r24, 0x012B
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	19 f4       	brne	.+6      	; 0x1c0e <HMI_changePassword+0x392>
	{
		/*	call create new password function to create new pass	*/
		HMI_createPassword();
    1c08:	0e 94 49 07 	call	0xe92	; 0xe92 <HMI_createPassword>
    1c0c:	0c c0       	rjmp	.+24     	; 0x1c26 <HMI_changePassword+0x3aa>


	/*	if user has reached 3 trails with wrong password	*/
	else{
		/*	timer ticks = 0	*/
		timerTicks=0;
    1c0e:	10 92 2a 01 	sts	0x012A, r1

		/*	clear screen and write*/
		LCD_clearScreen();
    1c12:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
		LCD_displayString("ALRET .. ALRET");
    1c16:	82 ee       	ldi	r24, 0xE2	; 226
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

		/*freeze the system */
		while(timerTicks<BUZZER_ACTIVE);
    1c1e:	80 91 2a 01 	lds	r24, 0x012A
    1c22:	84 31       	cpi	r24, 0x14	; 20
    1c24:	e0 f3       	brcs	.-8      	; 0x1c1e <HMI_changePassword+0x3a2>
	}
}
    1c26:	ae 96       	adiw	r28, 0x2e	; 46
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <HMI_checkPassword>:

void HMI_checkPassword(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	60 97       	sbiw	r28, 0x10	; 16
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61

	/*	wait until the other mc is ready	*/
	while(UART_recieveByte() != READY);
    1c4c:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    1c50:	80 31       	cpi	r24, 0x10	; 16
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <HMI_checkPassword+0x14>

	/*	send data by the UART	*/
	for(int i = 0; i<PASSWORD_LENGTH; i++)
    1c54:	18 8a       	std	Y+16, r1	; 0x10
    1c56:	1f 86       	std	Y+15, r1	; 0x0f
    1c58:	7f c0       	rjmp	.+254    	; 0x1d58 <HMI_checkPassword+0x120>
	{
		UART_sendByte(password[i]);
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	98 89       	ldd	r25, Y+16	; 0x10
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 5d       	subi	r30, 0xD2	; 210
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	80 81       	ld	r24, Z
    1c66:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a8 e4       	ldi	r26, 0x48	; 72
    1c70:	b2 e4       	ldi	r27, 0x42	; 66
    1c72:	8b 87       	std	Y+11, r24	; 0x0b
    1c74:	9c 87       	std	Y+12, r25	; 0x0c
    1c76:	ad 87       	std	Y+13, r26	; 0x0d
    1c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a ef       	ldi	r20, 0xFA	; 250
    1c88:	54 e4       	ldi	r21, 0x44	; 68
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8f 83       	std	Y+7, r24	; 0x07
    1c94:	98 87       	std	Y+8, r25	; 0x08
    1c96:	a9 87       	std	Y+9, r26	; 0x09
    1c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <HMI_checkPassword+0x84>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	3f c0       	rjmp	.+126    	; 0x1d3a <HMI_checkPassword+0x102>
	else if (__tmp > 65535)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	4c f5       	brge	.+82     	; 0x1d26 <HMI_checkPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <HMI_checkPassword+0xe4>
    1cfe:	88 ec       	ldi	r24, 0xC8	; 200
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <HMI_checkPassword+0xd2>
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <HMI_checkPassword+0xc6>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <HMI_checkPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <HMI_checkPassword+0x10e>
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01

	/*	wait until the other mc is ready	*/
	while(UART_recieveByte() != READY);

	/*	send data by the UART	*/
	for(int i = 0; i<PASSWORD_LENGTH; i++)
    1d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d50:	98 89       	ldd	r25, Y+16	; 0x10
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	85 30       	cpi	r24, 0x05	; 5
    1d5e:	91 05       	cpc	r25, r1
    1d60:	0c f4       	brge	.+2      	; 0x1d64 <HMI_checkPassword+0x12c>
    1d62:	7b cf       	rjmp	.-266    	; 0x1c5a <HMI_checkPassword+0x22>
	{
		UART_sendByte(password[i]);
		_delay_ms(UART_DELAY);
	}
}
    1d64:	60 96       	adiw	r28, 0x10	; 16
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <HMI_openDoor>:

void HMI_openDoor(void)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	ae 97       	sbiw	r28, 0x2e	; 46
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
	matching_state=0;
    1d8a:	10 92 2b 01 	sts	0x012B, r1
	int doorTrials=0;
    1d8e:	1e a6       	std	Y+46, r1	; 0x2e
    1d90:	1d a6       	std	Y+45, r1	; 0x2d
    1d92:	a9 c1       	rjmp	.+850    	; 0x20e6 <HMI_openDoor+0x370>
	/*	if the user is entering passwords and has trails	*/
	while(matching_state==0 && doorTrials<3)
	{

		/*Clear Screen then write Enter Current Password*/
		LCD_clearScreen();
    1d94:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
		LCD_displayString("Enter Current");
    1d98:	8a eb       	ldi	r24, 0xBA	; 186
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 0);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>
		LCD_displayString("Password: ");
    1da8:	88 ec       	ldi	r24, 0xC8	; 200
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
		LCD_moveCursor(1, 9);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	69 e0       	ldi	r22, 0x09	; 9
    1db4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>

		KEYPAD_keyPressed=0;
    1db8:	10 92 36 01 	sts	0x0136, r1

		int password_counter=0;
    1dbc:	1c a6       	std	Y+44, r1	; 0x2c
    1dbe:	1b a6       	std	Y+43, r1	; 0x2b
    1dc0:	8b c0       	rjmp	.+278    	; 0x1ed8 <HMI_openDoor+0x162>
		while(password_counter<PASSWORD_LENGTH)
		{
			/* show interaction the input	*/
			KEYPAD_keyPressed=KEYPAD_getPressedKey();
    1dc2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    1dc6:	80 93 36 01 	sts	0x0136, r24

			if(KEYPAD_keyPressed<=9 && KEYPAD_keyPressed >=0)
    1dca:	80 91 36 01 	lds	r24, 0x0136
    1dce:	8a 30       	cpi	r24, 0x0A	; 10
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <HMI_openDoor+0x5e>
    1dd2:	82 c0       	rjmp	.+260    	; 0x1ed8 <HMI_openDoor+0x162>
			{
				/* show interaction the input	*/
				LCD_displayCharacter('*');
    1dd4:	8a e2       	ldi	r24, 0x2A	; 42
    1dd6:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayCharacter>

				/*	store the password in password array	*/
				password[password_counter]=KEYPAD_keyPressed;
    1dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ddc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dde:	20 91 36 01 	lds	r18, 0x0136
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 5d       	subi	r30, 0xD2	; 210
    1de6:	fe 4f       	sbci	r31, 0xFE	; 254
    1de8:	20 83       	st	Z, r18
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	aa ef       	ldi	r26, 0xFA	; 250
    1df0:	b3 e4       	ldi	r27, 0x43	; 67
    1df2:	8f a3       	std	Y+39, r24	; 0x27
    1df4:	98 a7       	std	Y+40, r25	; 0x28
    1df6:	a9 a7       	std	Y+41, r26	; 0x29
    1df8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1e00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8b a3       	std	Y+35, r24	; 0x23
    1e14:	9c a3       	std	Y+36, r25	; 0x24
    1e16:	ad a3       	std	Y+37, r26	; 0x25
    1e18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e20:	9e a1       	ldd	r25, Y+38	; 0x26
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <HMI_openDoor+0xc6>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <HMI_openDoor+0x144>
	else if (__tmp > 65535)
    1e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	9e a1       	ldd	r25, Y+38	; 0x26
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <HMI_openDoor+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6f a1       	ldd	r22, Y+39	; 0x27
    1e56:	78 a5       	ldd	r23, Y+40	; 0x28
    1e58:	89 a5       	ldd	r24, Y+41	; 0x29
    1e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <HMI_openDoor+0x126>
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	98 a3       	std	Y+32, r25	; 0x20
    1e84:	8f 8f       	std	Y+31, r24	; 0x1f
    1e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e88:	98 a1       	ldd	r25, Y+32	; 0x20
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <HMI_openDoor+0x114>
    1e8e:	98 a3       	std	Y+32, r25	; 0x20
    1e90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	89 a1       	ldd	r24, Y+33	; 0x21
    1e94:	9a a1       	ldd	r25, Y+34	; 0x22
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <HMI_openDoor+0x108>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <HMI_openDoor+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1eac:	9e a1       	ldd	r25, Y+38	; 0x26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebe:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <HMI_openDoor+0x150>
    1eca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ecc:	8d 8f       	std	Y+29, r24	; 0x1d

				_delay_ms(KEYPAD_DELAY);
				password_counter++;
    1ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	9c a7       	std	Y+44, r25	; 0x2c
    1ed6:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_moveCursor(1, 9);

		KEYPAD_keyPressed=0;

		int password_counter=0;
		while(password_counter<PASSWORD_LENGTH)
    1ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1edc:	85 30       	cpi	r24, 0x05	; 5
    1ede:	91 05       	cpc	r25, r1
    1ee0:	0c f4       	brge	.+2      	; 0x1ee4 <HMI_openDoor+0x16e>
    1ee2:	6f cf       	rjmp	.-290    	; 0x1dc2 <HMI_openDoor+0x4c>
				password_counter++;
			}
		}

		/* wait for user to press on the enter key to proceed to next step*/
		while(KEYPAD_getPressedKey()!=ENTER_KEY);
    1ee4:	0e 94 53 14 	call	0x28a6	; 0x28a6 <KEYPAD_getPressedKey>
    1ee8:	8d 33       	cpi	r24, 0x3D	; 61
    1eea:	e1 f7       	brne	.-8      	; 0x1ee4 <HMI_openDoor+0x16e>

		/*	call HMI_checkPassword function to compare entered password with the one stored in the memory	*/
		HMI_checkPassword();
    1eec:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <HMI_checkPassword>

		/*	send ready to the other mc	*/
		UART_sendByte(READY);
    1ef0:	80 e1       	ldi	r24, 0x10	; 16
    1ef2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>

		/*	Receive the matching decision	*/
		matching_state=UART_recieveByte();
    1ef6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    1efa:	80 93 2b 01 	sts	0x012B, r24
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a8 e4       	ldi	r26, 0x48	; 72
    1f04:	b2 e4       	ldi	r27, 0x42	; 66
    1f06:	89 8f       	std	Y+25, r24	; 0x19
    1f08:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8d 8b       	std	Y+21, r24	; 0x15
    1f28:	9e 8b       	std	Y+22, r25	; 0x16
    1f2a:	af 8b       	std	Y+23, r26	; 0x17
    1f2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <HMI_openDoor+0x1da>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <HMI_openDoor+0x258>
	else if (__tmp > 65535)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <HMI_openDoor+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <HMI_openDoor+0x23a>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	89 89       	ldd	r24, Y+17	; 0x11
    1f9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <HMI_openDoor+0x228>
    1fa2:	9a 8b       	std	Y+18, r25	; 0x12
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <HMI_openDoor+0x21c>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <HMI_openDoor+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	98 89       	ldd	r25, Y+16	; 0x10
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <HMI_openDoor+0x264>
    1fde:	98 8b       	std	Y+16, r25	; 0x10
    1fe0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(UART_DELAY);

		/*increment door opening trials*/
		doorTrials++;
    1fe2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	9e a7       	std	Y+46, r25	; 0x2e
    1fea:	8d a7       	std	Y+45, r24	; 0x2d


		/*	if the matching state equal to 0, this means wrong pass	*/
		if(matching_state==0)
    1fec:	80 91 2b 01 	lds	r24, 0x012B
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <HMI_openDoor+0x280>
    1ff4:	78 c0       	rjmp	.+240    	; 0x20e6 <HMI_openDoor+0x370>
		{
			LCD_clearScreen();
    1ff6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1ffa:	83 ed       	ldi	r24, 0xD3	; 211
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	aa e7       	ldi	r26, 0x7A	; 122
    2008:	b4 e4       	ldi	r27, 0x44	; 68
    200a:	8b 87       	std	Y+11, r24	; 0x0b
    200c:	9c 87       	std	Y+12, r25	; 0x0c
    200e:	ad 87       	std	Y+13, r26	; 0x0d
    2010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a ef       	ldi	r20, 0xFA	; 250
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8f 83       	std	Y+7, r24	; 0x07
    202c:	98 87       	std	Y+8, r25	; 0x08
    202e:	a9 87       	std	Y+9, r26	; 0x09
    2030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2032:	6f 81       	ldd	r22, Y+7	; 0x07
    2034:	78 85       	ldd	r23, Y+8	; 0x08
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <HMI_openDoor+0x2de>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <HMI_openDoor+0x35c>
	else if (__tmp > 65535)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <HMI_openDoor+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <HMI_openDoor+0x33e>
    2096:	88 ec       	ldi	r24, 0xC8	; 200
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <HMI_openDoor+0x32c>
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <HMI_openDoor+0x320>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <HMI_openDoor+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <HMI_openDoor+0x368>
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
{
	matching_state=0;
	int doorTrials=0;

	/*	if the user is entering passwords and has trails	*/
	while(matching_state==0 && doorTrials<3)
    20e6:	80 91 2b 01 	lds	r24, 0x012B
    20ea:	88 23       	and	r24, r24
    20ec:	31 f4       	brne	.+12     	; 0x20fa <HMI_openDoor+0x384>
    20ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    20f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    20f2:	83 30       	cpi	r24, 0x03	; 3
    20f4:	91 05       	cpc	r25, r1
    20f6:	0c f4       	brge	.+2      	; 0x20fa <HMI_openDoor+0x384>
    20f8:	4d ce       	rjmp	.-870    	; 0x1d94 <HMI_openDoor+0x1e>
		}
	}

	/*	if passwords match	*/

	if(matching_state==1)
    20fa:	80 91 2b 01 	lds	r24, 0x012B
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	09 f5       	brne	.+66     	; 0x2144 <HMI_openDoor+0x3ce>
	{

		/*	clear screen and rest ticks	*/
		LCD_clearScreen();
    2102:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>
		timerTicks=0;
    2106:	10 92 2a 01 	sts	0x012A, r1

		/*display unlocking*/
		LCD_displayString("Unlocking...");
    210a:	81 ef       	ldi	r24, 0xF1	; 241
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

		/* wait for 15 secs	(opening of the door timing) then clear screen*/
		while(timerTicks<DOOR_OPEN);
    2112:	80 91 2a 01 	lds	r24, 0x012A
    2116:	85 30       	cpi	r24, 0x05	; 5
    2118:	e0 f3       	brcs	.-8      	; 0x2112 <HMI_openDoor+0x39c>
		LCD_clearScreen();
    211a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*	display unlocked in the hold state	*/
		LCD_displayString("Unlocked");
    211e:	8e ef       	ldi	r24, 0xFE	; 254
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

		/*	wait for 3 secs	then clear the screen */
		while(timerTicks<(DOOR_OPEN+DOOR_HOLD));
    2126:	80 91 2a 01 	lds	r24, 0x012A
    212a:	86 30       	cpi	r24, 0x06	; 6
    212c:	e0 f3       	brcs	.-8      	; 0x2126 <HMI_openDoor+0x3b0>
		LCD_clearScreen();
    212e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*display locking*/
		LCD_displayString("Locking..");
    2132:	87 e0       	ldi	r24, 0x07	; 7
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

		/* wait for 15 secs	(closing of the door timing) then clear screen*/
		while(timerTicks<(DOOR_OPEN+DOOR_HOLD+DOOR_CLOSE));
    213a:	80 91 2a 01 	lds	r24, 0x012A
    213e:	8b 30       	cpi	r24, 0x0B	; 11
    2140:	e0 f3       	brcs	.-8      	; 0x213a <HMI_openDoor+0x3c4>
    2142:	0c c0       	rjmp	.+24     	; 0x215c <HMI_openDoor+0x3e6>
	}

	/*	if user reached max trails	 */
	else{
		/*	reset timer ticks and clear screen	*/
		timerTicks=0;
    2144:	10 92 2a 01 	sts	0x012A, r1
		LCD_clearScreen();
    2148:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_clearScreen>

		/*	display	*/
		LCD_displayString("ALRET");
    214c:	81 e1       	ldi	r24, 0x11	; 17
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>

		/*Freeze the system*/
		while(timerTicks<BUZZER_ACTIVE);
    2154:	80 91 2a 01 	lds	r24, 0x012A
    2158:	84 31       	cpi	r24, 0x14	; 20
    215a:	e0 f3       	brcs	.-8      	; 0x2154 <HMI_openDoor+0x3de>
	}
}
    215c:	ae 96       	adiw	r28, 0x2e	; 46
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <main>:
#include "keypad.h"
#include "uart.h"
#include "timer1.h"

int main(void)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	65 97       	sbiw	r28, 0x15	; 21
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config={
			Parity_Disable,
			Stop_Bits_1,
			Bits_8,
			BR_9600
	};
    2182:	ce 01       	movw	r24, r28
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	9d 87       	std	Y+13, r25	; 0x0d
    2188:	8c 87       	std	Y+12, r24	; 0x0c
    218a:	e5 e2       	ldi	r30, 0x25	; 37
    218c:	f1 e0       	ldi	r31, 0x01	; 1
    218e:	ff 87       	std	Y+15, r31	; 0x0f
    2190:	ee 87       	std	Y+14, r30	; 0x0e
    2192:	f5 e0       	ldi	r31, 0x05	; 5
    2194:	f8 8b       	std	Y+16, r31	; 0x10
    2196:	ee 85       	ldd	r30, Y+14	; 0x0e
    2198:	ff 85       	ldd	r31, Y+15	; 0x0f
    219a:	00 80       	ld	r0, Z
    219c:	8e 85       	ldd	r24, Y+14	; 0x0e
    219e:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	9f 87       	std	Y+15, r25	; 0x0f
    21a4:	8e 87       	std	Y+14, r24	; 0x0e
    21a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    21a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    21aa:	00 82       	st	Z, r0
    21ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	9d 87       	std	Y+13, r25	; 0x0d
    21b4:	8c 87       	std	Y+12, r24	; 0x0c
    21b6:	98 89       	ldd	r25, Y+16	; 0x10
    21b8:	91 50       	subi	r25, 0x01	; 1
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	e8 89       	ldd	r30, Y+16	; 0x10
    21be:	ee 23       	and	r30, r30
    21c0:	51 f7       	brne	.-44     	; 0x2196 <main+0x28>
	Timer1_ConfigType timer1_Config={
			0,
			23437,
			CLK_1024,
			COMPARE
	};
    21c2:	ce 01       	movw	r24, r28
    21c4:	06 96       	adiw	r24, 0x06	; 6
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
    21ca:	ef e1       	ldi	r30, 0x1F	; 31
    21cc:	f1 e0       	ldi	r31, 0x01	; 1
    21ce:	fc 8b       	std	Y+20, r31	; 0x14
    21d0:	eb 8b       	std	Y+19, r30	; 0x13
    21d2:	f6 e0       	ldi	r31, 0x06	; 6
    21d4:	fd 8b       	std	Y+21, r31	; 0x15
    21d6:	eb 89       	ldd	r30, Y+19	; 0x13
    21d8:	fc 89       	ldd	r31, Y+20	; 0x14
    21da:	00 80       	ld	r0, Z
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	e9 89       	ldd	r30, Y+17	; 0x11
    21e8:	fa 89       	ldd	r31, Y+18	; 0x12
    21ea:	00 82       	st	Z, r0
    21ec:	89 89       	ldd	r24, Y+17	; 0x11
    21ee:	9a 89       	ldd	r25, Y+18	; 0x12
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	9a 8b       	std	Y+18, r25	; 0x12
    21f4:	89 8b       	std	Y+17, r24	; 0x11
    21f6:	9d 89       	ldd	r25, Y+21	; 0x15
    21f8:	91 50       	subi	r25, 0x01	; 1
    21fa:	9d 8b       	std	Y+21, r25	; 0x15
    21fc:	ed 89       	ldd	r30, Y+21	; 0x15
    21fe:	ee 23       	and	r30, r30
    2200:	51 f7       	brne	.-44     	; 0x21d6 <main+0x68>

	/*	activate the global interrupts	*/
	sei();
    2202:	78 94       	sei

	/*	modules initialization	*/
	UART_init(&UART_Config);
    2204:	ce 01       	movw	r24, r28
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <UART_init>

	Timer1_setCallBack(TIMER1_CallBack);
    220c:	83 ea       	ldi	r24, 0xA3	; 163
    220e:	95 e0       	ldi	r25, 0x05	; 5
    2210:	0e 94 41 1b 	call	0x3682	; 0x3682 <Timer1_setCallBack>
	Timer1_init(&timer1_Config);
    2214:	ce 01       	movw	r24, r28
    2216:	06 96       	adiw	r24, 0x06	; 6
    2218:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Timer1_init>
	LCD_init();
    221c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_init>


	/*	Application Loop	*/

	HMI_createPassword();
    2220:	0e 94 49 07 	call	0xe92	; 0xe92 <HMI_createPassword>

	while(1)
	{
		HMI_mainMenu();
    2224:	0e 94 af 05 	call	0xb5e	; 0xb5e <HMI_mainMenu>
    2228:	fd cf       	rjmp	.-6      	; 0x2224 <main+0xb6>

0000222a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <GPIO_setupPinDirection+0x6>
    2230:	00 d0       	rcall	.+0      	; 0x2232 <GPIO_setupPinDirection+0x8>
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	6a 83       	std	Y+2, r22	; 0x02
    223c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	88 30       	cpi	r24, 0x08	; 8
    2242:	08 f0       	brcs	.+2      	; 0x2246 <GPIO_setupPinDirection+0x1c>
    2244:	d5 c0       	rjmp	.+426    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	08 f0       	brcs	.+2      	; 0x224e <GPIO_setupPinDirection+0x24>
    224c:	d1 c0       	rjmp	.+418    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3d 83       	std	Y+5, r19	; 0x05
    2256:	2c 83       	std	Y+4, r18	; 0x04
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <GPIO_setupPinDirection+0x3a>
    2262:	43 c0       	rjmp	.+134    	; 0x22ea <GPIO_setupPinDirection+0xc0>
    2264:	2c 81       	ldd	r18, Y+4	; 0x04
    2266:	3d 81       	ldd	r19, Y+5	; 0x05
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	2c f4       	brge	.+10     	; 0x2278 <GPIO_setupPinDirection+0x4e>
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	71 f0       	breq	.+28     	; 0x2292 <GPIO_setupPinDirection+0x68>
    2276:	bc c0       	rjmp	.+376    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
    227a:	3d 81       	ldd	r19, Y+5	; 0x05
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <GPIO_setupPinDirection+0x5a>
    2282:	5f c0       	rjmp	.+190    	; 0x2342 <GPIO_setupPinDirection+0x118>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <GPIO_setupPinDirection+0x66>
    228e:	85 c0       	rjmp	.+266    	; 0x239a <GPIO_setupPinDirection+0x170>
    2290:	af c0       	rjmp	.+350    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	a1 f4       	brne	.+40     	; 0x22c0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2298:	aa e3       	ldi	r26, 0x3A	; 58
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ea e3       	ldi	r30, 0x3A	; 58
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <GPIO_setupPinDirection+0x8c>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <GPIO_setupPinDirection+0x88>
    22ba:	84 2b       	or	r24, r20
    22bc:	8c 93       	st	X, r24
    22be:	98 c0       	rjmp	.+304    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    22c0:	aa e3       	ldi	r26, 0x3A	; 58
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ea e3       	ldi	r30, 0x3A	; 58
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 2e       	mov	r0, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <GPIO_setupPinDirection+0xb4>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	0a 94       	dec	r0
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <GPIO_setupPinDirection+0xb0>
    22e2:	80 95       	com	r24
    22e4:	84 23       	and	r24, r20
    22e6:	8c 93       	st	X, r24
    22e8:	83 c0       	rjmp	.+262    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	a1 f4       	brne	.+40     	; 0x2318 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    22f0:	a7 e3       	ldi	r26, 0x37	; 55
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e7 e3       	ldi	r30, 0x37	; 55
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <GPIO_setupPinDirection+0xe4>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <GPIO_setupPinDirection+0xe0>
    2312:	84 2b       	or	r24, r20
    2314:	8c 93       	st	X, r24
    2316:	6c c0       	rjmp	.+216    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2318:	a7 e3       	ldi	r26, 0x37	; 55
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e7 e3       	ldi	r30, 0x37	; 55
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	48 2f       	mov	r20, r24
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 2e       	mov	r0, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <GPIO_setupPinDirection+0x10c>
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <GPIO_setupPinDirection+0x108>
    233a:	80 95       	com	r24
    233c:	84 23       	and	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	57 c0       	rjmp	.+174    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	a1 f4       	brne	.+40     	; 0x2370 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2348:	a4 e3       	ldi	r26, 0x34	; 52
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e4 e3       	ldi	r30, 0x34	; 52
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	48 2f       	mov	r20, r24
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 2e       	mov	r0, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <GPIO_setupPinDirection+0x13c>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <GPIO_setupPinDirection+0x138>
    236a:	84 2b       	or	r24, r20
    236c:	8c 93       	st	X, r24
    236e:	40 c0       	rjmp	.+128    	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2370:	a4 e3       	ldi	r26, 0x34	; 52
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e4 e3       	ldi	r30, 0x34	; 52
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	48 2f       	mov	r20, r24
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	02 2e       	mov	r0, r18
    2388:	02 c0       	rjmp	.+4      	; 0x238e <GPIO_setupPinDirection+0x164>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <GPIO_setupPinDirection+0x160>
    2392:	80 95       	com	r24
    2394:	84 23       	and	r24, r20
    2396:	8c 93       	st	X, r24
    2398:	2b c0       	rjmp	.+86     	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	a1 f4       	brne	.+40     	; 0x23c8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    23a0:	a1 e3       	ldi	r26, 0x31	; 49
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e1 e3       	ldi	r30, 0x31	; 49
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	48 2f       	mov	r20, r24
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	02 2e       	mov	r0, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <GPIO_setupPinDirection+0x194>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <GPIO_setupPinDirection+0x190>
    23c2:	84 2b       	or	r24, r20
    23c4:	8c 93       	st	X, r24
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    23c8:	a1 e3       	ldi	r26, 0x31	; 49
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e1 e3       	ldi	r30, 0x31	; 49
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	48 2f       	mov	r20, r24
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	02 2e       	mov	r0, r18
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <GPIO_setupPinDirection+0x1bc>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	0a 94       	dec	r0
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <GPIO_setupPinDirection+0x1b8>
    23ea:	80 95       	com	r24
    23ec:	84 23       	and	r24, r20
    23ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <GPIO_writePin+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <GPIO_writePin+0x8>
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	6a 83       	std	Y+2, r22	; 0x02
    2412:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	88 30       	cpi	r24, 0x08	; 8
    2418:	08 f0       	brcs	.+2      	; 0x241c <GPIO_writePin+0x1c>
    241a:	d5 c0       	rjmp	.+426    	; 0x25c6 <GPIO_writePin+0x1c6>
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	08 f0       	brcs	.+2      	; 0x2424 <GPIO_writePin+0x24>
    2422:	d1 c0       	rjmp	.+418    	; 0x25c6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	3d 83       	std	Y+5, r19	; 0x05
    242c:	2c 83       	std	Y+4, r18	; 0x04
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <GPIO_writePin+0x3a>
    2438:	43 c0       	rjmp	.+134    	; 0x24c0 <GPIO_writePin+0xc0>
    243a:	2c 81       	ldd	r18, Y+4	; 0x04
    243c:	3d 81       	ldd	r19, Y+5	; 0x05
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	2c f4       	brge	.+10     	; 0x244e <GPIO_writePin+0x4e>
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	71 f0       	breq	.+28     	; 0x2468 <GPIO_writePin+0x68>
    244c:	bc c0       	rjmp	.+376    	; 0x25c6 <GPIO_writePin+0x1c6>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	09 f4       	brne	.+2      	; 0x245a <GPIO_writePin+0x5a>
    2458:	5f c0       	rjmp	.+190    	; 0x2518 <GPIO_writePin+0x118>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	91 05       	cpc	r25, r1
    2462:	09 f4       	brne	.+2      	; 0x2466 <GPIO_writePin+0x66>
    2464:	85 c0       	rjmp	.+266    	; 0x2570 <GPIO_writePin+0x170>
    2466:	af c0       	rjmp	.+350    	; 0x25c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	a1 f4       	brne	.+40     	; 0x2496 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    246e:	ab e3       	ldi	r26, 0x3B	; 59
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	eb e3       	ldi	r30, 0x3B	; 59
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	48 2f       	mov	r20, r24
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 2e       	mov	r0, r18
    2486:	02 c0       	rjmp	.+4      	; 0x248c <GPIO_writePin+0x8c>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <GPIO_writePin+0x88>
    2490:	84 2b       	or	r24, r20
    2492:	8c 93       	st	X, r24
    2494:	98 c0       	rjmp	.+304    	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2496:	ab e3       	ldi	r26, 0x3B	; 59
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	eb e3       	ldi	r30, 0x3B	; 59
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <GPIO_writePin+0xb4>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <GPIO_writePin+0xb0>
    24b8:	80 95       	com	r24
    24ba:	84 23       	and	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	83 c0       	rjmp	.+262    	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	a1 f4       	brne	.+40     	; 0x24ee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    24c6:	a8 e3       	ldi	r26, 0x38	; 56
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e8 e3       	ldi	r30, 0x38	; 56
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	48 2f       	mov	r20, r24
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	02 2e       	mov	r0, r18
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <GPIO_writePin+0xe4>
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	0a 94       	dec	r0
    24e6:	e2 f7       	brpl	.-8      	; 0x24e0 <GPIO_writePin+0xe0>
    24e8:	84 2b       	or	r24, r20
    24ea:	8c 93       	st	X, r24
    24ec:	6c c0       	rjmp	.+216    	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    24ee:	a8 e3       	ldi	r26, 0x38	; 56
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e8 e3       	ldi	r30, 0x38	; 56
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	48 2f       	mov	r20, r24
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <GPIO_writePin+0x10c>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <GPIO_writePin+0x108>
    2510:	80 95       	com	r24
    2512:	84 23       	and	r24, r20
    2514:	8c 93       	st	X, r24
    2516:	57 c0       	rjmp	.+174    	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	a1 f4       	brne	.+40     	; 0x2546 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    251e:	a5 e3       	ldi	r26, 0x35	; 53
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e3       	ldi	r30, 0x35	; 53
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 2e       	mov	r0, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <GPIO_writePin+0x13c>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	0a 94       	dec	r0
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <GPIO_writePin+0x138>
    2540:	84 2b       	or	r24, r20
    2542:	8c 93       	st	X, r24
    2544:	40 c0       	rjmp	.+128    	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2546:	a5 e3       	ldi	r26, 0x35	; 53
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e5 e3       	ldi	r30, 0x35	; 53
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	48 2f       	mov	r20, r24
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <GPIO_writePin+0x164>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <GPIO_writePin+0x160>
    2568:	80 95       	com	r24
    256a:	84 23       	and	r24, r20
    256c:	8c 93       	st	X, r24
    256e:	2b c0       	rjmp	.+86     	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	a1 f4       	brne	.+40     	; 0x259e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2576:	a2 e3       	ldi	r26, 0x32	; 50
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e2 e3       	ldi	r30, 0x32	; 50
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	48 2f       	mov	r20, r24
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 2e       	mov	r0, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <GPIO_writePin+0x194>
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	0a 94       	dec	r0
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <GPIO_writePin+0x190>
    2598:	84 2b       	or	r24, r20
    259a:	8c 93       	st	X, r24
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    259e:	a2 e3       	ldi	r26, 0x32	; 50
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e2 e3       	ldi	r30, 0x32	; 50
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	48 2f       	mov	r20, r24
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 2e       	mov	r0, r18
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <GPIO_writePin+0x1bc>
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <GPIO_writePin+0x1b8>
    25c0:	80 95       	com	r24
    25c2:	84 23       	and	r24, r20
    25c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <GPIO_readPin+0x6>
    25dc:	00 d0       	rcall	.+0      	; 0x25de <GPIO_readPin+0x8>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	8a 83       	std	Y+2, r24	; 0x02
    25e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    25e8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	88 30       	cpi	r24, 0x08	; 8
    25ee:	08 f0       	brcs	.+2      	; 0x25f2 <GPIO_readPin+0x1c>
    25f0:	84 c0       	rjmp	.+264    	; 0x26fa <GPIO_readPin+0x124>
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	84 30       	cpi	r24, 0x04	; 4
    25f6:	08 f0       	brcs	.+2      	; 0x25fa <GPIO_readPin+0x24>
    25f8:	80 c0       	rjmp	.+256    	; 0x26fa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	3d 83       	std	Y+5, r19	; 0x05
    2602:	2c 83       	std	Y+4, r18	; 0x04
    2604:	4c 81       	ldd	r20, Y+4	; 0x04
    2606:	5d 81       	ldd	r21, Y+5	; 0x05
    2608:	41 30       	cpi	r20, 0x01	; 1
    260a:	51 05       	cpc	r21, r1
    260c:	79 f1       	breq	.+94     	; 0x266c <GPIO_readPin+0x96>
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	91 05       	cpc	r25, r1
    2616:	34 f4       	brge	.+12     	; 0x2624 <GPIO_readPin+0x4e>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	21 15       	cp	r18, r1
    261e:	31 05       	cpc	r19, r1
    2620:	69 f0       	breq	.+26     	; 0x263c <GPIO_readPin+0x66>
    2622:	6b c0       	rjmp	.+214    	; 0x26fa <GPIO_readPin+0x124>
    2624:	4c 81       	ldd	r20, Y+4	; 0x04
    2626:	5d 81       	ldd	r21, Y+5	; 0x05
    2628:	42 30       	cpi	r20, 0x02	; 2
    262a:	51 05       	cpc	r21, r1
    262c:	b9 f1       	breq	.+110    	; 0x269c <GPIO_readPin+0xc6>
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	83 30       	cpi	r24, 0x03	; 3
    2634:	91 05       	cpc	r25, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <GPIO_readPin+0x64>
    2638:	49 c0       	rjmp	.+146    	; 0x26cc <GPIO_readPin+0xf6>
    263a:	5f c0       	rjmp	.+190    	; 0x26fa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    263c:	e9 e3       	ldi	r30, 0x39	; 57
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a9 01       	movw	r20, r18
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <GPIO_readPin+0x7e>
    2650:	55 95       	asr	r21
    2652:	47 95       	ror	r20
    2654:	8a 95       	dec	r24
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <GPIO_readPin+0x7a>
    2658:	ca 01       	movw	r24, r20
    265a:	81 70       	andi	r24, 0x01	; 1
    265c:	90 70       	andi	r25, 0x00	; 0
    265e:	88 23       	and	r24, r24
    2660:	19 f0       	breq	.+6      	; 0x2668 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	49 c0       	rjmp	.+146    	; 0x26fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	47 c0       	rjmp	.+142    	; 0x26fa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    266c:	e6 e3       	ldi	r30, 0x36	; 54
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a9 01       	movw	r20, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <GPIO_readPin+0xae>
    2680:	55 95       	asr	r21
    2682:	47 95       	ror	r20
    2684:	8a 95       	dec	r24
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <GPIO_readPin+0xaa>
    2688:	ca 01       	movw	r24, r20
    268a:	81 70       	andi	r24, 0x01	; 1
    268c:	90 70       	andi	r25, 0x00	; 0
    268e:	88 23       	and	r24, r24
    2690:	19 f0       	breq	.+6      	; 0x2698 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	31 c0       	rjmp	.+98     	; 0x26fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2698:	19 82       	std	Y+1, r1	; 0x01
    269a:	2f c0       	rjmp	.+94     	; 0x26fa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    269c:	e3 e3       	ldi	r30, 0x33	; 51
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a9 01       	movw	r20, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <GPIO_readPin+0xde>
    26b0:	55 95       	asr	r21
    26b2:	47 95       	ror	r20
    26b4:	8a 95       	dec	r24
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <GPIO_readPin+0xda>
    26b8:	ca 01       	movw	r24, r20
    26ba:	81 70       	andi	r24, 0x01	; 1
    26bc:	90 70       	andi	r25, 0x00	; 0
    26be:	88 23       	and	r24, r24
    26c0:	19 f0       	breq	.+6      	; 0x26c8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	19 c0       	rjmp	.+50     	; 0x26fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26c8:	19 82       	std	Y+1, r1	; 0x01
    26ca:	17 c0       	rjmp	.+46     	; 0x26fa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    26cc:	e0 e3       	ldi	r30, 0x30	; 48
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a9 01       	movw	r20, r18
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <GPIO_readPin+0x10e>
    26e0:	55 95       	asr	r21
    26e2:	47 95       	ror	r20
    26e4:	8a 95       	dec	r24
    26e6:	e2 f7       	brpl	.-8      	; 0x26e0 <GPIO_readPin+0x10a>
    26e8:	ca 01       	movw	r24, r20
    26ea:	81 70       	andi	r24, 0x01	; 1
    26ec:	90 70       	andi	r25, 0x00	; 0
    26ee:	88 23       	and	r24, r24
    26f0:	19 f0       	breq	.+6      	; 0x26f8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <GPIO_setupPortDirection+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <GPIO_setupPortDirection+0x8>
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	90 f5       	brcc	.+100    	; 0x2786 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3c 83       	std	Y+4, r19	; 0x04
    272a:	2b 83       	std	Y+3, r18	; 0x03
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	d1 f0       	breq	.+52     	; 0x276a <GPIO_setupPortDirection+0x5e>
    2736:	2b 81       	ldd	r18, Y+3	; 0x03
    2738:	3c 81       	ldd	r19, Y+4	; 0x04
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	2c f4       	brge	.+10     	; 0x274a <GPIO_setupPortDirection+0x3e>
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <GPIO_setupPortDirection+0x54>
    2748:	1e c0       	rjmp	.+60     	; 0x2786 <GPIO_setupPortDirection+0x7a>
    274a:	2b 81       	ldd	r18, Y+3	; 0x03
    274c:	3c 81       	ldd	r19, Y+4	; 0x04
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	81 f0       	breq	.+32     	; 0x2774 <GPIO_setupPortDirection+0x68>
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	91 05       	cpc	r25, r1
    275c:	81 f0       	breq	.+32     	; 0x277e <GPIO_setupPortDirection+0x72>
    275e:	13 c0       	rjmp	.+38     	; 0x2786 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2760:	ea e3       	ldi	r30, 0x3A	; 58
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	80 83       	st	Z, r24
    2768:	0e c0       	rjmp	.+28     	; 0x2786 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    276a:	e7 e3       	ldi	r30, 0x37	; 55
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	80 83       	st	Z, r24
    2772:	09 c0       	rjmp	.+18     	; 0x2786 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2774:	e4 e3       	ldi	r30, 0x34	; 52
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	80 83       	st	Z, r24
    277c:	04 c0       	rjmp	.+8      	; 0x2786 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    277e:	e1 e3       	ldi	r30, 0x31	; 49
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	80 83       	st	Z, r24
			break;
		}
	}
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <GPIO_writePort+0x6>
    279a:	00 d0       	rcall	.+0      	; 0x279c <GPIO_writePort+0x8>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	90 f5       	brcc	.+100    	; 0x280e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	3c 83       	std	Y+4, r19	; 0x04
    27b2:	2b 83       	std	Y+3, r18	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	91 05       	cpc	r25, r1
    27bc:	d1 f0       	breq	.+52     	; 0x27f2 <GPIO_writePort+0x5e>
    27be:	2b 81       	ldd	r18, Y+3	; 0x03
    27c0:	3c 81       	ldd	r19, Y+4	; 0x04
    27c2:	22 30       	cpi	r18, 0x02	; 2
    27c4:	31 05       	cpc	r19, r1
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <GPIO_writePort+0x3e>
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	61 f0       	breq	.+24     	; 0x27e8 <GPIO_writePort+0x54>
    27d0:	1e c0       	rjmp	.+60     	; 0x280e <GPIO_writePort+0x7a>
    27d2:	2b 81       	ldd	r18, Y+3	; 0x03
    27d4:	3c 81       	ldd	r19, Y+4	; 0x04
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	81 f0       	breq	.+32     	; 0x27fc <GPIO_writePort+0x68>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	83 30       	cpi	r24, 0x03	; 3
    27e2:	91 05       	cpc	r25, r1
    27e4:	81 f0       	breq	.+32     	; 0x2806 <GPIO_writePort+0x72>
    27e6:	13 c0       	rjmp	.+38     	; 0x280e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    27e8:	eb e3       	ldi	r30, 0x3B	; 59
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	80 83       	st	Z, r24
    27f0:	0e c0       	rjmp	.+28     	; 0x280e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    27f2:	e8 e3       	ldi	r30, 0x38	; 56
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	80 83       	st	Z, r24
    27fa:	09 c0       	rjmp	.+18     	; 0x280e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    27fc:	e5 e3       	ldi	r30, 0x35	; 53
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	80 83       	st	Z, r24
    2804:	04 c0       	rjmp	.+8      	; 0x280e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2806:	e2 e3       	ldi	r30, 0x32	; 50
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	80 83       	st	Z, r24
			break;
		}
	}
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <GPIO_readPort+0x6>
    2822:	00 d0       	rcall	.+0      	; 0x2824 <GPIO_readPort+0x8>
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    282a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	84 30       	cpi	r24, 0x04	; 4
    2830:	90 f5       	brcc	.+100    	; 0x2896 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	3c 83       	std	Y+4, r19	; 0x04
    283a:	2b 83       	std	Y+3, r18	; 0x03
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	91 05       	cpc	r25, r1
    2844:	d1 f0       	breq	.+52     	; 0x287a <GPIO_readPort+0x5e>
    2846:	2b 81       	ldd	r18, Y+3	; 0x03
    2848:	3c 81       	ldd	r19, Y+4	; 0x04
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	2c f4       	brge	.+10     	; 0x285a <GPIO_readPort+0x3e>
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	61 f0       	breq	.+24     	; 0x2870 <GPIO_readPort+0x54>
    2858:	1e c0       	rjmp	.+60     	; 0x2896 <GPIO_readPort+0x7a>
    285a:	2b 81       	ldd	r18, Y+3	; 0x03
    285c:	3c 81       	ldd	r19, Y+4	; 0x04
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	81 f0       	breq	.+32     	; 0x2884 <GPIO_readPort+0x68>
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	91 05       	cpc	r25, r1
    286c:	81 f0       	breq	.+32     	; 0x288e <GPIO_readPort+0x72>
    286e:	13 c0       	rjmp	.+38     	; 0x2896 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2870:	e9 e3       	ldi	r30, 0x39	; 57
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	0e c0       	rjmp	.+28     	; 0x2896 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    287a:	e6 e3       	ldi	r30, 0x36	; 54
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	09 c0       	rjmp	.+18     	; 0x2896 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2884:	e3 e3       	ldi	r30, 0x33	; 51
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    288e:	e0 e3       	ldi	r30, 0x30	; 48
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2896:	89 81       	ldd	r24, Y+1	; 0x01
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <KEYPAD_getPressedKey>:
 * Description :
 * Get the Keypad pressed button
 */

uint8 KEYPAD_getPressedKey(void)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <KEYPAD_getPressedKey+0x6>
    28ac:	0f 92       	push	r0
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    28b2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    28b4:	1b 82       	std	Y+3, r1	; 0x03
    28b6:	43 c0       	rjmp	.+134    	; 0x293e <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	0e 94 86 13 	call	0x270c	; 0x270c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	98 2f       	mov	r25, r24
    28c4:	9c 5f       	subi	r25, 0xFC	; 252
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	69 2f       	mov	r22, r25
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 15 11 	call	0x222a	; 0x222a <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 01       	movw	r18, r24
    28d8:	2c 5f       	subi	r18, 0xFC	; 252
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <KEYPAD_getPressedKey+0x40>
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	2a 95       	dec	r18
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <KEYPAD_getPressedKey+0x3c>
    28ea:	80 95       	com	r24
    28ec:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	69 81       	ldd	r22, Y+1	; 0x01
    28f2:	0e 94 ca 13 	call	0x2794	; 0x2794 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    28f6:	1a 82       	std	Y+2, r1	; 0x02
    28f8:	1c c0       	rjmp	.+56     	; 0x2932 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	6a 81       	ldd	r22, Y+2	; 0x02
    28fe:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <GPIO_readPin>
    2902:	88 23       	and	r24, r24
    2904:	99 f4       	brne	.+38     	; 0x292c <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	98 2f       	mov	r25, r24
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	89 0f       	add	r24, r25
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	0e 94 a4 14 	call	0x2948	; 0x2948 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	8a 83       	std	Y+2, r24	; 0x02
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	08 f3       	brcs	.-62     	; 0x28fa <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	84 30       	cpi	r24, 0x04	; 4
    2942:	08 f4       	brcc	.+2      	; 0x2946 <KEYPAD_getPressedKey+0xa0>
    2944:	b9 cf       	rjmp	.-142    	; 0x28b8 <KEYPAD_getPressedKey+0x12>
    2946:	b6 cf       	rjmp	.-148    	; 0x28b4 <KEYPAD_getPressedKey+0xe>

00002948 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <KEYPAD_4x4_adjustKeyNumber+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2956:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	3c 83       	std	Y+4, r19	; 0x04
    2960:	2b 83       	std	Y+3, r18	; 0x03
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	88 30       	cpi	r24, 0x08	; 8
    2968:	91 05       	cpc	r25, r1
    296a:	09 f4       	brne	.+2      	; 0x296e <KEYPAD_4x4_adjustKeyNumber+0x26>
    296c:	70 c0       	rjmp	.+224    	; 0x2a4e <KEYPAD_4x4_adjustKeyNumber+0x106>
    296e:	2b 81       	ldd	r18, Y+3	; 0x03
    2970:	3c 81       	ldd	r19, Y+4	; 0x04
    2972:	29 30       	cpi	r18, 0x09	; 9
    2974:	31 05       	cpc	r19, r1
    2976:	5c f5       	brge	.+86     	; 0x29ce <KEYPAD_4x4_adjustKeyNumber+0x86>
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	91 05       	cpc	r25, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2982:	59 c0       	rjmp	.+178    	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2984:	2b 81       	ldd	r18, Y+3	; 0x03
    2986:	3c 81       	ldd	r19, Y+4	; 0x04
    2988:	25 30       	cpi	r18, 0x05	; 5
    298a:	31 05       	cpc	r19, r1
    298c:	9c f4       	brge	.+38     	; 0x29b4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	82 30       	cpi	r24, 0x02	; 2
    2994:	91 05       	cpc	r25, r1
    2996:	09 f4       	brne	.+2      	; 0x299a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2998:	48 c0       	rjmp	.+144    	; 0x2a2a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    299a:	2b 81       	ldd	r18, Y+3	; 0x03
    299c:	3c 81       	ldd	r19, Y+4	; 0x04
    299e:	23 30       	cpi	r18, 0x03	; 3
    29a0:	31 05       	cpc	r19, r1
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    29a4:	45 c0       	rjmp	.+138    	; 0x2a30 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	91 05       	cpc	r25, r1
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    29b0:	39 c0       	rjmp	.+114    	; 0x2a24 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    29b2:	67 c0       	rjmp	.+206    	; 0x2a82 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    29b4:	2b 81       	ldd	r18, Y+3	; 0x03
    29b6:	3c 81       	ldd	r19, Y+4	; 0x04
    29b8:	26 30       	cpi	r18, 0x06	; 6
    29ba:	31 05       	cpc	r19, r1
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    29be:	41 c0       	rjmp	.+130    	; 0x2a42 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	87 30       	cpi	r24, 0x07	; 7
    29c6:	91 05       	cpc	r25, r1
    29c8:	0c f0       	brlt	.+2      	; 0x29cc <KEYPAD_4x4_adjustKeyNumber+0x84>
    29ca:	3e c0       	rjmp	.+124    	; 0x2a48 <KEYPAD_4x4_adjustKeyNumber+0x100>
    29cc:	37 c0       	rjmp	.+110    	; 0x2a3c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	3c 81       	ldd	r19, Y+4	; 0x04
    29d2:	2c 30       	cpi	r18, 0x0C	; 12
    29d4:	31 05       	cpc	r19, r1
    29d6:	09 f4       	brne	.+2      	; 0x29da <KEYPAD_4x4_adjustKeyNumber+0x92>
    29d8:	46 c0       	rjmp	.+140    	; 0x2a66 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	8d 30       	cpi	r24, 0x0D	; 13
    29e0:	91 05       	cpc	r25, r1
    29e2:	5c f4       	brge	.+22     	; 0x29fa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    29e4:	2b 81       	ldd	r18, Y+3	; 0x03
    29e6:	3c 81       	ldd	r19, Y+4	; 0x04
    29e8:	2a 30       	cpi	r18, 0x0A	; 10
    29ea:	31 05       	cpc	r19, r1
    29ec:	b1 f1       	breq	.+108    	; 0x2a5a <KEYPAD_4x4_adjustKeyNumber+0x112>
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	8b 30       	cpi	r24, 0x0B	; 11
    29f4:	91 05       	cpc	r25, r1
    29f6:	a4 f5       	brge	.+104    	; 0x2a60 <KEYPAD_4x4_adjustKeyNumber+0x118>
    29f8:	2d c0       	rjmp	.+90     	; 0x2a54 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    29fa:	2b 81       	ldd	r18, Y+3	; 0x03
    29fc:	3c 81       	ldd	r19, Y+4	; 0x04
    29fe:	2e 30       	cpi	r18, 0x0E	; 14
    2a00:	31 05       	cpc	r19, r1
    2a02:	b9 f1       	breq	.+110    	; 0x2a72 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	8e 30       	cpi	r24, 0x0E	; 14
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	7c f1       	brlt	.+94     	; 0x2a6c <KEYPAD_4x4_adjustKeyNumber+0x124>
    2a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a10:	3c 81       	ldd	r19, Y+4	; 0x04
    2a12:	2f 30       	cpi	r18, 0x0F	; 15
    2a14:	31 05       	cpc	r19, r1
    2a16:	79 f1       	breq	.+94     	; 0x2a76 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	80 31       	cpi	r24, 0x10	; 16
    2a1e:	91 05       	cpc	r25, r1
    2a20:	69 f1       	breq	.+90     	; 0x2a7c <KEYPAD_4x4_adjustKeyNumber+0x134>
    2a22:	2f c0       	rjmp	.+94     	; 0x2a82 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2a24:	87 e0       	ldi	r24, 0x07	; 7
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	2e c0       	rjmp	.+92     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2a2a:	88 e0       	ldi	r24, 0x08	; 8
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	2b c0       	rjmp	.+86     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2a30:	89 e0       	ldi	r24, 0x09	; 9
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	28 c0       	rjmp	.+80     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2a36:	85 e2       	ldi	r24, 0x25	; 37
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	25 c0       	rjmp	.+74     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	22 c0       	rjmp	.+68     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	1f c0       	rjmp	.+62     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2a48:	86 e0       	ldi	r24, 0x06	; 6
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	1c c0       	rjmp	.+56     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2a4e:	8a e2       	ldi	r24, 0x2A	; 42
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	19 c0       	rjmp	.+50     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	16 c0       	rjmp	.+44     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	13 c0       	rjmp	.+38     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	10 c0       	rjmp	.+32     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2a66:	8d e2       	ldi	r24, 0x2D	; 45
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2a6c:	8d e0       	ldi	r24, 0x0D	; 13
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	0a c0       	rjmp	.+20     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2a72:	19 82       	std	Y+1, r1	; 0x01
    2a74:	08 c0       	rjmp	.+16     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2a76:	8d e3       	ldi	r24, 0x3D	; 61
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	05 c0       	rjmp	.+10     	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2a7c:	8b e2       	ldi	r24, 0x2B	; 43
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	2e 97       	sbiw	r28, 0x0e	; 14
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61

	/* configure the direction of RS/Enable pins as output Pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	0e 94 15 11 	call	0x222a	; 0x222a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID , LCD_E_PIN_ID , PIN_OUTPUT);
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 15 11 	call	0x222a	; 0x222a <GPIO_setupPinDirection>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ac4:	b1 e4       	ldi	r27, 0x41	; 65
    2ac6:	8b 87       	std	Y+11, r24	; 0x0b
    2ac8:	9c 87       	std	Y+12, r25	; 0x0c
    2aca:	ad 87       	std	Y+13, r26	; 0x0d
    2acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a ef       	ldi	r20, 0xFA	; 250
    2adc:	54 e4       	ldi	r21, 0x44	; 68
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8f 83       	std	Y+7, r24	; 0x07
    2ae8:	98 87       	std	Y+8, r25	; 0x08
    2aea:	a9 87       	std	Y+9, r26	; 0x09
    2aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aee:	6f 81       	ldd	r22, Y+7	; 0x07
    2af0:	78 85       	ldd	r23, Y+8	; 0x08
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <LCD_init+0x7a>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2b10:	6f 81       	ldd	r22, Y+7	; 0x07
    2b12:	78 85       	ldd	r23, Y+8	; 0x08
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <LCD_init+0xda>
    2b52:	88 ec       	ldi	r24, 0xC8	; 200
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9c 83       	std	Y+4, r25	; 0x04
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <LCD_init+0xc8>
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <LCD_init+0xbc>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7c:	78 85       	ldd	r23, Y+8	; 0x08
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_init+0x104>
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* configure the direction of Port of Data as output Port*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID , PORT_OUTPUT);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	6f ef       	ldi	r22, 0xFF	; 255
    2ba6:	0e 94 86 13 	call	0x270c	; 0x270c <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* 2-lines LCD + 8-bit data mode */
    2baa:	88 e3       	ldi	r24, 0x38	; 56
    2bac:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor OFF */
    2bb0:	8c e0       	ldi	r24, 0x0C	; 12
    2bb2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear screen at the beginning */
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_sendCommand>
}
    2bbc:	2e 96       	adiw	r28, 0x0e	; 14
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 Command){
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	e9 97       	sbiw	r28, 0x39	; 57
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_LOW); /* Command Mode RS=0 */
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a0 e8       	ldi	r26, 0x80	; 128
    2bf4:	bf e3       	ldi	r27, 0x3F	; 63
    2bf6:	8d ab       	std	Y+53, r24	; 0x35
    2bf8:	9e ab       	std	Y+54, r25	; 0x36
    2bfa:	af ab       	std	Y+55, r26	; 0x37
    2bfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	6d a9       	ldd	r22, Y+53	; 0x35
    2c00:	7e a9       	ldd	r23, Y+54	; 0x36
    2c02:	8f a9       	ldd	r24, Y+55	; 0x37
    2c04:	98 ad       	ldd	r25, Y+56	; 0x38
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a ef       	ldi	r20, 0xFA	; 250
    2c0c:	54 e4       	ldi	r21, 0x44	; 68
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	89 ab       	std	Y+49, r24	; 0x31
    2c18:	9a ab       	std	Y+50, r25	; 0x32
    2c1a:	ab ab       	std	Y+51, r26	; 0x33
    2c1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c20:	7a a9       	ldd	r23, Y+50	; 0x32
    2c22:	8b a9       	ldd	r24, Y+51	; 0x33
    2c24:	9c a9       	ldd	r25, Y+52	; 0x34
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <LCD_sendCommand+0x72>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	98 ab       	std	Y+48, r25	; 0x30
    2c3c:	8f a7       	std	Y+47, r24	; 0x2f
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2c40:	69 a9       	ldd	r22, Y+49	; 0x31
    2c42:	7a a9       	ldd	r23, Y+50	; 0x32
    2c44:	8b a9       	ldd	r24, Y+51	; 0x33
    2c46:	9c a9       	ldd	r25, Y+52	; 0x34
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	6d a9       	ldd	r22, Y+53	; 0x35
    2c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	98 ab       	std	Y+48, r25	; 0x30
    2c7e:	8f a7       	std	Y+47, r24	; 0x2f
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <LCD_sendCommand+0xd2>
    2c82:	88 ec       	ldi	r24, 0xC8	; 200
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e a7       	std	Y+46, r25	; 0x2e
    2c88:	8d a7       	std	Y+45, r24	; 0x2d
    2c8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_sendCommand+0xc0>
    2c92:	9e a7       	std	Y+46, r25	; 0x2e
    2c94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c98:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	98 ab       	std	Y+48, r25	; 0x30
    2c9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <LCD_sendCommand+0xb4>
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	69 a9       	ldd	r22, Y+49	; 0x31
    2cac:	7a a9       	ldd	r23, Y+50	; 0x32
    2cae:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	98 ab       	std	Y+48, r25	; 0x30
    2cbc:	8f a7       	std	Y+47, r24	; 0x2f
    2cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc2:	9c a7       	std	Y+44, r25	; 0x2c
    2cc4:	8b a7       	std	Y+43, r24	; 0x2b
    2cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <LCD_sendCommand+0xfc>
    2cce:	9c a7       	std	Y+44, r25	; 0x2c
    2cd0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH); /* Enable LCD E=1 */
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e8       	ldi	r26, 0x80	; 128
    2ce2:	bf e3       	ldi	r27, 0x3F	; 63
    2ce4:	8f a3       	std	Y+39, r24	; 0x27
    2ce6:	98 a7       	std	Y+40, r25	; 0x28
    2ce8:	a9 a7       	std	Y+41, r26	; 0x29
    2cea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6f a1       	ldd	r22, Y+39	; 0x27
    2cee:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8b a3       	std	Y+35, r24	; 0x23
    2d06:	9c a3       	std	Y+36, r25	; 0x24
    2d08:	ad a3       	std	Y+37, r26	; 0x25
    2d0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d10:	8d a1       	ldd	r24, Y+37	; 0x25
    2d12:	9e a1       	ldd	r25, Y+38	; 0x26
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_sendCommand+0x160>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9a a3       	std	Y+34, r25	; 0x22
    2d2a:	89 a3       	std	Y+33, r24	; 0x21
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d30:	7c a1       	ldd	r23, Y+36	; 0x24
    2d32:	8d a1       	ldd	r24, Y+37	; 0x25
    2d34:	9e a1       	ldd	r25, Y+38	; 0x26
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6f a1       	ldd	r22, Y+39	; 0x27
    2d48:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9a a3       	std	Y+34, r25	; 0x22
    2d6c:	89 a3       	std	Y+33, r24	; 0x21
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_sendCommand+0x1c0>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	98 a3       	std	Y+32, r25	; 0x20
    2d76:	8f 8f       	std	Y+31, r24	; 0x1f
    2d78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_sendCommand+0x1ae>
    2d80:	98 a3       	std	Y+32, r25	; 0x20
    2d82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	89 a1       	ldd	r24, Y+33	; 0x21
    2d86:	9a a1       	ldd	r25, Y+34	; 0x22
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d90:	9a a1       	ldd	r25, Y+34	; 0x22
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_sendCommand+0x1a2>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9a a3       	std	Y+34, r25	; 0x22
    2daa:	89 a3       	std	Y+33, r24	; 0x21
    2dac:	89 a1       	ldd	r24, Y+33	; 0x21
    2dae:	9a a1       	ldd	r25, Y+34	; 0x22
    2db0:	9e 8f       	std	Y+30, r25	; 0x1e
    2db2:	8d 8f       	std	Y+29, r24	; 0x1d
    2db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_sendCommand+0x1ea>
    2dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dbe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID , Command); /* Send Command to PORTC */
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	69 ad       	ldd	r22, Y+57	; 0x39
    2dc4:	0e 94 ca 13 	call	0x2794	; 0x2794 <GPIO_writePort>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a0 e8       	ldi	r26, 0x80	; 128
    2dce:	bf e3       	ldi	r27, 0x3F	; 63
    2dd0:	89 8f       	std	Y+25, r24	; 0x19
    2dd2:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd4:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a ef       	ldi	r20, 0xFA	; 250
    2de6:	54 e4       	ldi	r21, 0x44	; 68
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8d 8b       	std	Y+21, r24	; 0x15
    2df2:	9e 8b       	std	Y+22, r25	; 0x16
    2df4:	af 8b       	std	Y+23, r26	; 0x17
    2df6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e20:	98 8d       	ldd	r25, Y+24	; 0x18
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	69 8d       	ldd	r22, Y+25	; 0x19
    2e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9c 8b       	std	Y+20, r25	; 0x14
    2e58:	8b 8b       	std	Y+19, r24	; 0x13
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <LCD_sendCommand+0x2ac>
    2e5c:	88 ec       	ldi	r24, 0xC8	; 200
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9a 8b       	std	Y+18, r25	; 0x12
    2e62:	89 8b       	std	Y+17, r24	; 0x11
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <LCD_sendCommand+0x29a>
    2e6c:	9a 8b       	std	Y+18, r25	; 0x12
    2e6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8b 89       	ldd	r24, Y+19	; 0x13
    2e72:	9c 89       	ldd	r25, Y+20	; 0x14
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <LCD_sendCommand+0x28e>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9c 8b       	std	Y+20, r25	; 0x14
    2e96:	8b 8b       	std	Y+19, r24	; 0x13
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	98 8b       	std	Y+16, r25	; 0x10
    2e9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea2:	98 89       	ldd	r25, Y+16	; 0x10
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <LCD_sendCommand+0x2d6>
    2ea8:	98 8b       	std	Y+16, r25	; 0x10
    2eaa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW); /* Disable LCD E=0 */
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e8       	ldi	r26, 0x80	; 128
    2ebc:	bf e3       	ldi	r27, 0x3F	; 63
    2ebe:	8b 87       	std	Y+11, r24	; 0x0b
    2ec0:	9c 87       	std	Y+12, r25	; 0x0c
    2ec2:	ad 87       	std	Y+13, r26	; 0x0d
    2ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a ef       	ldi	r20, 0xFA	; 250
    2ed4:	54 e4       	ldi	r21, 0x44	; 68
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8f 83       	std	Y+7, r24	; 0x07
    2ee0:	98 87       	std	Y+8, r25	; 0x08
    2ee2:	a9 87       	std	Y+9, r26	; 0x09
    2ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee8:	78 85       	ldd	r23, Y+8	; 0x08
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9e 83       	std	Y+6, r25	; 0x06
    2f46:	8d 83       	std	Y+5, r24	; 0x05
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <LCD_sendCommand+0x39a>
    2f4a:	88 ec       	ldi	r24, 0xC8	; 200
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9c 83       	std	Y+4, r25	; 0x04
    2f50:	8b 83       	std	Y+3, r24	; 0x03
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_sendCommand+0x388>
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f60:	9e 81       	ldd	r25, Y+6	; 0x06
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <LCD_sendCommand+0x37c>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	6f 81       	ldd	r22, Y+7	; 0x07
    2f74:	78 85       	ldd	r23, Y+8	; 0x08
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_sendCommand+0x3c4>
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    2f9a:	e9 96       	adiw	r28, 0x39	; 57
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 character){
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	e9 97       	sbiw	r28, 0x39	; 57
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_HIGH); /* Data Mode RS=1 */
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	61 e0       	ldi	r22, 0x01	; 1
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	a0 e8       	ldi	r26, 0x80	; 128
    2fd2:	bf e3       	ldi	r27, 0x3F	; 63
    2fd4:	8d ab       	std	Y+53, r24	; 0x35
    2fd6:	9e ab       	std	Y+54, r25	; 0x36
    2fd8:	af ab       	std	Y+55, r26	; 0x37
    2fda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fdc:	6d a9       	ldd	r22, Y+53	; 0x35
    2fde:	7e a9       	ldd	r23, Y+54	; 0x36
    2fe0:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe2:	98 ad       	ldd	r25, Y+56	; 0x38
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	4a ef       	ldi	r20, 0xFA	; 250
    2fea:	54 e4       	ldi	r21, 0x44	; 68
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	89 ab       	std	Y+49, r24	; 0x31
    2ff6:	9a ab       	std	Y+50, r25	; 0x32
    2ff8:	ab ab       	std	Y+51, r26	; 0x33
    2ffa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    3000:	8b a9       	ldd	r24, Y+51	; 0x33
    3002:	9c a9       	ldd	r25, Y+52	; 0x34
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e8       	ldi	r20, 0x80	; 128
    300a:	5f e3       	ldi	r21, 0x3F	; 63
    300c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3010:	88 23       	and	r24, r24
    3012:	2c f4       	brge	.+10     	; 0x301e <LCD_displayCharacter+0x72>
		__ticks = 1;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	98 ab       	std	Y+48, r25	; 0x30
    301a:	8f a7       	std	Y+47, r24	; 0x2f
    301c:	3f c0       	rjmp	.+126    	; 0x309c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    301e:	69 a9       	ldd	r22, Y+49	; 0x31
    3020:	7a a9       	ldd	r23, Y+50	; 0x32
    3022:	8b a9       	ldd	r24, Y+51	; 0x33
    3024:	9c a9       	ldd	r25, Y+52	; 0x34
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	3f ef       	ldi	r19, 0xFF	; 255
    302a:	4f e7       	ldi	r20, 0x7F	; 127
    302c:	57 e4       	ldi	r21, 0x47	; 71
    302e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3032:	18 16       	cp	r1, r24
    3034:	4c f5       	brge	.+82     	; 0x3088 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3036:	6d a9       	ldd	r22, Y+53	; 0x35
    3038:	7e a9       	ldd	r23, Y+54	; 0x36
    303a:	8f a9       	ldd	r24, Y+55	; 0x37
    303c:	98 ad       	ldd	r25, Y+56	; 0x38
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e2       	ldi	r20, 0x20	; 32
    3044:	51 e4       	ldi	r21, 0x41	; 65
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	bc 01       	movw	r22, r24
    3050:	cd 01       	movw	r24, r26
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	98 ab       	std	Y+48, r25	; 0x30
    305c:	8f a7       	std	Y+47, r24	; 0x2f
    305e:	0f c0       	rjmp	.+30     	; 0x307e <LCD_displayCharacter+0xd2>
    3060:	88 ec       	ldi	r24, 0xC8	; 200
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9e a7       	std	Y+46, r25	; 0x2e
    3066:	8d a7       	std	Y+45, r24	; 0x2d
    3068:	8d a5       	ldd	r24, Y+45	; 0x2d
    306a:	9e a5       	ldd	r25, Y+46	; 0x2e
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <LCD_displayCharacter+0xc0>
    3070:	9e a7       	std	Y+46, r25	; 0x2e
    3072:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3074:	8f a5       	ldd	r24, Y+47	; 0x2f
    3076:	98 a9       	ldd	r25, Y+48	; 0x30
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	98 ab       	std	Y+48, r25	; 0x30
    307c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3080:	98 a9       	ldd	r25, Y+48	; 0x30
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	69 f7       	brne	.-38     	; 0x3060 <LCD_displayCharacter+0xb4>
    3086:	14 c0       	rjmp	.+40     	; 0x30b0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3088:	69 a9       	ldd	r22, Y+49	; 0x31
    308a:	7a a9       	ldd	r23, Y+50	; 0x32
    308c:	8b a9       	ldd	r24, Y+51	; 0x33
    308e:	9c a9       	ldd	r25, Y+52	; 0x34
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	9c a7       	std	Y+44, r25	; 0x2c
    30a2:	8b a7       	std	Y+43, r24	; 0x2b
    30a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    30a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <LCD_displayCharacter+0xfc>
    30ac:	9c a7       	std	Y+44, r25	; 0x2c
    30ae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH); /* Enable LCD E=1 */
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a0 e8       	ldi	r26, 0x80	; 128
    30c0:	bf e3       	ldi	r27, 0x3F	; 63
    30c2:	8f a3       	std	Y+39, r24	; 0x27
    30c4:	98 a7       	std	Y+40, r25	; 0x28
    30c6:	a9 a7       	std	Y+41, r26	; 0x29
    30c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ca:	6f a1       	ldd	r22, Y+39	; 0x27
    30cc:	78 a5       	ldd	r23, Y+40	; 0x28
    30ce:	89 a5       	ldd	r24, Y+41	; 0x29
    30d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	4a ef       	ldi	r20, 0xFA	; 250
    30d8:	54 e4       	ldi	r21, 0x44	; 68
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8b a3       	std	Y+35, r24	; 0x23
    30e4:	9c a3       	std	Y+36, r25	; 0x24
    30e6:	ad a3       	std	Y+37, r26	; 0x25
    30e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ea:	6b a1       	ldd	r22, Y+35	; 0x23
    30ec:	7c a1       	ldd	r23, Y+36	; 0x24
    30ee:	8d a1       	ldd	r24, Y+37	; 0x25
    30f0:	9e a1       	ldd	r25, Y+38	; 0x26
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e8       	ldi	r20, 0x80	; 128
    30f8:	5f e3       	ldi	r21, 0x3F	; 63
    30fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fe:	88 23       	and	r24, r24
    3100:	2c f4       	brge	.+10     	; 0x310c <LCD_displayCharacter+0x160>
		__ticks = 1;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	9a a3       	std	Y+34, r25	; 0x22
    3108:	89 a3       	std	Y+33, r24	; 0x21
    310a:	3f c0       	rjmp	.+126    	; 0x318a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    310c:	6b a1       	ldd	r22, Y+35	; 0x23
    310e:	7c a1       	ldd	r23, Y+36	; 0x24
    3110:	8d a1       	ldd	r24, Y+37	; 0x25
    3112:	9e a1       	ldd	r25, Y+38	; 0x26
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	3f ef       	ldi	r19, 0xFF	; 255
    3118:	4f e7       	ldi	r20, 0x7F	; 127
    311a:	57 e4       	ldi	r21, 0x47	; 71
    311c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3120:	18 16       	cp	r1, r24
    3122:	4c f5       	brge	.+82     	; 0x3176 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3124:	6f a1       	ldd	r22, Y+39	; 0x27
    3126:	78 a5       	ldd	r23, Y+40	; 0x28
    3128:	89 a5       	ldd	r24, Y+41	; 0x29
    312a:	9a a5       	ldd	r25, Y+42	; 0x2a
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e2       	ldi	r20, 0x20	; 32
    3132:	51 e4       	ldi	r21, 0x41	; 65
    3134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	bc 01       	movw	r22, r24
    313e:	cd 01       	movw	r24, r26
    3140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9a a3       	std	Y+34, r25	; 0x22
    314a:	89 a3       	std	Y+33, r24	; 0x21
    314c:	0f c0       	rjmp	.+30     	; 0x316c <LCD_displayCharacter+0x1c0>
    314e:	88 ec       	ldi	r24, 0xC8	; 200
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	98 a3       	std	Y+32, r25	; 0x20
    3154:	8f 8f       	std	Y+31, r24	; 0x1f
    3156:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3158:	98 a1       	ldd	r25, Y+32	; 0x20
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <LCD_displayCharacter+0x1ae>
    315e:	98 a3       	std	Y+32, r25	; 0x20
    3160:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3162:	89 a1       	ldd	r24, Y+33	; 0x21
    3164:	9a a1       	ldd	r25, Y+34	; 0x22
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	9a a3       	std	Y+34, r25	; 0x22
    316a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316c:	89 a1       	ldd	r24, Y+33	; 0x21
    316e:	9a a1       	ldd	r25, Y+34	; 0x22
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	69 f7       	brne	.-38     	; 0x314e <LCD_displayCharacter+0x1a2>
    3174:	14 c0       	rjmp	.+40     	; 0x319e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3176:	6b a1       	ldd	r22, Y+35	; 0x23
    3178:	7c a1       	ldd	r23, Y+36	; 0x24
    317a:	8d a1       	ldd	r24, Y+37	; 0x25
    317c:	9e a1       	ldd	r25, Y+38	; 0x26
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	9a a3       	std	Y+34, r25	; 0x22
    3188:	89 a3       	std	Y+33, r24	; 0x21
    318a:	89 a1       	ldd	r24, Y+33	; 0x21
    318c:	9a a1       	ldd	r25, Y+34	; 0x22
    318e:	9e 8f       	std	Y+30, r25	; 0x1e
    3190:	8d 8f       	std	Y+29, r24	; 0x1d
    3192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3194:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <LCD_displayCharacter+0x1ea>
    319a:	9e 8f       	std	Y+30, r25	; 0x1e
    319c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID , character); /* Send Command to PORTC */
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	69 ad       	ldd	r22, Y+57	; 0x39
    31a2:	0e 94 ca 13 	call	0x2794	; 0x2794 <GPIO_writePort>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e8       	ldi	r26, 0x80	; 128
    31ac:	bf e3       	ldi	r27, 0x3F	; 63
    31ae:	89 8f       	std	Y+25, r24	; 0x19
    31b0:	9a 8f       	std	Y+26, r25	; 0x1a
    31b2:	ab 8f       	std	Y+27, r26	; 0x1b
    31b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	69 8d       	ldd	r22, Y+25	; 0x19
    31b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8d 8b       	std	Y+21, r24	; 0x15
    31d0:	9e 8b       	std	Y+22, r25	; 0x16
    31d2:	af 8b       	std	Y+23, r26	; 0x17
    31d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31d6:	6d 89       	ldd	r22, Y+21	; 0x15
    31d8:	7e 89       	ldd	r23, Y+22	; 0x16
    31da:	8f 89       	ldd	r24, Y+23	; 0x17
    31dc:	98 8d       	ldd	r25, Y+24	; 0x18
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9c 8b       	std	Y+20, r25	; 0x14
    31f4:	8b 8b       	std	Y+19, r24	; 0x13
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    31f8:	6d 89       	ldd	r22, Y+21	; 0x15
    31fa:	7e 89       	ldd	r23, Y+22	; 0x16
    31fc:	8f 89       	ldd	r24, Y+23	; 0x17
    31fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	69 8d       	ldd	r22, Y+25	; 0x19
    3212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <LCD_displayCharacter+0x2ac>
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
    3242:	89 89       	ldd	r24, Y+17	; 0x11
    3244:	9a 89       	ldd	r25, Y+18	; 0x12
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <LCD_displayCharacter+0x29a>
    324a:	9a 8b       	std	Y+18, r25	; 0x12
    324c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9c 8b       	std	Y+20, r25	; 0x14
    3256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8b 89       	ldd	r24, Y+19	; 0x13
    325a:	9c 89       	ldd	r25, Y+20	; 0x14
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <LCD_displayCharacter+0x28e>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6d 89       	ldd	r22, Y+21	; 0x15
    3264:	7e 89       	ldd	r23, Y+22	; 0x16
    3266:	8f 89       	ldd	r24, Y+23	; 0x17
    3268:	98 8d       	ldd	r25, Y+24	; 0x18
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f
    327e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3280:	98 89       	ldd	r25, Y+16	; 0x10
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_displayCharacter+0x2d6>
    3286:	98 8b       	std	Y+16, r25	; 0x10
    3288:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW); /* Disable LCD E=0 */
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	0e 94 00 12 	call	0x2400	; 0x2400 <GPIO_writePin>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a0 e8       	ldi	r26, 0x80	; 128
    329a:	bf e3       	ldi	r27, 0x3F	; 63
    329c:	8b 87       	std	Y+11, r24	; 0x0b
    329e:	9c 87       	std	Y+12, r25	; 0x0c
    32a0:	ad 87       	std	Y+13, r26	; 0x0d
    32a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4a ef       	ldi	r20, 0xFA	; 250
    32b2:	54 e4       	ldi	r21, 0x44	; 68
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	8f 83       	std	Y+7, r24	; 0x07
    32be:	98 87       	std	Y+8, r25	; 0x08
    32c0:	a9 87       	std	Y+9, r26	; 0x09
    32c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	2c f4       	brge	.+10     	; 0x32e6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9e 83       	std	Y+6, r25	; 0x06
    32e2:	8d 83       	std	Y+5, r24	; 0x05
    32e4:	3f c0       	rjmp	.+126    	; 0x3364 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	3f ef       	ldi	r19, 0xFF	; 255
    32f2:	4f e7       	ldi	r20, 0x7F	; 127
    32f4:	57 e4       	ldi	r21, 0x47	; 71
    32f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32fa:	18 16       	cp	r1, r24
    32fc:	4c f5       	brge	.+82     	; 0x3350 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3300:	7c 85       	ldd	r23, Y+12	; 0x0c
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	0f c0       	rjmp	.+30     	; 0x3346 <LCD_displayCharacter+0x39a>
    3328:	88 ec       	ldi	r24, 0xC8	; 200
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <LCD_displayCharacter+0x388>
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	69 f7       	brne	.-38     	; 0x3328 <LCD_displayCharacter+0x37c>
    334e:	14 c0       	rjmp	.+40     	; 0x3378 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <LCD_displayCharacter+0x3c4>
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    3378:	e9 96       	adiw	r28, 0x39	; 57
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char* string){
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <LCD_displayString+0x6>
    3390:	0f 92       	push	r0
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	9b 83       	std	Y+3, r25	; 0x03
    3398:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    339a:	19 82       	std	Y+1, r1	; 0x01
    339c:	0e c0       	rjmp	.+28     	; 0x33ba <LCD_displayString+0x30>
	while(string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	fc 01       	movw	r30, r24
    33aa:	e2 0f       	add	r30, r18
    33ac:	f3 1f       	adc	r31, r19
    33ae:	80 81       	ld	r24, Z
    33b0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LCD_displayCharacter>
		i++;
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	8f 5f       	subi	r24, 0xFF	; 255
    33b8:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char* string){
	uint8 i = 0;
	while(string[i] != '\0')
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	fc 01       	movw	r30, r24
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	80 81       	ld	r24, Z
    33cc:	88 23       	and	r24, r24
    33ce:	39 f7       	brne	.-50     	; 0x339e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
		i++;
	}
}
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row , uint8 col){
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <LCD_moveCursor+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <LCD_moveCursor+0x8>
    33e4:	0f 92       	push	r0
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	8a 83       	std	Y+2, r24	; 0x02
    33ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_adress ;
	switch(row){
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	3d 83       	std	Y+5, r19	; 0x05
    33f6:	2c 83       	std	Y+4, r18	; 0x04
    33f8:	8c 81       	ldd	r24, Y+4	; 0x04
    33fa:	9d 81       	ldd	r25, Y+5	; 0x05
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	91 05       	cpc	r25, r1
    3400:	c1 f0       	breq	.+48     	; 0x3432 <LCD_moveCursor+0x56>
    3402:	2c 81       	ldd	r18, Y+4	; 0x04
    3404:	3d 81       	ldd	r19, Y+5	; 0x05
    3406:	22 30       	cpi	r18, 0x02	; 2
    3408:	31 05       	cpc	r19, r1
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_moveCursor+0x3a>
    340c:	8c 81       	ldd	r24, Y+4	; 0x04
    340e:	9d 81       	ldd	r25, Y+5	; 0x05
    3410:	00 97       	sbiw	r24, 0x00	; 0
    3412:	61 f0       	breq	.+24     	; 0x342c <LCD_moveCursor+0x50>
    3414:	19 c0       	rjmp	.+50     	; 0x3448 <LCD_moveCursor+0x6c>
    3416:	2c 81       	ldd	r18, Y+4	; 0x04
    3418:	3d 81       	ldd	r19, Y+5	; 0x05
    341a:	22 30       	cpi	r18, 0x02	; 2
    341c:	31 05       	cpc	r19, r1
    341e:	69 f0       	breq	.+26     	; 0x343a <LCD_moveCursor+0x5e>
    3420:	8c 81       	ldd	r24, Y+4	; 0x04
    3422:	9d 81       	ldd	r25, Y+5	; 0x05
    3424:	83 30       	cpi	r24, 0x03	; 3
    3426:	91 05       	cpc	r25, r1
    3428:	61 f0       	breq	.+24     	; 0x3442 <LCD_moveCursor+0x66>
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <LCD_moveCursor+0x6c>
	case 0:
		LCD_adress = col;
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	0b c0       	rjmp	.+22     	; 0x3448 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_adress = col + 0x40;
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	80 5c       	subi	r24, 0xC0	; 192
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	07 c0       	rjmp	.+14     	; 0x3448 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_adress = col + 0x10;
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	80 5f       	subi	r24, 0xF0	; 240
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	03 c0       	rjmp	.+6      	; 0x3448 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_adress = col + 0x50;
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	80 5b       	subi	r24, 0xB0	; 176
    3446:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_adress | LCD_SET_CURSOR_LOCATION);
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	80 68       	ori	r24, 0x80	; 128
    344c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_sendCommand>
}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <LCD_displayStringRowCol>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowCol(uint8 row, uint8 col , const char* string){
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	00 d0       	rcall	.+0      	; 0x3466 <LCD_displayStringRowCol+0x6>
    3466:	00 d0       	rcall	.+0      	; 0x3468 <LCD_displayStringRowCol+0x8>
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	6a 83       	std	Y+2, r22	; 0x02
    3470:	5c 83       	std	Y+4, r21	; 0x04
    3472:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	6a 81       	ldd	r22, Y+2	; 0x02
    3478:	0e 94 ee 19 	call	0x33dc	; 0x33dc <LCD_moveCursor>
	LCD_displayString(string);
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	08 95       	ret

00003492 <LCD_integerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data){
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	62 97       	sbiw	r28, 0x12	; 18
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	9a 8b       	std	Y+18, r25	; 0x12
    34a8:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]; /* Contains ASCII Codes of Numbers, Declared as 16 location---> NUM of COL 16 */
	itoa(data,buffer,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    34aa:	89 89       	ldd	r24, Y+17	; 0x11
    34ac:	9a 89       	ldd	r25, Y+18	; 0x12
    34ae:	9e 01       	movw	r18, r28
    34b0:	2f 5f       	subi	r18, 0xFF	; 255
    34b2:	3f 4f       	sbci	r19, 0xFF	; 255
    34b4:	b9 01       	movw	r22, r18
    34b6:	4a e0       	ldi	r20, 0x0A	; 10
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <itoa>
	LCD_displayString(buffer); /* Display the string */
    34be:	ce 01       	movw	r24, r28
    34c0:	01 96       	adiw	r24, 0x01	; 1
    34c2:	0e 94 c5 19 	call	0x338a	; 0x338a <LCD_displayString>
}
    34c6:	62 96       	adiw	r28, 0x12	; 18
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_sendCommand>
}
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <__vector_7>:
 *******************************************************************************/


/* Timer 1 Compare Mode Interrupt ISR */
ISR(TIMER1_COMPA_vect)
{
    34ec:	1f 92       	push	r1
    34ee:	0f 92       	push	r0
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	0f 92       	push	r0
    34f4:	11 24       	eor	r1, r1
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	5f 93       	push	r21
    34fe:	6f 93       	push	r22
    3500:	7f 93       	push	r23
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	af 93       	push	r26
    3508:	bf 93       	push	r27
    350a:	ef 93       	push	r30
    350c:	ff 93       	push	r31
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
	/*Increment the ticks of the program*/
	if(g_callBackPtr != NULL_PTR){
    3516:	80 91 2c 01 	lds	r24, 0x012C
    351a:	90 91 2d 01 	lds	r25, 0x012D
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	29 f0       	breq	.+10     	; 0x352c <__vector_7+0x40>
		(*g_callBackPtr)();
    3522:	e0 91 2c 01 	lds	r30, 0x012C
    3526:	f0 91 2d 01 	lds	r31, 0x012D
    352a:	09 95       	icall
	}
}
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	ff 91       	pop	r31
    3532:	ef 91       	pop	r30
    3534:	bf 91       	pop	r27
    3536:	af 91       	pop	r26
    3538:	9f 91       	pop	r25
    353a:	8f 91       	pop	r24
    353c:	7f 91       	pop	r23
    353e:	6f 91       	pop	r22
    3540:	5f 91       	pop	r21
    3542:	4f 91       	pop	r20
    3544:	3f 91       	pop	r19
    3546:	2f 91       	pop	r18
    3548:	0f 90       	pop	r0
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	0f 90       	pop	r0
    354e:	1f 90       	pop	r1
    3550:	18 95       	reti

00003552 <__vector_9>:


/* Timer 1 Normal Mode Interrupt ISR */
ISR(TIMER1_OVF_vect)
{
    3552:	1f 92       	push	r1
    3554:	0f 92       	push	r0
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	0f 92       	push	r0
    355a:	11 24       	eor	r1, r1
    355c:	2f 93       	push	r18
    355e:	3f 93       	push	r19
    3560:	4f 93       	push	r20
    3562:	5f 93       	push	r21
    3564:	6f 93       	push	r22
    3566:	7f 93       	push	r23
    3568:	8f 93       	push	r24
    356a:	9f 93       	push	r25
    356c:	af 93       	push	r26
    356e:	bf 93       	push	r27
    3570:	ef 93       	push	r30
    3572:	ff 93       	push	r31
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62

	/*Increment the ticks of the program*/
	(*g_callBackPtr)();
    357c:	e0 91 2c 01 	lds	r30, 0x012C
    3580:	f0 91 2d 01 	lds	r31, 0x012D
    3584:	09 95       	icall

}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	ff 91       	pop	r31
    358c:	ef 91       	pop	r30
    358e:	bf 91       	pop	r27
    3590:	af 91       	pop	r26
    3592:	9f 91       	pop	r25
    3594:	8f 91       	pop	r24
    3596:	7f 91       	pop	r23
    3598:	6f 91       	pop	r22
    359a:	5f 91       	pop	r21
    359c:	4f 91       	pop	r20
    359e:	3f 91       	pop	r19
    35a0:	2f 91       	pop	r18
    35a2:	0f 90       	pop	r0
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	0f 90       	pop	r0
    35a8:	1f 90       	pop	r1
    35aa:	18 95       	reti

000035ac <Timer1_init>:


/*	Timer 1 Initialization Function	*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <Timer1_init+0x6>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	9a 83       	std	Y+2, r25	; 0x02
    35b8:	89 83       	std	Y+1, r24	; 0x01
	/* initial value from the configuration pointer*/
	TCNT1=Config_Ptr->initial_value;
    35ba:	ac e4       	ldi	r26, 0x4C	; 76
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	11 96       	adiw	r26, 0x01	; 1
    35c8:	9c 93       	st	X, r25
    35ca:	8e 93       	st	-X, r24


	if(Config_Ptr->mode==COMPARE)
    35cc:	e9 81       	ldd	r30, Y+1	; 0x01
    35ce:	fa 81       	ldd	r31, Y+2	; 0x02
    35d0:	85 81       	ldd	r24, Z+5	; 0x05
    35d2:	84 30       	cpi	r24, 0x04	; 4
    35d4:	51 f4       	brne	.+20     	; 0x35ea <Timer1_init+0x3e>
	{
		/*	if the mode is compare mode, then put the compare value to one
		 *  coming form the configuration pointer */
		OCR1A=Config_Ptr->compare_value;
    35d6:	ea e4       	ldi	r30, 0x4A	; 74
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	a9 81       	ldd	r26, Y+1	; 0x01
    35dc:	ba 81       	ldd	r27, Y+2	; 0x02
    35de:	12 96       	adiw	r26, 0x02	; 2
    35e0:	8d 91       	ld	r24, X+
    35e2:	9c 91       	ld	r25, X
    35e4:	13 97       	sbiw	r26, 0x03	; 3
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
	}

	/*	Module (Timer 1) Interrupt enable	*/
	TIMSK |= (1<<OCIE1A);
    35ea:	a9 e5       	ldi	r26, 0x59	; 89
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e9 e5       	ldi	r30, 0x59	; 89
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	80 61       	ori	r24, 0x10	; 16
    35f6:	8c 93       	st	X, r24

	/*	select mode */
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
    35f8:	af e4       	ldi	r26, 0x4F	; 79
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	ef e4       	ldi	r30, 0x4F	; 79
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	98 2f       	mov	r25, r24
    3604:	9c 7f       	andi	r25, 0xFC	; 252
    3606:	e9 81       	ldd	r30, Y+1	; 0x01
    3608:	fa 81       	ldd	r31, Y+2	; 0x02
    360a:	85 81       	ldd	r24, Z+5	; 0x05
    360c:	83 70       	andi	r24, 0x03	; 3
    360e:	89 2b       	or	r24, r25
    3610:	88 60       	ori	r24, 0x08	; 8
    3612:	8c 93       	st	X, r24

	/* WGM12:
	 * NORMAL = 0
	 * COMPARE =1
	 * */
	TCCR1B = ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07)) | ((TCCR1B & 0xE7) |
    3614:	ae e4       	ldi	r26, 0x4E	; 78
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	ee e4       	ldi	r30, 0x4E	; 78
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	98 2f       	mov	r25, r24
    3620:	98 7f       	andi	r25, 0xF8	; 248
    3622:	e9 81       	ldd	r30, Y+1	; 0x01
    3624:	fa 81       	ldd	r31, Y+2	; 0x02
    3626:	84 81       	ldd	r24, Z+4	; 0x04
    3628:	87 70       	andi	r24, 0x07	; 7
    362a:	39 2f       	mov	r19, r25
    362c:	38 2b       	or	r19, r24
    362e:	ee e4       	ldi	r30, 0x4E	; 78
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	28 2f       	mov	r18, r24
    3636:	27 7e       	andi	r18, 0xE7	; 231
    3638:	e9 81       	ldd	r30, Y+1	; 0x01
    363a:	fa 81       	ldd	r31, Y+2	; 0x02
    363c:	85 81       	ldd	r24, Z+5	; 0x05
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	8c 70       	andi	r24, 0x0C	; 12
    3644:	90 70       	andi	r25, 0x00	; 0
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	82 2b       	or	r24, r18
    364c:	83 2b       	or	r24, r19
    364e:	8c 93       	st	X, r24
			((Config_Ptr->mode & 0x0C)<<1));
}
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <Timer1_deInit>:


/*	Timer 1 Disable Function	*/
void Timer1_deInit(void)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
	/*	disable the timer by turning off the clock	*/
	TCCR1A=0;
    3662:	ef e4       	ldi	r30, 0x4F	; 79
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	10 82       	st	Z, r1
	TCCR1B=0;
    3668:	ee e4       	ldi	r30, 0x4E	; 78
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A);
    366e:	a9 e5       	ldi	r26, 0x59	; 89
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	e9 e5       	ldi	r30, 0x59	; 89
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	8f 7e       	andi	r24, 0xEF	; 239
    367a:	8c 93       	st	X, r24
}
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <Timer1_setCallBack>:


/*	Function to set the Call Back function address for timer 1	*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	00 d0       	rcall	.+0      	; 0x3688 <Timer1_setCallBack+0x6>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the function in a variable */
	g_callBackPtr = a_ptr;
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	90 93 2d 01 	sts	0x012D, r25
    3698:	80 93 2c 01 	sts	0x012C, r24
}
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <UART_init>:
   * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
   * 2. Enable the UART.
   * 3. Setup the UART baud rate.
   */
void UART_init(UART_ConfigType* UART_Config)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	00 d0       	rcall	.+0      	; 0x36ac <UART_init+0x6>
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <UART_init+0x8>
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	9c 83       	std	Y+4, r25	; 0x04
    36b4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    36b6:	1a 82       	std	Y+2, r1	; 0x02
    36b8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    36ba:	eb e2       	ldi	r30, 0x2B	; 43
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    36c2:	ea e2       	ldi	r30, 0x2A	; 42
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	88 e1       	ldi	r24, 0x18	; 24
    36c8:	80 83       	st	Z, r24
	 * USBS    = stop bit CONFIG.
	 * UCSZ1:0 = bit data mode (5,6,7,8)  *******with UCSZ2 in UCSRB******
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/* Set Bits number 3 in The Data size number in The bit UCSZ2 in Register UCSRB */
		UCSRB = (UCSRB & 0xFB) | (UART_Config->data_bits & 0x04);
    36ca:	aa e2       	ldi	r26, 0x2A	; 42
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	ea e2       	ldi	r30, 0x2A	; 42
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	98 2f       	mov	r25, r24
    36d6:	9b 7f       	andi	r25, 0xFB	; 251
    36d8:	eb 81       	ldd	r30, Y+3	; 0x03
    36da:	fc 81       	ldd	r31, Y+4	; 0x04
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	84 70       	andi	r24, 0x04	; 4
    36e0:	89 2b       	or	r24, r25
    36e2:	8c 93       	st	X, r24

		/* To Write in Register UCSRC, Firstly we need to make URSEL with LOGIC HIGH */
		/* But the first 2 bits in Data size in the bits UCSZ1 and UCSZ0 to Specify the size of Data */
		UCSRC = (1 << URSEL) | (UART_Config->data_bits << 1);
    36e4:	a0 e4       	ldi	r26, 0x40	; 64
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ea:	fc 81       	ldd	r31, Y+4	; 0x04
    36ec:	82 81       	ldd	r24, Z+2	; 0x02
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	80 68       	ori	r24, 0x80	; 128
    36f8:	8c 93       	st	X, r24

		/* Specify Parity bit Mode(Even/ Odd / Disabled) in Data frame */
		UCSRC = (UCSRC & 0xCF) | (UART_Config->parity << 4);
    36fa:	a0 e4       	ldi	r26, 0x40	; 64
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e0 e4       	ldi	r30, 0x40	; 64
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	28 2f       	mov	r18, r24
    3706:	2f 7c       	andi	r18, 0xCF	; 207
    3708:	eb 81       	ldd	r30, Y+3	; 0x03
    370a:	fc 81       	ldd	r31, Y+4	; 0x04
    370c:	80 81       	ld	r24, Z
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	82 95       	swap	r24
    3714:	92 95       	swap	r25
    3716:	90 7f       	andi	r25, 0xF0	; 240
    3718:	98 27       	eor	r25, r24
    371a:	80 7f       	andi	r24, 0xF0	; 240
    371c:	98 27       	eor	r25, r24
    371e:	82 2b       	or	r24, r18
    3720:	8c 93       	st	X, r24

		/* Specify number of stop bits in the Data frame */
		UCSRC = (UCSRC & 0xF7) | (UART_Config->stop_bit << 3);
    3722:	a0 e4       	ldi	r26, 0x40	; 64
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e0 e4       	ldi	r30, 0x40	; 64
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	28 2f       	mov	r18, r24
    372e:	27 7f       	andi	r18, 0xF7	; 247
    3730:	eb 81       	ldd	r30, Y+3	; 0x03
    3732:	fc 81       	ldd	r31, Y+4	; 0x04
    3734:	81 81       	ldd	r24, Z+1	; 0x01
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	82 2b       	or	r24, r18
    3748:	8c 93       	st	X, r24

	if (UART_Config->data_bits == Bits_9)
    374a:	eb 81       	ldd	r30, Y+3	; 0x03
    374c:	fc 81       	ldd	r31, Y+4	; 0x04
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	87 30       	cpi	r24, 0x07	; 7
    3752:	39 f4       	brne	.+14     	; 0x3762 <UART_init+0xbc>
	{
		/*
		 * SET BIT UCSZ2 FOR 9-BIT MODE IN REG UCSRB
		 * */
		SET_BIT(UCSRB, UCSZ2);
    3754:	aa e2       	ldi	r26, 0x2A	; 42
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	ea e2       	ldi	r30, 0x2A	; 42
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	84 60       	ori	r24, 0x04	; 4
    3760:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_Config->baud_rate * 8UL))) - 1);
    3762:	eb 81       	ldd	r30, Y+3	; 0x03
    3764:	fc 81       	ldd	r31, Y+4	; 0x04
    3766:	83 81       	ldd	r24, Z+3	; 0x03
    3768:	94 81       	ldd	r25, Z+4	; 0x04
    376a:	cc 01       	movw	r24, r24
    376c:	a0 e0       	ldi	r26, 0x00	; 0
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	88 0f       	add	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	aa 1f       	adc	r26, r26
    3776:	bb 1f       	adc	r27, r27
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	aa 1f       	adc	r26, r26
    377e:	bb 1f       	adc	r27, r27
    3780:	88 0f       	add	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	aa 1f       	adc	r26, r26
    3786:	bb 1f       	adc	r27, r27
    3788:	9c 01       	movw	r18, r24
    378a:	ad 01       	movw	r20, r26
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	92 e1       	ldi	r25, 0x12	; 18
    3790:	aa e7       	ldi	r26, 0x7A	; 122
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodsi4>
    379c:	da 01       	movw	r26, r20
    379e:	c9 01       	movw	r24, r18
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//CLEAR_BIT(UCSRC,URSEL);
	UBRRH = ubrr_value >> 8; /*SHIFT BY 8 BIT TO PUT IN REG. HIGH*/
    37a6:	e0 e4       	ldi	r30, 0x40	; 64
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	9a 81       	ldd	r25, Y+2	; 0x02
    37ae:	89 2f       	mov	r24, r25
    37b0:	99 27       	eor	r25, r25
    37b2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    37b4:	e9 e2       	ldi	r30, 0x29	; 41
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	80 83       	st	Z, r24
}
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	0f 92       	push	r0
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {}
    37d6:	eb e2       	ldi	r30, 0x2B	; 43
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	88 2f       	mov	r24, r24
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	80 72       	andi	r24, 0x20	; 32
    37e2:	90 70       	andi	r25, 0x00	; 0
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	b9 f3       	breq	.-18     	; 0x37d6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    37e8:	ec e2       	ldi	r30, 0x2C	; 44
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    37f0:	0f 90       	pop	r0
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {}
    3800:	eb e2       	ldi	r30, 0x2B	; 43
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	88 23       	and	r24, r24
    3808:	dc f7       	brge	.-10     	; 0x3800 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    380a:	ec e2       	ldi	r30, 0x2C	; 44
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
}
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8* Str)
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	00 d0       	rcall	.+0      	; 0x381c <UART_sendString+0x6>
    381c:	0f 92       	push	r0
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	9b 83       	std	Y+3, r25	; 0x03
    3824:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    3826:	19 82       	std	Y+1, r1	; 0x01
    3828:	0e c0       	rjmp	.+28     	; 0x3846 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	fc 01       	movw	r30, r24
    3836:	e2 0f       	add	r30, r18
    3838:	f3 1f       	adc	r31, r19
    383a:	80 81       	ld	r24, Z
    383c:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <UART_sendByte>
		i++;
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	89 83       	std	Y+1, r24	; 0x01
{

	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	9b 81       	ldd	r25, Y+3	; 0x03
    3850:	fc 01       	movw	r30, r24
    3852:	e2 0f       	add	r30, r18
    3854:	f3 1f       	adc	r31, r19
    3856:	80 81       	ld	r24, Z
    3858:	88 23       	and	r24, r24
    385a:	39 f7       	brne	.-50     	; 0x382a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8* Str)
{
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	00 d0       	rcall	.+0      	; 0x3872 <UART_receiveString+0xa>
    3872:	0f 92       	push	r0
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	9b 83       	std	Y+3, r25	; 0x03
    387a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    387c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the '#' */
	Str[i] = UART_recieveByte();
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	8c 01       	movw	r16, r24
    388a:	02 0f       	add	r16, r18
    388c:	13 1f       	adc	r17, r19
    388e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    3892:	f8 01       	movw	r30, r16
    3894:	80 83       	st	Z, r24
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <UART_receiveString+0x4e>

	while (Str[i] != '#')
	{
		i++;
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	8f 5f       	subi	r24, 0xFF	; 255
    389c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	28 2f       	mov	r18, r24
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	8a 81       	ldd	r24, Y+2	; 0x02
    38a6:	9b 81       	ldd	r25, Y+3	; 0x03
    38a8:	8c 01       	movw	r16, r24
    38aa:	02 0f       	add	r16, r18
    38ac:	13 1f       	adc	r17, r19
    38ae:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <UART_recieveByte>
    38b2:	f8 01       	movw	r30, r16
    38b4:	80 83       	st	Z, r24
	uint8 i = 0;

	/* Receive the whole string until the '#' */
	Str[i] = UART_recieveByte();

	while (Str[i] != '#')
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	9b 81       	ldd	r25, Y+3	; 0x03
    38c0:	fc 01       	movw	r30, r24
    38c2:	e2 0f       	add	r30, r18
    38c4:	f3 1f       	adc	r31, r19
    38c6:	80 81       	ld	r24, Z
    38c8:	83 32       	cpi	r24, 0x23	; 35
    38ca:	31 f7       	brne	.-52     	; 0x3898 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	28 2f       	mov	r18, r24
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	8a 81       	ldd	r24, Y+2	; 0x02
    38d4:	9b 81       	ldd	r25, Y+3	; 0x03
    38d6:	fc 01       	movw	r30, r24
    38d8:	e2 0f       	add	r30, r18
    38da:	f3 1f       	adc	r31, r19
    38dc:	10 82       	st	Z, r1
}
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	08 95       	ret

000038ee <__udivmodsi4>:
    38ee:	a1 e2       	ldi	r26, 0x21	; 33
    38f0:	1a 2e       	mov	r1, r26
    38f2:	aa 1b       	sub	r26, r26
    38f4:	bb 1b       	sub	r27, r27
    38f6:	fd 01       	movw	r30, r26
    38f8:	0d c0       	rjmp	.+26     	; 0x3914 <__udivmodsi4_ep>

000038fa <__udivmodsi4_loop>:
    38fa:	aa 1f       	adc	r26, r26
    38fc:	bb 1f       	adc	r27, r27
    38fe:	ee 1f       	adc	r30, r30
    3900:	ff 1f       	adc	r31, r31
    3902:	a2 17       	cp	r26, r18
    3904:	b3 07       	cpc	r27, r19
    3906:	e4 07       	cpc	r30, r20
    3908:	f5 07       	cpc	r31, r21
    390a:	20 f0       	brcs	.+8      	; 0x3914 <__udivmodsi4_ep>
    390c:	a2 1b       	sub	r26, r18
    390e:	b3 0b       	sbc	r27, r19
    3910:	e4 0b       	sbc	r30, r20
    3912:	f5 0b       	sbc	r31, r21

00003914 <__udivmodsi4_ep>:
    3914:	66 1f       	adc	r22, r22
    3916:	77 1f       	adc	r23, r23
    3918:	88 1f       	adc	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	1a 94       	dec	r1
    391e:	69 f7       	brne	.-38     	; 0x38fa <__udivmodsi4_loop>
    3920:	60 95       	com	r22
    3922:	70 95       	com	r23
    3924:	80 95       	com	r24
    3926:	90 95       	com	r25
    3928:	9b 01       	movw	r18, r22
    392a:	ac 01       	movw	r20, r24
    392c:	bd 01       	movw	r22, r26
    392e:	cf 01       	movw	r24, r30
    3930:	08 95       	ret

00003932 <__prologue_saves__>:
    3932:	2f 92       	push	r2
    3934:	3f 92       	push	r3
    3936:	4f 92       	push	r4
    3938:	5f 92       	push	r5
    393a:	6f 92       	push	r6
    393c:	7f 92       	push	r7
    393e:	8f 92       	push	r8
    3940:	9f 92       	push	r9
    3942:	af 92       	push	r10
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	ca 1b       	sub	r28, r26
    395c:	db 0b       	sbc	r29, r27
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	09 94       	ijmp

0000396a <__epilogue_restores__>:
    396a:	2a 88       	ldd	r2, Y+18	; 0x12
    396c:	39 88       	ldd	r3, Y+17	; 0x11
    396e:	48 88       	ldd	r4, Y+16	; 0x10
    3970:	5f 84       	ldd	r5, Y+15	; 0x0f
    3972:	6e 84       	ldd	r6, Y+14	; 0x0e
    3974:	7d 84       	ldd	r7, Y+13	; 0x0d
    3976:	8c 84       	ldd	r8, Y+12	; 0x0c
    3978:	9b 84       	ldd	r9, Y+11	; 0x0b
    397a:	aa 84       	ldd	r10, Y+10	; 0x0a
    397c:	b9 84       	ldd	r11, Y+9	; 0x09
    397e:	c8 84       	ldd	r12, Y+8	; 0x08
    3980:	df 80       	ldd	r13, Y+7	; 0x07
    3982:	ee 80       	ldd	r14, Y+6	; 0x06
    3984:	fd 80       	ldd	r15, Y+5	; 0x05
    3986:	0c 81       	ldd	r16, Y+4	; 0x04
    3988:	1b 81       	ldd	r17, Y+3	; 0x03
    398a:	aa 81       	ldd	r26, Y+2	; 0x02
    398c:	b9 81       	ldd	r27, Y+1	; 0x01
    398e:	ce 0f       	add	r28, r30
    3990:	d1 1d       	adc	r29, r1
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	ed 01       	movw	r28, r26
    399e:	08 95       	ret

000039a0 <itoa>:
    39a0:	fb 01       	movw	r30, r22
    39a2:	9f 01       	movw	r18, r30
    39a4:	e8 94       	clt
    39a6:	42 30       	cpi	r20, 0x02	; 2
    39a8:	c4 f0       	brlt	.+48     	; 0x39da <itoa+0x3a>
    39aa:	45 32       	cpi	r20, 0x25	; 37
    39ac:	b4 f4       	brge	.+44     	; 0x39da <itoa+0x3a>
    39ae:	4a 30       	cpi	r20, 0x0A	; 10
    39b0:	29 f4       	brne	.+10     	; 0x39bc <itoa+0x1c>
    39b2:	97 fb       	bst	r25, 7
    39b4:	1e f4       	brtc	.+6      	; 0x39bc <itoa+0x1c>
    39b6:	90 95       	com	r25
    39b8:	81 95       	neg	r24
    39ba:	9f 4f       	sbci	r25, 0xFF	; 255
    39bc:	64 2f       	mov	r22, r20
    39be:	77 27       	eor	r23, r23
    39c0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__udivmodhi4>
    39c4:	80 5d       	subi	r24, 0xD0	; 208
    39c6:	8a 33       	cpi	r24, 0x3A	; 58
    39c8:	0c f0       	brlt	.+2      	; 0x39cc <itoa+0x2c>
    39ca:	89 5d       	subi	r24, 0xD9	; 217
    39cc:	81 93       	st	Z+, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	a1 f7       	brne	.-24     	; 0x39bc <itoa+0x1c>
    39d4:	16 f4       	brtc	.+4      	; 0x39da <itoa+0x3a>
    39d6:	5d e2       	ldi	r21, 0x2D	; 45
    39d8:	51 93       	st	Z+, r21
    39da:	10 82       	st	Z, r1
    39dc:	c9 01       	movw	r24, r18
    39de:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <strrev>

000039e2 <strrev>:
    39e2:	dc 01       	movw	r26, r24
    39e4:	fc 01       	movw	r30, r24
    39e6:	67 2f       	mov	r22, r23
    39e8:	71 91       	ld	r23, Z+
    39ea:	77 23       	and	r23, r23
    39ec:	e1 f7       	brne	.-8      	; 0x39e6 <strrev+0x4>
    39ee:	32 97       	sbiw	r30, 0x02	; 2
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <strrev+0x18>
    39f2:	7c 91       	ld	r23, X
    39f4:	6d 93       	st	X+, r22
    39f6:	70 83       	st	Z, r23
    39f8:	62 91       	ld	r22, -Z
    39fa:	ae 17       	cp	r26, r30
    39fc:	bf 07       	cpc	r27, r31
    39fe:	c8 f3       	brcs	.-14     	; 0x39f2 <strrev+0x10>
    3a00:	08 95       	ret

00003a02 <__udivmodhi4>:
    3a02:	aa 1b       	sub	r26, r26
    3a04:	bb 1b       	sub	r27, r27
    3a06:	51 e1       	ldi	r21, 0x11	; 17
    3a08:	07 c0       	rjmp	.+14     	; 0x3a18 <__udivmodhi4_ep>

00003a0a <__udivmodhi4_loop>:
    3a0a:	aa 1f       	adc	r26, r26
    3a0c:	bb 1f       	adc	r27, r27
    3a0e:	a6 17       	cp	r26, r22
    3a10:	b7 07       	cpc	r27, r23
    3a12:	10 f0       	brcs	.+4      	; 0x3a18 <__udivmodhi4_ep>
    3a14:	a6 1b       	sub	r26, r22
    3a16:	b7 0b       	sbc	r27, r23

00003a18 <__udivmodhi4_ep>:
    3a18:	88 1f       	adc	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	5a 95       	dec	r21
    3a1e:	a9 f7       	brne	.-22     	; 0x3a0a <__udivmodhi4_loop>
    3a20:	80 95       	com	r24
    3a22:	90 95       	com	r25
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	08 95       	ret

00003a2a <_exit>:
    3a2a:	f8 94       	cli

00003a2c <__stop_program>:
    3a2c:	ff cf       	rjmp	.-2      	; 0x3a2c <__stop_program>
