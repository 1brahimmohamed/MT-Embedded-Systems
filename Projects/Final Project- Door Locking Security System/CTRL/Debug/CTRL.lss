
CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002b10  00002ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080017c  0080017c  00002cc0  2**0
                  ALLOC
  3 .stab         00002d00  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001728  00000000  00000000  000059c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000070e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000747a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ac0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 0d 	call	0x1aac	; 0x1aac <main>
      8a:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER1_CallBack>:

/*******************************************************************************
 *                          	Function Definitions	                       *
 *******************************************************************************/
void TIMER1_CallBack(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	timerTicks++;
     e36:	80 91 7c 01 	lds	r24, 0x017C
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 93 7c 01 	sts	0x017C, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <CTRL_savePassword>:

void CTRL_savePassword(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	2e 97       	sbiw	r28, 0x0e	; 14
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
	eeprom_address=0x0313;
     e5a:	83 e1       	ldi	r24, 0x13	; 19
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	90 93 69 01 	sts	0x0169, r25
     e62:	80 93 68 01 	sts	0x0168, r24

	/*	write the value inside the first address then one by one	*/
	for(i=0;i<PASS_LENGTH;i++)
     e66:	10 92 7f 01 	sts	0x017F, r1
     e6a:	90 c0       	rjmp	.+288    	; 0xf8c <CTRL_savePassword+0x146>
	{
		EEPROM_writeByte(eeprom_address, password[i]);
     e6c:	40 91 68 01 	lds	r20, 0x0168
     e70:	50 91 69 01 	lds	r21, 0x0169
     e74:	80 91 7f 01 	lds	r24, 0x017F
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	fc 01       	movw	r30, r24
     e7e:	ee 57       	subi	r30, 0x7E	; 126
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	20 81       	ld	r18, Z
     e84:	ca 01       	movw	r24, r20
     e86:	62 2f       	mov	r22, r18
     e88:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <EEPROM_writeByte>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e2       	ldi	r26, 0x20	; 32
     e92:	b1 e4       	ldi	r27, 0x41	; 65
     e94:	8b 87       	std	Y+11, r24	; 0x0b
     e96:	9c 87       	std	Y+12, r25	; 0x0c
     e98:	ad 87       	std	Y+13, r26	; 0x0d
     e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8f 83       	std	Y+7, r24	; 0x07
     eb6:	98 87       	std	Y+8, r25	; 0x08
     eb8:	a9 87       	std	Y+9, r26	; 0x09
     eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <CTRL_savePassword+0x98>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <CTRL_savePassword+0x116>
	else if (__tmp > 65535)
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <CTRL_savePassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <CTRL_savePassword+0xf8>
     f20:	88 ec       	ldi	r24, 0xC8	; 200
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <CTRL_savePassword+0xe6>
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <CTRL_savePassword+0xda>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <CTRL_savePassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <CTRL_savePassword+0x122>
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
     f70:	80 91 68 01 	lds	r24, 0x0168
     f74:	90 91 69 01 	lds	r25, 0x0169
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	90 93 69 01 	sts	0x0169, r25
     f7e:	80 93 68 01 	sts	0x0168, r24
void CTRL_savePassword(void)
{
	eeprom_address=0x0313;

	/*	write the value inside the first address then one by one	*/
	for(i=0;i<PASS_LENGTH;i++)
     f82:	80 91 7f 01 	lds	r24, 0x017F
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 7f 01 	sts	0x017F, r24
     f8c:	80 91 7f 01 	lds	r24, 0x017F
     f90:	85 30       	cpi	r24, 0x05	; 5
     f92:	08 f4       	brcc	.+2      	; 0xf96 <CTRL_savePassword+0x150>
     f94:	6b cf       	rjmp	.-298    	; 0xe6c <CTRL_savePassword+0x26>
	{
		EEPROM_writeByte(eeprom_address, password[i]);
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
	}
}
     f96:	2e 96       	adiw	r28, 0x0e	; 14
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <CTRL_unlock>:

void CTRL_unlock(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62

	/* rest timer*/
	timerTicks=0;
     fb0:	10 92 7c 01 	sts	0x017C, r1

	/*	open door for 15 secs */
	DcMotor_Rotate(CW, 90);
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	6a e5       	ldi	r22, 0x5A	; 90
     fb8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>
	while(timerTicks<DOOR_OPEN);
     fbc:	80 91 7c 01 	lds	r24, 0x017C
     fc0:	85 30       	cpi	r24, 0x05	; 5
     fc2:	e0 f3       	brcs	.-8      	; 0xfbc <CTRL_unlock+0x14>

	/*hold for 3 secs*/
	DcMotor_Rotate(STOP, 0);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>
	while(timerTicks<(DOOR_OPEN+DOOR_HOLD));
     fcc:	80 91 7c 01 	lds	r24, 0x017C
     fd0:	86 30       	cpi	r24, 0x06	; 6
     fd2:	e0 f3       	brcs	.-8      	; 0xfcc <CTRL_unlock+0x24>

	/*	close door for 15 secs */
	DcMotor_Rotate(ACW, 90);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	6a e5       	ldi	r22, 0x5A	; 90
     fd8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>
	while(timerTicks<(DOOR_OPEN+DOOR_HOLD+DOOR_CLOSE));
     fdc:	80 91 7c 01 	lds	r24, 0x017C
     fe0:	8b 30       	cpi	r24, 0x0B	; 11
     fe2:	e0 f3       	brcs	.-8      	; 0xfdc <CTRL_unlock+0x34>

	/*stop*/
	DcMotor_Rotate(STOP, 0);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <CTRL_buzzerOn>:

void CTRL_buzzerOn(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	/*	reset timer1	*/
	timerTicks=0;
     ffa:	10 92 7c 01 	sts	0x017C, r1

	/*	turn on buzzer for 1 min	*/
	Buzzer_on();
     ffe:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <Buzzer_on>
	while(timerTicks<BUZZER_ACTIVE);
    1002:	80 91 7c 01 	lds	r24, 0x017C
    1006:	84 31       	cpi	r24, 0x14	; 20
    1008:	e0 f3       	brcs	.-8      	; 0x1002 <CTRL_buzzerOn+0x10>
	Buzzer_off();
    100a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Buzzer_off>
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <CTRL_passwordCheck>:


void CTRL_passwordCheck(void)
{
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	a0 97       	sbiw	r28, 0x20	; 32
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
	matching_state=1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 7e 01 	sts	0x017E, r25
    1034:	80 93 7d 01 	sts	0x017D, r24
	i=0;
    1038:	10 92 7f 01 	sts	0x017F, r1

	/*send ready to the other mc*/
	UART_sendByte(CON_READY);
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>

	/*	recive password from HMI	*/
	int rec_pass_counter = 0;
    1042:	18 a2       	std	Y+32, r1	; 0x20
    1044:	1f 8e       	std	Y+31, r1	; 0x1f
    1046:	7f c0       	rjmp	.+254    	; 0x1146 <CTRL_passwordCheck+0x132>
	while(rec_pass_counter<PASS_LENGTH)
	{
		password_toBeChecked[rec_pass_counter]=UART_recieveByte();
    1048:	0f 8d       	ldd	r16, Y+31	; 0x1f
    104a:	18 a1       	ldd	r17, Y+32	; 0x20
    104c:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    1050:	f8 01       	movw	r30, r16
    1052:	eb 56       	subi	r30, 0x6B	; 107
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	80 83       	st	Z, r24
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a8 e4       	ldi	r26, 0x48	; 72
    105e:	b2 e4       	ldi	r27, 0x42	; 66
    1060:	89 8f       	std	Y+25, r24	; 0x19
    1062:	9a 8f       	std	Y+26, r25	; 0x1a
    1064:	ab 8f       	std	Y+27, r26	; 0x1b
    1066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	69 8d       	ldd	r22, Y+25	; 0x19
    106a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a ef       	ldi	r20, 0xFA	; 250
    1076:	54 e4       	ldi	r21, 0x44	; 68
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8d 8b       	std	Y+21, r24	; 0x15
    1082:	9e 8b       	std	Y+22, r25	; 0x16
    1084:	af 8b       	std	Y+23, r26	; 0x17
    1086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <CTRL_passwordCheck+0x96>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <CTRL_passwordCheck+0x114>
	else if (__tmp > 65535)
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <CTRL_passwordCheck+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	69 8d       	ldd	r22, Y+25	; 0x19
    10c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	8b 8b       	std	Y+19, r24	; 0x13
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <CTRL_passwordCheck+0xf6>
    10ec:	88 ec       	ldi	r24, 0xC8	; 200
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9a 8b       	std	Y+18, r25	; 0x12
    10f2:	89 8b       	std	Y+17, r24	; 0x11
    10f4:	89 89       	ldd	r24, Y+17	; 0x11
    10f6:	9a 89       	ldd	r25, Y+18	; 0x12
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <CTRL_passwordCheck+0xe4>
    10fc:	9a 8b       	std	Y+18, r25	; 0x12
    10fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9c 8b       	std	Y+20, r25	; 0x14
    1108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <CTRL_passwordCheck+0xd8>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <CTRL_passwordCheck+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6d 89       	ldd	r22, Y+21	; 0x15
    1116:	7e 89       	ldd	r23, Y+22	; 0x16
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9c 8b       	std	Y+20, r25	; 0x14
    1126:	8b 8b       	std	Y+19, r24	; 0x13
    1128:	8b 89       	ldd	r24, Y+19	; 0x13
    112a:	9c 89       	ldd	r25, Y+20	; 0x14
    112c:	98 8b       	std	Y+16, r25	; 0x10
    112e:	8f 87       	std	Y+15, r24	; 0x0f
    1130:	8f 85       	ldd	r24, Y+15	; 0x0f
    1132:	98 89       	ldd	r25, Y+16	; 0x10
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <CTRL_passwordCheck+0x120>
    1138:	98 8b       	std	Y+16, r25	; 0x10
    113a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(UART_DELAY);
		rec_pass_counter++;
    113c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    113e:	98 a1       	ldd	r25, Y+32	; 0x20
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	98 a3       	std	Y+32, r25	; 0x20
    1144:	8f 8f       	std	Y+31, r24	; 0x1f
	/*send ready to the other mc*/
	UART_sendByte(CON_READY);

	/*	recive password from HMI	*/
	int rec_pass_counter = 0;
	while(rec_pass_counter<PASS_LENGTH)
    1146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1148:	98 a1       	ldd	r25, Y+32	; 0x20
    114a:	85 30       	cpi	r24, 0x05	; 5
    114c:	91 05       	cpc	r25, r1
    114e:	0c f4       	brge	.+2      	; 0x1152 <CTRL_passwordCheck+0x13e>
    1150:	7b cf       	rjmp	.-266    	; 0x1048 <CTRL_passwordCheck+0x34>
		_delay_ms(UART_DELAY);
		rec_pass_counter++;
	}

	/*	get the stored password and check	*/
	eeprom_address=0x0313;
    1152:	83 e1       	ldi	r24, 0x13	; 19
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	90 93 69 01 	sts	0x0169, r25
    115a:	80 93 68 01 	sts	0x0168, r24
	for(i=0;i<PASS_LENGTH;i++)
    115e:	10 92 7f 01 	sts	0x017F, r1
    1162:	8f c0       	rjmp	.+286    	; 0x1282 <CTRL_passwordCheck+0x26e>
	{
		EEPROM_readByte(eeprom_address,password_saved+i);
    1164:	40 91 68 01 	lds	r20, 0x0168
    1168:	50 91 69 01 	lds	r21, 0x0169
    116c:	80 91 7f 01 	lds	r24, 0x017F
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c 01       	movw	r18, r24
    1176:	20 57       	subi	r18, 0x70	; 112
    1178:	3e 4f       	sbci	r19, 0xFE	; 254
    117a:	ca 01       	movw	r24, r20
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <EEPROM_readByte>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e2       	ldi	r26, 0x20	; 32
    1188:	b1 e4       	ldi	r27, 0x41	; 65
    118a:	8b 87       	std	Y+11, r24	; 0x0b
    118c:	9c 87       	std	Y+12, r25	; 0x0c
    118e:	ad 87       	std	Y+13, r26	; 0x0d
    1190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1192:	6b 85       	ldd	r22, Y+11	; 0x0b
    1194:	7c 85       	ldd	r23, Y+12	; 0x0c
    1196:	8d 85       	ldd	r24, Y+13	; 0x0d
    1198:	9e 85       	ldd	r25, Y+14	; 0x0e
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a ef       	ldi	r20, 0xFA	; 250
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	8f 83       	std	Y+7, r24	; 0x07
    11ac:	98 87       	std	Y+8, r25	; 0x08
    11ae:	a9 87       	std	Y+9, r26	; 0x09
    11b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b2:	6f 81       	ldd	r22, Y+7	; 0x07
    11b4:	78 85       	ldd	r23, Y+8	; 0x08
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <CTRL_passwordCheck+0x1c0>
		__ticks = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	3f c0       	rjmp	.+126    	; 0x1252 <CTRL_passwordCheck+0x23e>
	else if (__tmp > 65535)
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	4c f5       	brge	.+82     	; 0x123e <CTRL_passwordCheck+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <CTRL_passwordCheck+0x220>
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <CTRL_passwordCheck+0x20e>
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	9e 83       	std	Y+6, r25	; 0x06
    1232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	69 f7       	brne	.-38     	; 0x1216 <CTRL_passwordCheck+0x202>
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <CTRL_passwordCheck+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <CTRL_passwordCheck+0x24a>
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
    1266:	80 91 68 01 	lds	r24, 0x0168
    126a:	90 91 69 01 	lds	r25, 0x0169
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	90 93 69 01 	sts	0x0169, r25
    1274:	80 93 68 01 	sts	0x0168, r24
		rec_pass_counter++;
	}

	/*	get the stored password and check	*/
	eeprom_address=0x0313;
	for(i=0;i<PASS_LENGTH;i++)
    1278:	80 91 7f 01 	lds	r24, 0x017F
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	80 93 7f 01 	sts	0x017F, r24
    1282:	80 91 7f 01 	lds	r24, 0x017F
    1286:	85 30       	cpi	r24, 0x05	; 5
    1288:	08 f4       	brcc	.+2      	; 0x128c <CTRL_passwordCheck+0x278>
    128a:	6c cf       	rjmp	.-296    	; 0x1164 <CTRL_passwordCheck+0x150>
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
	}


	matching_state=1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	90 93 7e 01 	sts	0x017E, r25
    1294:	80 93 7d 01 	sts	0x017D, r24

	/*	start checking	*/
	int checking_counter=0;
    1298:	1e 8e       	std	Y+30, r1	; 0x1e
    129a:	1d 8e       	std	Y+29, r1	; 0x1d
    129c:	18 c0       	rjmp	.+48     	; 0x12ce <CTRL_passwordCheck+0x2ba>
	while(checking_counter<PASS_LENGTH)
	{
		/*	if they don't match break the function and set state to 0 (unmatch)	*/
		if(password_toBeChecked[checking_counter] != password_saved[checking_counter])
    129e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a2:	fc 01       	movw	r30, r24
    12a4:	eb 56       	subi	r30, 0x6B	; 107
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	20 81       	ld	r18, Z
    12aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ae:	fc 01       	movw	r30, r24
    12b0:	e0 57       	subi	r30, 0x70	; 112
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	28 17       	cp	r18, r24
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <CTRL_passwordCheck+0x2b0>
		{
			matching_state=0;
    12ba:	10 92 7e 01 	sts	0x017E, r1
    12be:	10 92 7d 01 	sts	0x017D, r1
    12c2:	0a c0       	rjmp	.+20     	; 0x12d8 <CTRL_passwordCheck+0x2c4>
			break;
		}
		checking_counter++;
    12c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	8d 8f       	std	Y+29, r24	; 0x1d

	matching_state=1;

	/*	start checking	*/
	int checking_counter=0;
	while(checking_counter<PASS_LENGTH)
    12ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	91 05       	cpc	r25, r1
    12d6:	1c f3       	brlt	.-58     	; 0x129e <CTRL_passwordCheck+0x28a>
			matching_state=0;
			break;
		}
		checking_counter++;
	}
}
    12d8:	a0 96       	adiw	r28, 0x20	; 32
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <CTRL_openDoor>:

void CTRL_openDoor(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	60 97       	sbiw	r28, 0x10	; 16
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
	int doorErrors=0;
    1302:	18 8a       	std	Y+16, r1	; 0x10
    1304:	1f 86       	std	Y+15, r1	; 0x0f
	matching_state=0;
    1306:	10 92 7e 01 	sts	0x017E, r1
    130a:	10 92 7d 01 	sts	0x017D, r1
    130e:	83 c0       	rjmp	.+262    	; 0x1416 <CTRL_openDoor+0x128>

	while(matching_state==0 && doorErrors<3)
	{
		/*	check passwords	*/
		CTRL_passwordCheck();
    1310:	0e 94 0a 08 	call	0x1014	; 0x1014 <CTRL_passwordCheck>

		/*	wait till other mc is ready	*/
		while(UART_recieveByte() != HMI_READY);
    1314:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    1318:	80 31       	cpi	r24, 0x10	; 16
    131a:	e1 f7       	brne	.-8      	; 0x1314 <CTRL_openDoor+0x26>

		/*	send the matching state*/
		UART_sendByte(matching_state);
    131c:	80 91 7d 01 	lds	r24, 0x017D
    1320:	90 91 7e 01 	lds	r25, 0x017E
    1324:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a8 e4       	ldi	r26, 0x48	; 72
    132e:	b2 e4       	ldi	r27, 0x42	; 66
    1330:	8b 87       	std	Y+11, r24	; 0x0b
    1332:	9c 87       	std	Y+12, r25	; 0x0c
    1334:	ad 87       	std	Y+13, r26	; 0x0d
    1336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	4a ef       	ldi	r20, 0xFA	; 250
    1346:	54 e4       	ldi	r21, 0x44	; 68
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	8f 83       	std	Y+7, r24	; 0x07
    1352:	98 87       	std	Y+8, r25	; 0x08
    1354:	a9 87       	std	Y+9, r26	; 0x09
    1356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1358:	6f 81       	ldd	r22, Y+7	; 0x07
    135a:	78 85       	ldd	r23, Y+8	; 0x08
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    136c:	88 23       	and	r24, r24
    136e:	2c f4       	brge	.+10     	; 0x137a <CTRL_openDoor+0x8c>
		__ticks = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	3f c0       	rjmp	.+126    	; 0x13f8 <CTRL_openDoor+0x10a>
	else if (__tmp > 65535)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	4c f5       	brge	.+82     	; 0x13e4 <CTRL_openDoor+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	6b 85       	ldd	r22, Y+11	; 0x0b
    1394:	7c 85       	ldd	r23, Y+12	; 0x0c
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <CTRL_openDoor+0xec>
    13bc:	88 ec       	ldi	r24, 0xC8	; 200
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <CTRL_openDoor+0xda>
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f7       	brne	.-38     	; 0x13bc <CTRL_openDoor+0xce>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <CTRL_openDoor+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <CTRL_openDoor+0x116>
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(UART_DELAY);

		/*increment door errors*/
		doorErrors++;
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	98 89       	ldd	r25, Y+16	; 0x10
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	98 8b       	std	Y+16, r25	; 0x10
    1414:	8f 87       	std	Y+15, r24	; 0x0f
void CTRL_openDoor(void)
{
	int doorErrors=0;
	matching_state=0;

	while(matching_state==0 && doorErrors<3)
    1416:	80 91 7d 01 	lds	r24, 0x017D
    141a:	90 91 7e 01 	lds	r25, 0x017E
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	31 f4       	brne	.+12     	; 0x142e <CTRL_openDoor+0x140>
    1422:	8f 85       	ldd	r24, Y+15	; 0x0f
    1424:	98 89       	ldd	r25, Y+16	; 0x10
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	0c f4       	brge	.+2      	; 0x142e <CTRL_openDoor+0x140>
    142c:	71 cf       	rjmp	.-286    	; 0x1310 <CTRL_openDoor+0x22>
		/*increment door errors*/
		doorErrors++;
	}

	/*	if passwords match, unlock*/
	if(matching_state==1)
    142e:	80 91 7d 01 	lds	r24, 0x017D
    1432:	90 91 7e 01 	lds	r25, 0x017E
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	19 f4       	brne	.+6      	; 0x1442 <CTRL_openDoor+0x154>
	{
		CTRL_unlock();
    143c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CTRL_unlock>
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <CTRL_openDoor+0x158>
	}

	/*	if passwords un-match after reaching out max errors, activate buzzer*/
	else
	{
		CTRL_buzzerOn();
    1442:	0e 94 f9 07 	call	0xff2	; 0xff2 <CTRL_buzzerOn>
	}
}
    1446:	60 96       	adiw	r28, 0x10	; 16
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <CTRL_createPassword>:

void CTRL_createPassword(void)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	e0 97       	sbiw	r28, 0x30	; 48
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
	matching_state=0
    1470:	10 92 7e 01 	sts	0x017E, r1
    1474:	10 92 7d 01 	sts	0x017D, r1
    1478:	b8 c1       	rjmp	.+880    	; 0x17ea <CTRL_createPassword+0x392>
			;
	while(matching_state==0)
	{
		matching_state=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	90 93 7e 01 	sts	0x017E, r25
    1482:	80 93 7d 01 	sts	0x017D, r24

		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);
    1486:	80 e1       	ldi	r24, 0x10	; 16
    1488:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>

		/*	Receive new password from HMI	*/
		int new_pass_counter = 0;
    148c:	18 aa       	std	Y+48, r1	; 0x30
    148e:	1f a6       	std	Y+47, r1	; 0x2f
    1490:	7f c0       	rjmp	.+254    	; 0x1590 <CTRL_createPassword+0x138>
		while(new_pass_counter<PASS_LENGTH)
		{
			password[new_pass_counter]=UART_recieveByte();
    1492:	0f a5       	ldd	r16, Y+47	; 0x2f
    1494:	18 a9       	ldd	r17, Y+48	; 0x30
    1496:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    149a:	f8 01       	movw	r30, r16
    149c:	ee 57       	subi	r30, 0x7E	; 126
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	80 83       	st	Z, r24
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a8 e4       	ldi	r26, 0x48	; 72
    14a8:	b2 e4       	ldi	r27, 0x42	; 66
    14aa:	8f a3       	std	Y+39, r24	; 0x27
    14ac:	98 a7       	std	Y+40, r25	; 0x28
    14ae:	a9 a7       	std	Y+41, r26	; 0x29
    14b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6f a1       	ldd	r22, Y+39	; 0x27
    14b4:	78 a5       	ldd	r23, Y+40	; 0x28
    14b6:	89 a5       	ldd	r24, Y+41	; 0x29
    14b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8b a3       	std	Y+35, r24	; 0x23
    14cc:	9c a3       	std	Y+36, r25	; 0x24
    14ce:	ad a3       	std	Y+37, r26	; 0x25
    14d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d2:	6b a1       	ldd	r22, Y+35	; 0x23
    14d4:	7c a1       	ldd	r23, Y+36	; 0x24
    14d6:	8d a1       	ldd	r24, Y+37	; 0x25
    14d8:	9e a1       	ldd	r25, Y+38	; 0x26
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <CTRL_createPassword+0x9c>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <CTRL_createPassword+0x11a>
	else if (__tmp > 65535)
    14f4:	6b a1       	ldd	r22, Y+35	; 0x23
    14f6:	7c a1       	ldd	r23, Y+36	; 0x24
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	9e a1       	ldd	r25, Y+38	; 0x26
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <CTRL_createPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6f a1       	ldd	r22, Y+39	; 0x27
    150e:	78 a5       	ldd	r23, Y+40	; 0x28
    1510:	89 a5       	ldd	r24, Y+41	; 0x29
    1512:	9a a5       	ldd	r25, Y+42	; 0x2a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9a a3       	std	Y+34, r25	; 0x22
    1532:	89 a3       	std	Y+33, r24	; 0x21
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <CTRL_createPassword+0xfc>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 a3       	std	Y+32, r25	; 0x20
    153c:	8f 8f       	std	Y+31, r24	; 0x1f
    153e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1540:	98 a1       	ldd	r25, Y+32	; 0x20
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <CTRL_createPassword+0xea>
    1546:	98 a3       	std	Y+32, r25	; 0x20
    1548:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	89 a1       	ldd	r24, Y+33	; 0x21
    154c:	9a a1       	ldd	r25, Y+34	; 0x22
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9a a3       	std	Y+34, r25	; 0x22
    1552:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	89 a1       	ldd	r24, Y+33	; 0x21
    1556:	9a a1       	ldd	r25, Y+34	; 0x22
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <CTRL_createPassword+0xde>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <CTRL_createPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	9e 8f       	std	Y+30, r25	; 0x1e
    1578:	8d 8f       	std	Y+29, r24	; 0x1d
    157a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <CTRL_createPassword+0x126>
    1582:	9e 8f       	std	Y+30, r25	; 0x1e
    1584:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(UART_DELAY);
			new_pass_counter++;
    1586:	8f a5       	ldd	r24, Y+47	; 0x2f
    1588:	98 a9       	ldd	r25, Y+48	; 0x30
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	98 ab       	std	Y+48, r25	; 0x30
    158e:	8f a7       	std	Y+47, r24	; 0x2f
		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);

		/*	Receive new password from HMI	*/
		int new_pass_counter = 0;
		while(new_pass_counter<PASS_LENGTH)
    1590:	8f a5       	ldd	r24, Y+47	; 0x2f
    1592:	98 a9       	ldd	r25, Y+48	; 0x30
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	91 05       	cpc	r25, r1
    1598:	0c f4       	brge	.+2      	; 0x159c <CTRL_createPassword+0x144>
    159a:	7b cf       	rjmp	.-266    	; 0x1492 <CTRL_createPassword+0x3a>
			_delay_ms(UART_DELAY);
			new_pass_counter++;
		}

		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);
    159c:	80 e1       	ldi	r24, 0x10	; 16
    159e:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>

		/*	Receive new password from HMI	*/
		int new_passConf_counter = 0;
    15a2:	1e a6       	std	Y+46, r1	; 0x2e
    15a4:	1d a6       	std	Y+45, r1	; 0x2d
    15a6:	7f c0       	rjmp	.+254    	; 0x16a6 <CTRL_createPassword+0x24e>
		while(new_passConf_counter<PASS_LENGTH)
		{
			password_confirmed[new_passConf_counter]=UART_recieveByte();
    15a8:	0d a5       	ldd	r16, Y+45	; 0x2d
    15aa:	1e a5       	ldd	r17, Y+46	; 0x2e
    15ac:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    15b0:	f8 01       	movw	r30, r16
    15b2:	e6 57       	subi	r30, 0x76	; 118
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	80 83       	st	Z, r24
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a8 e4       	ldi	r26, 0x48	; 72
    15be:	b2 e4       	ldi	r27, 0x42	; 66
    15c0:	89 8f       	std	Y+25, r24	; 0x19
    15c2:	9a 8f       	std	Y+26, r25	; 0x1a
    15c4:	ab 8f       	std	Y+27, r26	; 0x1b
    15c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a ef       	ldi	r20, 0xFA	; 250
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8d 8b       	std	Y+21, r24	; 0x15
    15e2:	9e 8b       	std	Y+22, r25	; 0x16
    15e4:	af 8b       	std	Y+23, r26	; 0x17
    15e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ea:	7e 89       	ldd	r23, Y+22	; 0x16
    15ec:	8f 89       	ldd	r24, Y+23	; 0x17
    15ee:	98 8d       	ldd	r25, Y+24	; 0x18
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <CTRL_createPassword+0x1b2>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c 8b       	std	Y+20, r25	; 0x14
    1606:	8b 8b       	std	Y+19, r24	; 0x13
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <CTRL_createPassword+0x230>
	else if (__tmp > 65535)
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f5       	brge	.+82     	; 0x1674 <CTRL_createPassword+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	0f c0       	rjmp	.+30     	; 0x166a <CTRL_createPassword+0x212>
    164c:	88 ec       	ldi	r24, 0xC8	; 200
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9a 8b       	std	Y+18, r25	; 0x12
    1652:	89 8b       	std	Y+17, r24	; 0x11
    1654:	89 89       	ldd	r24, Y+17	; 0x11
    1656:	9a 89       	ldd	r25, Y+18	; 0x12
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <CTRL_createPassword+0x200>
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	8b 89       	ldd	r24, Y+19	; 0x13
    166c:	9c 89       	ldd	r25, Y+20	; 0x14
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	69 f7       	brne	.-38     	; 0x164c <CTRL_createPassword+0x1f4>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <CTRL_createPassword+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1674:	6d 89       	ldd	r22, Y+21	; 0x15
    1676:	7e 89       	ldd	r23, Y+22	; 0x16
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	8b 89       	ldd	r24, Y+19	; 0x13
    168a:	9c 89       	ldd	r25, Y+20	; 0x14
    168c:	98 8b       	std	Y+16, r25	; 0x10
    168e:	8f 87       	std	Y+15, r24	; 0x0f
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	98 89       	ldd	r25, Y+16	; 0x10
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <CTRL_createPassword+0x23c>
    1698:	98 8b       	std	Y+16, r25	; 0x10
    169a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(UART_DELAY);
			new_passConf_counter++;
    169c:	8d a5       	ldd	r24, Y+45	; 0x2d
    169e:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	9e a7       	std	Y+46, r25	; 0x2e
    16a4:	8d a7       	std	Y+45, r24	; 0x2d
		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);

		/*	Receive new password from HMI	*/
		int new_passConf_counter = 0;
		while(new_passConf_counter<PASS_LENGTH)
    16a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    16aa:	85 30       	cpi	r24, 0x05	; 5
    16ac:	91 05       	cpc	r25, r1
    16ae:	0c f4       	brge	.+2      	; 0x16b2 <CTRL_createPassword+0x25a>
    16b0:	7b cf       	rjmp	.-266    	; 0x15a8 <CTRL_createPassword+0x150>
			_delay_ms(UART_DELAY);
			new_passConf_counter++;
		}

		/*	check if two passwords matches	*/
		int new_passCheck_counter = 0;
    16b2:	1c a6       	std	Y+44, r1	; 0x2c
    16b4:	1b a6       	std	Y+43, r1	; 0x2b
    16b6:	18 c0       	rjmp	.+48     	; 0x16e8 <CTRL_createPassword+0x290>
		while(new_passCheck_counter<PASS_LENGTH)
		{
			if(password[new_passCheck_counter] != password_confirmed[new_passCheck_counter])
    16b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    16bc:	fc 01       	movw	r30, r24
    16be:	ee 57       	subi	r30, 0x7E	; 126
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	20 81       	ld	r18, Z
    16c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c8:	fc 01       	movw	r30, r24
    16ca:	e6 57       	subi	r30, 0x76	; 118
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	80 81       	ld	r24, Z
    16d0:	28 17       	cp	r18, r24
    16d2:	29 f0       	breq	.+10     	; 0x16de <CTRL_createPassword+0x286>
			{
				matching_state=0;
    16d4:	10 92 7e 01 	sts	0x017E, r1
    16d8:	10 92 7d 01 	sts	0x017D, r1
    16dc:	0a c0       	rjmp	.+20     	; 0x16f2 <CTRL_createPassword+0x29a>
				break;
			}
			new_passCheck_counter++;
    16de:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	9c a7       	std	Y+44, r25	; 0x2c
    16e6:	8b a7       	std	Y+43, r24	; 0x2b
			new_passConf_counter++;
		}

		/*	check if two passwords matches	*/
		int new_passCheck_counter = 0;
		while(new_passCheck_counter<PASS_LENGTH)
    16e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ec:	85 30       	cpi	r24, 0x05	; 5
    16ee:	91 05       	cpc	r25, r1
    16f0:	1c f3       	brlt	.-58     	; 0x16b8 <CTRL_createPassword+0x260>
			}
			new_passCheck_counter++;
		}

		/*	wait for the other mc to be ready	*/
		while(UART_recieveByte() != HMI_READY);
    16f2:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    16f6:	80 31       	cpi	r24, 0x10	; 16
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <CTRL_createPassword+0x29a>

		/*	sent the matching state	*/
		UART_sendByte(matching_state);
    16fa:	80 91 7d 01 	lds	r24, 0x017D
    16fe:	90 91 7e 01 	lds	r25, 0x017E
    1702:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a8 e4       	ldi	r26, 0x48	; 72
    170c:	b2 e4       	ldi	r27, 0x42	; 66
    170e:	8b 87       	std	Y+11, r24	; 0x0b
    1710:	9c 87       	std	Y+12, r25	; 0x0c
    1712:	ad 87       	std	Y+13, r26	; 0x0d
    1714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a ef       	ldi	r20, 0xFA	; 250
    1724:	54 e4       	ldi	r21, 0x44	; 68
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8f 83       	std	Y+7, r24	; 0x07
    1730:	98 87       	std	Y+8, r25	; 0x08
    1732:	a9 87       	std	Y+9, r26	; 0x09
    1734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <CTRL_createPassword+0x300>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <CTRL_createPassword+0x37e>
	else if (__tmp > 65535)
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	4c f5       	brge	.+82     	; 0x17c2 <CTRL_createPassword+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <CTRL_createPassword+0x360>
    179a:	88 ec       	ldi	r24, 0xC8	; 200
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <CTRL_createPassword+0x34e>
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	69 f7       	brne	.-38     	; 0x179a <CTRL_createPassword+0x342>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <CTRL_createPassword+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <CTRL_createPassword+0x38a>
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01

void CTRL_createPassword(void)
{
	matching_state=0
			;
	while(matching_state==0)
    17ea:	80 91 7d 01 	lds	r24, 0x017D
    17ee:	90 91 7e 01 	lds	r25, 0x017E
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <CTRL_createPassword+0x3a0>
    17f6:	41 ce       	rjmp	.-894    	; 0x147a <CTRL_createPassword+0x22>
		UART_sendByte(matching_state);
		_delay_ms(UART_DELAY);
	}

	/*store password in eeprom*/
	CTRL_savePassword();
    17f8:	0e 94 23 07 	call	0xe46	; 0xe46 <CTRL_savePassword>
}
    17fc:	e0 96       	adiw	r28, 0x30	; 48
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <CTRL_changePassword>:

void CTRL_changePassword(void)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	60 97       	sbiw	r28, 0x10	; 16
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61

	int passwordError=0;
    1826:	18 8a       	std	Y+16, r1	; 0x10
    1828:	1f 86       	std	Y+15, r1	; 0x0f
	matching_state=0;
    182a:	10 92 7e 01 	sts	0x017E, r1
    182e:	10 92 7d 01 	sts	0x017D, r1
    1832:	83 c0       	rjmp	.+262    	; 0x193a <CTRL_changePassword+0x128>

	while(matching_state==0 && passwordError<3)
	{
		/*	check password	*/
		CTRL_passwordCheck();
    1834:	0e 94 0a 08 	call	0x1014	; 0x1014 <CTRL_passwordCheck>

		/*	wait for HMI to be ready*/
		while(UART_recieveByte() != HMI_READY);
    1838:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    183c:	80 31       	cpi	r24, 0x10	; 16
    183e:	e1 f7       	brne	.-8      	; 0x1838 <CTRL_changePassword+0x26>

		/*	sent the matching state	*/
		UART_sendByte(matching_state);
    1840:	80 91 7d 01 	lds	r24, 0x017D
    1844:	90 91 7e 01 	lds	r25, 0x017E
    1848:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a8 e4       	ldi	r26, 0x48	; 72
    1852:	b2 e4       	ldi	r27, 0x42	; 66
    1854:	8b 87       	std	Y+11, r24	; 0x0b
    1856:	9c 87       	std	Y+12, r25	; 0x0c
    1858:	ad 87       	std	Y+13, r26	; 0x0d
    185a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8f 83       	std	Y+7, r24	; 0x07
    1876:	98 87       	std	Y+8, r25	; 0x08
    1878:	a9 87       	std	Y+9, r26	; 0x09
    187a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <CTRL_changePassword+0x8c>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	3f c0       	rjmp	.+126    	; 0x191c <CTRL_changePassword+0x10a>
	else if (__tmp > 65535)
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	78 85       	ldd	r23, Y+8	; 0x08
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <CTRL_changePassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <CTRL_changePassword+0xec>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <CTRL_changePassword+0xda>
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <CTRL_changePassword+0xce>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <CTRL_changePassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <CTRL_changePassword+0x116>
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(UART_DELAY);

		/*increment password error*/
		++passwordError;
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	98 89       	ldd	r25, Y+16	; 0x10
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	98 8b       	std	Y+16, r25	; 0x10
    1938:	8f 87       	std	Y+15, r24	; 0x0f
{

	int passwordError=0;
	matching_state=0;

	while(matching_state==0 && passwordError<3)
    193a:	80 91 7d 01 	lds	r24, 0x017D
    193e:	90 91 7e 01 	lds	r25, 0x017E
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	31 f4       	brne	.+12     	; 0x1952 <CTRL_changePassword+0x140>
    1946:	8f 85       	ldd	r24, Y+15	; 0x0f
    1948:	98 89       	ldd	r25, Y+16	; 0x10
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	0c f4       	brge	.+2      	; 0x1952 <CTRL_changePassword+0x140>
    1950:	71 cf       	rjmp	.-286    	; 0x1834 <CTRL_changePassword+0x22>
		/*increment password error*/
		++passwordError;
	}
	/*	if passwords match, create new pass*/

	if(matching_state==1)
    1952:	80 91 7d 01 	lds	r24, 0x017D
    1956:	90 91 7e 01 	lds	r25, 0x017E
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	19 f4       	brne	.+6      	; 0x1966 <CTRL_changePassword+0x154>
	{
		CTRL_createPassword();
    1960:	0e 94 2c 0a 	call	0x1458	; 0x1458 <CTRL_createPassword>
    1964:	02 c0       	rjmp	.+4      	; 0x196a <CTRL_changePassword+0x158>
	}

	/*	if passwords un-match after reaching out max errors, activate buzzer*/
	else
	{
		CTRL_buzzerOn();
    1966:	0e 94 f9 07 	call	0xff2	; 0xff2 <CTRL_buzzerOn>
	}
}
    196a:	60 96       	adiw	r28, 0x10	; 16
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <CTRL_mainMenu>:

void CTRL_mainMenu(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	60 97       	sbiw	r28, 0x10	; 16
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
	/*	send ready to HMI	*/
	UART_sendByte(CON_READY);
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>

	/*	get the user option	*/
	int opt=UART_recieveByte();
    1996:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	98 8b       	std	Y+16, r25	; 0x10
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a8 e4       	ldi	r26, 0x48	; 72
    19a8:	b2 e4       	ldi	r27, 0x42	; 66
    19aa:	8b 87       	std	Y+11, r24	; 0x0b
    19ac:	9c 87       	std	Y+12, r25	; 0x0c
    19ae:	ad 87       	std	Y+13, r26	; 0x0d
    19b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8f 83       	std	Y+7, r24	; 0x07
    19cc:	98 87       	std	Y+8, r25	; 0x08
    19ce:	a9 87       	std	Y+9, r26	; 0x09
    19d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <CTRL_mainMenu+0x78>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <CTRL_mainMenu+0xf6>
	else if (__tmp > 65535)
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <CTRL_mainMenu+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <CTRL_mainMenu+0xd8>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <CTRL_mainMenu+0xc6>
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <CTRL_mainMenu+0xba>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <CTRL_mainMenu+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <CTRL_mainMenu+0x102>
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(UART_DELAY);

	/*	check if user choose +,open door options	*/
	if(opt=='+')
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	8b 32       	cpi	r24, 0x2B	; 43
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	19 f4       	brne	.+6      	; 0x1a96 <CTRL_mainMenu+0x11a>
	{
		CTRL_openDoor();
    1a90:	0e 94 77 09 	call	0x12ee	; 0x12ee <CTRL_openDoor>
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <CTRL_mainMenu+0x11e>
	}
	/*	else user choose -,change password options	*/
	else
	{
		CTRL_changePassword();
    1a96:	0e 94 09 0c 	call	0x1812	; 0x1812 <CTRL_changePassword>
	}
}
    1a9a:	60 96       	adiw	r28, 0x10	; 16
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <main>:

#include "CTRL_Helpers.h"


int main(void)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	6d 97       	sbiw	r28, 0x1d	; 29
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config={
			Parity_Disable,
			Stop_Bits_1,
			Bits_8,
			BR_9600
	};
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	98 8b       	std	Y+16, r25	; 0x10
    1ac6:	8f 87       	std	Y+15, r24	; 0x0f
    1ac8:	e6 e7       	ldi	r30, 0x76	; 118
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	fa 8b       	std	Y+18, r31	; 0x12
    1ace:	e9 8b       	std	Y+17, r30	; 0x11
    1ad0:	f5 e0       	ldi	r31, 0x05	; 5
    1ad2:	fb 8b       	std	Y+19, r31	; 0x13
    1ad4:	e9 89       	ldd	r30, Y+17	; 0x11
    1ad6:	fa 89       	ldd	r31, Y+18	; 0x12
    1ad8:	00 80       	ld	r0, Z
    1ada:	89 89       	ldd	r24, Y+17	; 0x11
    1adc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	9a 8b       	std	Y+18, r25	; 0x12
    1ae2:	89 8b       	std	Y+17, r24	; 0x11
    1ae4:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ae6:	f8 89       	ldd	r31, Y+16	; 0x10
    1ae8:	00 82       	st	Z, r0
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	98 89       	ldd	r25, Y+16	; 0x10
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	98 8b       	std	Y+16, r25	; 0x10
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
    1af4:	9b 89       	ldd	r25, Y+19	; 0x13
    1af6:	91 50       	subi	r25, 0x01	; 1
    1af8:	9b 8b       	std	Y+19, r25	; 0x13
    1afa:	eb 89       	ldd	r30, Y+19	; 0x13
    1afc:	ee 23       	and	r30, r30
    1afe:	51 f7       	brne	.-44     	; 0x1ad4 <main+0x28>
	Timer1_ConfigType timer1_conf={
			0,
			23437,
			CLK_1024,
			COMPARE
	};
    1b00:	ce 01       	movw	r24, r28
    1b02:	06 96       	adiw	r24, 0x06	; 6
    1b04:	9d 8b       	std	Y+21, r25	; 0x15
    1b06:	8c 8b       	std	Y+20, r24	; 0x14
    1b08:	e0 e7       	ldi	r30, 0x70	; 112
    1b0a:	f1 e0       	ldi	r31, 0x01	; 1
    1b0c:	ff 8b       	std	Y+23, r31	; 0x17
    1b0e:	ee 8b       	std	Y+22, r30	; 0x16
    1b10:	f6 e0       	ldi	r31, 0x06	; 6
    1b12:	f8 8f       	std	Y+24, r31	; 0x18
    1b14:	ee 89       	ldd	r30, Y+22	; 0x16
    1b16:	ff 89       	ldd	r31, Y+23	; 0x17
    1b18:	00 80       	ld	r0, Z
    1b1a:	8e 89       	ldd	r24, Y+22	; 0x16
    1b1c:	9f 89       	ldd	r25, Y+23	; 0x17
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	9f 8b       	std	Y+23, r25	; 0x17
    1b22:	8e 8b       	std	Y+22, r24	; 0x16
    1b24:	ec 89       	ldd	r30, Y+20	; 0x14
    1b26:	fd 89       	ldd	r31, Y+21	; 0x15
    1b28:	00 82       	st	Z, r0
    1b2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	9d 8b       	std	Y+21, r25	; 0x15
    1b32:	8c 8b       	std	Y+20, r24	; 0x14
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	98 8f       	std	Y+24, r25	; 0x18
    1b3a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b3c:	ee 23       	and	r30, r30
    1b3e:	51 f7       	brne	.-44     	; 0x1b14 <main+0x68>
	 * */
	TWI_ConfigType twi_conf={
			TWI_SLAVE_ADDRESS,
			2,
			TWI_PreScaler_OFF
	};
    1b40:	ce 01       	movw	r24, r28
    1b42:	0c 96       	adiw	r24, 0x0c	; 12
    1b44:	9a 8f       	std	Y+26, r25	; 0x1a
    1b46:	89 8f       	std	Y+25, r24	; 0x19
    1b48:	ed e6       	ldi	r30, 0x6D	; 109
    1b4a:	f1 e0       	ldi	r31, 0x01	; 1
    1b4c:	fc 8f       	std	Y+28, r31	; 0x1c
    1b4e:	eb 8f       	std	Y+27, r30	; 0x1b
    1b50:	f3 e0       	ldi	r31, 0x03	; 3
    1b52:	fd 8f       	std	Y+29, r31	; 0x1d
    1b54:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1b56:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1b58:	00 80       	ld	r0, Z
    1b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	9c 8f       	std	Y+28, r25	; 0x1c
    1b62:	8b 8f       	std	Y+27, r24	; 0x1b
    1b64:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b66:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b68:	00 82       	st	Z, r0
    1b6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	9a 8f       	std	Y+26, r25	; 0x1a
    1b72:	89 8f       	std	Y+25, r24	; 0x19
    1b74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b76:	91 50       	subi	r25, 0x01	; 1
    1b78:	9d 8f       	std	Y+29, r25	; 0x1d
    1b7a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1b7c:	ee 23       	and	r30, r30
    1b7e:	51 f7       	brne	.-44     	; 0x1b54 <main+0xa8>

	/*	activate the global interrupts	*/
	sei();
    1b80:	78 94       	sei

	/*	modules initialization	*/
	UART_init(&UART_Config);
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 09 14 	call	0x2812	; 0x2812 <UART_init>
	Timer1_setCallBack(TIMER1_CallBack); /*SET CALL BACK FUNCTION FOR TIMER*/
    1b8a:	87 e1       	ldi	r24, 0x17	; 23
    1b8c:	97 e0       	ldi	r25, 0x07	; 7
    1b8e:	0e 94 6d 13 	call	0x26da	; 0x26da <Timer1_setCallBack>
	Timer1_init(&timer1_conf);
    1b92:	ce 01       	movw	r24, r28
    1b94:	06 96       	adiw	r24, 0x06	; 6
    1b96:	0e 94 02 13 	call	0x2604	; 0x2604 <Timer1_init>
	TWI_init(&twi_conf);
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0c 96       	adiw	r24, 0x0c	; 12
    1b9e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <TWI_init>
	Buzzer_init();
    1ba2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Buzzer_init>
	DcMotor_Init();
    1ba6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <DcMotor_Init>


	/*	Application Loop	*/
	CTRL_createPassword();
    1baa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <CTRL_createPassword>

	while(1)
	{
		CTRL_mainMenu();
    1bae:	0e 94 be 0c 	call	0x197c	; 0x197c <CTRL_mainMenu>
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <main+0x102>

00001bb4 <Buzzer_init>:
/*
 * Description :
 * Function responsible for initiate buzzer pin direction and its initial state
 */
void Buzzer_init()
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	65 e0       	ldi	r22, 0x05	; 5
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	65 e0       	ldi	r22, 0x05	; 5
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <Buzzer_on>:
/*
 * Description :
 * Function responsible for turn on buzzer
 */
void Buzzer_on(void)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	65 e0       	ldi	r22, 0x05	; 5
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <Buzzer_off>:
/*
 * Description :
 * Function responsible for turn off buzzer
 */
void Buzzer_off(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	65 e0       	ldi	r22, 0x05	; 5
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <DcMotor_Init>:
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */

void DcMotor_Init(void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	/*	Initialize timer 1 with configurations*/
	TIMER0_init(&TIMER_Conf);
    1c0e:	8a e6       	ldi	r24, 0x6A	; 106
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 1f 12 	call	0x243e	; 0x243e <TIMER0_init>
	/*
	 * set up the pins direction to be output
	 *
	 * */

	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN1_ID, PIN_OUTPUT);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN2_ID, PIN_OUTPUT);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>

	/*
	 * set up the direction of motor to be zero
	 *
	 * */
	DcMotor_Rotate(STOP,0);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <DcMotor_Rotate>:
/*
 * Description :
 * set the speed and direction of the motors
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <DcMotor_Rotate+0x6>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	6a 83       	std	Y+2, r22	; 0x02
	 * MOTOR PIN 2 -> 0010 & 0010 = 0010  .. shifted right one = 0001
	 * result =01
	 *
	 * */

	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, state & 0x01);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	98 2f       	mov	r25, r24
    1c4a:	91 70       	andi	r25, 0x01	; 1
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	49 2f       	mov	r20, r25
    1c52:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, (state & 0x02) >> 1);
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 70       	andi	r24, 0x02	; 2
    1c5e:	90 70       	andi	r25, 0x00	; 0
    1c60:	95 95       	asr	r25
    1c62:	87 95       	ror	r24
    1c64:	98 2f       	mov	r25, r24
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	49 2f       	mov	r20, r25
    1c6c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>

	/*PWM SIGNAL TO ROTATE MOTOR*/
	PWM_Timer0_Start(speed);
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	0e 94 61 12 	call	0x24c2	; 0x24c2 <PWM_Timer0_Start>
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <EEPROM_writeByte>:
/*******************************************************************************
 *                      Functions DEFINITIONS                                  *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <EEPROM_writeByte+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <EEPROM_writeByte+0x8>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c92:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c96:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <EEPROM_writeByte+0x22>
        return ERROR;
    1c9e:	1c 82       	std	Y+4, r1	; 0x04
    1ca0:	28 c0       	rjmp	.+80     	; 0x1cf2 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	80 70       	andi	r24, 0x00	; 0
    1ca8:	97 70       	andi	r25, 0x07	; 7
    1caa:	88 0f       	add	r24, r24
    1cac:	89 2f       	mov	r24, r25
    1cae:	88 1f       	adc	r24, r24
    1cb0:	99 0b       	sbc	r25, r25
    1cb2:	91 95       	neg	r25
    1cb4:	80 6a       	ori	r24, 0xA0	; 160
    1cb6:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1cba:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1cbe:	88 31       	cpi	r24, 0x18	; 24
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <EEPROM_writeByte+0x46>
        return ERROR;
    1cc2:	1c 82       	std	Y+4, r1	; 0x04
    1cc4:	16 c0       	rjmp	.+44     	; 0x1cf2 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ccc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1cd0:	88 32       	cpi	r24, 0x28	; 40
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <EEPROM_writeByte+0x58>
        return ERROR;
    1cd4:	1c 82       	std	Y+4, r1	; 0x04
    1cd6:	0d c0       	rjmp	.+26     	; 0x1cf2 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cde:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1ce2:	88 32       	cpi	r24, 0x28	; 40
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <EEPROM_writeByte+0x6a>
        return ERROR;
    1ce6:	1c 82       	std	Y+4, r1	; 0x04
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1cea:	0e 94 b2 13 	call	0x2764	; 0x2764 <TWI_stop>

    return SUCCESS;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	8c 83       	std	Y+4, r24	; 0x04
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <EEPROM_readByte+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <EEPROM_readByte+0x8>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	7c 83       	std	Y+4, r23	; 0x04
    1d16:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1d18:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d1c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <EEPROM_readByte+0x26>
        return ERROR;
    1d24:	1d 82       	std	Y+5, r1	; 0x05
    1d26:	44 c0       	rjmp	.+136    	; 0x1db0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	80 70       	andi	r24, 0x00	; 0
    1d2e:	97 70       	andi	r25, 0x07	; 7
    1d30:	88 0f       	add	r24, r24
    1d32:	89 2f       	mov	r24, r25
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 0b       	sbc	r25, r25
    1d38:	91 95       	neg	r25
    1d3a:	80 6a       	ori	r24, 0xA0	; 160
    1d3c:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d40:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1d44:	88 31       	cpi	r24, 0x18	; 24
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <EEPROM_readByte+0x4a>
        return ERROR;
    1d48:	1d 82       	std	Y+5, r1	; 0x05
    1d4a:	32 c0       	rjmp	.+100    	; 0x1db0 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d52:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1d56:	88 32       	cpi	r24, 0x28	; 40
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <EEPROM_readByte+0x5c>
        return ERROR;
    1d5a:	1d 82       	std	Y+5, r1	; 0x05
    1d5c:	29 c0       	rjmp	.+82     	; 0x1db0 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1d5e:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1d62:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1d66:	80 31       	cpi	r24, 0x10	; 16
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <EEPROM_readByte+0x6c>
        return ERROR;
    1d6a:	1d 82       	std	Y+5, r1	; 0x05
    1d6c:	21 c0       	rjmp	.+66     	; 0x1db0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	80 70       	andi	r24, 0x00	; 0
    1d74:	97 70       	andi	r25, 0x07	; 7
    1d76:	88 0f       	add	r24, r24
    1d78:	89 2f       	mov	r24, r25
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	99 0b       	sbc	r25, r25
    1d7e:	91 95       	neg	r25
    1d80:	81 6a       	ori	r24, 0xA1	; 161
    1d82:	0e 94 bd 13 	call	0x277a	; 0x277a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d86:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1d8a:	80 34       	cpi	r24, 0x40	; 64
    1d8c:	11 f0       	breq	.+4      	; 0x1d92 <EEPROM_readByte+0x90>
        return ERROR;
    1d8e:	1d 82       	std	Y+5, r1	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1d92:	0e 94 e7 13 	call	0x27ce	; 0x27ce <TWI_readByteWithNACK>
    1d96:	eb 81       	ldd	r30, Y+3	; 0x03
    1d98:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d9c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <TWI_getStatus>
    1da0:	88 35       	cpi	r24, 0x58	; 88
    1da2:	11 f0       	breq	.+4      	; 0x1da8 <EEPROM_readByte+0xa6>
        return ERROR;
    1da4:	1d 82       	std	Y+5, r1	; 0x05
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1da8:	0e 94 b2 13 	call	0x2764	; 0x2764 <TWI_stop>

    return SUCCESS;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <GPIO_setupPinDirection+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <GPIO_setupPinDirection+0x8>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	6a 83       	std	Y+2, r22	; 0x02
    1dd4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	88 30       	cpi	r24, 0x08	; 8
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <GPIO_setupPinDirection+0x1c>
    1ddc:	d5 c0       	rjmp	.+426    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <GPIO_setupPinDirection+0x24>
    1de4:	d1 c0       	rjmp	.+418    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <GPIO_setupPinDirection+0x3a>
    1dfa:	43 c0       	rjmp	.+134    	; 0x1e82 <GPIO_setupPinDirection+0xc0>
    1dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <GPIO_setupPinDirection+0x4e>
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	71 f0       	breq	.+28     	; 0x1e2a <GPIO_setupPinDirection+0x68>
    1e0e:	bc c0       	rjmp	.+376    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <GPIO_setupPinDirection+0x5a>
    1e1a:	5f c0       	rjmp	.+190    	; 0x1eda <GPIO_setupPinDirection+0x118>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <GPIO_setupPinDirection+0x66>
    1e26:	85 c0       	rjmp	.+266    	; 0x1f32 <GPIO_setupPinDirection+0x170>
    1e28:	af c0       	rjmp	.+350    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	a1 f4       	brne	.+40     	; 0x1e58 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e30:	aa e3       	ldi	r26, 0x3A	; 58
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ea e3       	ldi	r30, 0x3A	; 58
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <GPIO_setupPinDirection+0x8c>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <GPIO_setupPinDirection+0x88>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	98 c0       	rjmp	.+304    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e58:	aa e3       	ldi	r26, 0x3A	; 58
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ea e3       	ldi	r30, 0x3A	; 58
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_setupPinDirection+0xb4>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_setupPinDirection+0xb0>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	83 c0       	rjmp	.+262    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	a1 f4       	brne	.+40     	; 0x1eb0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e88:	a7 e3       	ldi	r26, 0x37	; 55
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e7 e3       	ldi	r30, 0x37	; 55
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <GPIO_setupPinDirection+0xe4>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <GPIO_setupPinDirection+0xe0>
    1eaa:	84 2b       	or	r24, r20
    1eac:	8c 93       	st	X, r24
    1eae:	6c c0       	rjmp	.+216    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1eb0:	a7 e3       	ldi	r26, 0x37	; 55
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e7 e3       	ldi	r30, 0x37	; 55
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <GPIO_setupPinDirection+0x10c>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <GPIO_setupPinDirection+0x108>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	57 c0       	rjmp	.+174    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	a1 f4       	brne	.+40     	; 0x1f08 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ee0:	a4 e3       	ldi	r26, 0x34	; 52
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e4 e3       	ldi	r30, 0x34	; 52
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	02 2e       	mov	r0, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <GPIO_setupPinDirection+0x13c>
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	0a 94       	dec	r0
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <GPIO_setupPinDirection+0x138>
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	40 c0       	rjmp	.+128    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f08:	a4 e3       	ldi	r26, 0x34	; 52
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e4 e3       	ldi	r30, 0x34	; 52
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <GPIO_setupPinDirection+0x164>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <GPIO_setupPinDirection+0x160>
    1f2a:	80 95       	com	r24
    1f2c:	84 23       	and	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	2b c0       	rjmp	.+86     	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	a1 f4       	brne	.+40     	; 0x1f60 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f38:	a1 e3       	ldi	r26, 0x31	; 49
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e1 e3       	ldi	r30, 0x31	; 49
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <GPIO_setupPinDirection+0x194>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <GPIO_setupPinDirection+0x190>
    1f5a:	84 2b       	or	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f60:	a1 e3       	ldi	r26, 0x31	; 49
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e1 e3       	ldi	r30, 0x31	; 49
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <GPIO_setupPinDirection+0x1bc>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <GPIO_setupPinDirection+0x1b8>
    1f82:	80 95       	com	r24
    1f84:	84 23       	and	r24, r20
    1f86:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <GPIO_writePin+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <GPIO_writePin+0x8>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
    1faa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	88 30       	cpi	r24, 0x08	; 8
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <GPIO_writePin+0x1c>
    1fb2:	d5 c0       	rjmp	.+426    	; 0x215e <GPIO_writePin+0x1c6>
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <GPIO_writePin+0x24>
    1fba:	d1 c0       	rjmp	.+418    	; 0x215e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3d 83       	std	Y+5, r19	; 0x05
    1fc4:	2c 83       	std	Y+4, r18	; 0x04
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <GPIO_writePin+0x3a>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <GPIO_writePin+0xc0>
    1fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <GPIO_writePin+0x4e>
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <GPIO_writePin+0x68>
    1fe4:	bc c0       	rjmp	.+376    	; 0x215e <GPIO_writePin+0x1c6>
    1fe6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <GPIO_writePin+0x5a>
    1ff0:	5f c0       	rjmp	.+190    	; 0x20b0 <GPIO_writePin+0x118>
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <GPIO_writePin+0x66>
    1ffc:	85 c0       	rjmp	.+266    	; 0x2108 <GPIO_writePin+0x170>
    1ffe:	af c0       	rjmp	.+350    	; 0x215e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	a1 f4       	brne	.+40     	; 0x202e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <GPIO_writePin+0x8c>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <GPIO_writePin+0x88>
    2028:	84 2b       	or	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	98 c0       	rjmp	.+304    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    202e:	ab e3       	ldi	r26, 0x3B	; 59
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	eb e3       	ldi	r30, 0x3B	; 59
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_writePin+0xb4>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_writePin+0xb0>
    2050:	80 95       	com	r24
    2052:	84 23       	and	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	83 c0       	rjmp	.+262    	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	a1 f4       	brne	.+40     	; 0x2086 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    205e:	a8 e3       	ldi	r26, 0x38	; 56
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e8 e3       	ldi	r30, 0x38	; 56
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	02 2e       	mov	r0, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <GPIO_writePin+0xe4>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <GPIO_writePin+0xe0>
    2080:	84 2b       	or	r24, r20
    2082:	8c 93       	st	X, r24
    2084:	6c c0       	rjmp	.+216    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2086:	a8 e3       	ldi	r26, 0x38	; 56
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <GPIO_writePin+0x10c>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <GPIO_writePin+0x108>
    20a8:	80 95       	com	r24
    20aa:	84 23       	and	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	57 c0       	rjmp	.+174    	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	a1 f4       	brne	.+40     	; 0x20de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    20b6:	a5 e3       	ldi	r26, 0x35	; 53
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e5 e3       	ldi	r30, 0x35	; 53
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	48 2f       	mov	r20, r24
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 2e       	mov	r0, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <GPIO_writePin+0x13c>
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	0a 94       	dec	r0
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <GPIO_writePin+0x138>
    20d8:	84 2b       	or	r24, r20
    20da:	8c 93       	st	X, r24
    20dc:	40 c0       	rjmp	.+128    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    20de:	a5 e3       	ldi	r26, 0x35	; 53
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e3       	ldi	r30, 0x35	; 53
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_writePin+0x164>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_writePin+0x160>
    2100:	80 95       	com	r24
    2102:	84 23       	and	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	2b c0       	rjmp	.+86     	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	a1 f4       	brne	.+40     	; 0x2136 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    210e:	a2 e3       	ldi	r26, 0x32	; 50
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e2 e3       	ldi	r30, 0x32	; 50
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <GPIO_writePin+0x194>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <GPIO_writePin+0x190>
    2130:	84 2b       	or	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	14 c0       	rjmp	.+40     	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2136:	a2 e3       	ldi	r26, 0x32	; 50
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e2 e3       	ldi	r30, 0x32	; 50
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <GPIO_writePin+0x1bc>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <GPIO_writePin+0x1b8>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <GPIO_readPin+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <GPIO_readPin+0x8>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2180:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	88 30       	cpi	r24, 0x08	; 8
    2186:	08 f0       	brcs	.+2      	; 0x218a <GPIO_readPin+0x1c>
    2188:	84 c0       	rjmp	.+264    	; 0x2292 <GPIO_readPin+0x124>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	08 f0       	brcs	.+2      	; 0x2192 <GPIO_readPin+0x24>
    2190:	80 c0       	rjmp	.+256    	; 0x2292 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	3d 83       	std	Y+5, r19	; 0x05
    219a:	2c 83       	std	Y+4, r18	; 0x04
    219c:	4c 81       	ldd	r20, Y+4	; 0x04
    219e:	5d 81       	ldd	r21, Y+5	; 0x05
    21a0:	41 30       	cpi	r20, 0x01	; 1
    21a2:	51 05       	cpc	r21, r1
    21a4:	79 f1       	breq	.+94     	; 0x2204 <GPIO_readPin+0x96>
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	91 05       	cpc	r25, r1
    21ae:	34 f4       	brge	.+12     	; 0x21bc <GPIO_readPin+0x4e>
    21b0:	2c 81       	ldd	r18, Y+4	; 0x04
    21b2:	3d 81       	ldd	r19, Y+5	; 0x05
    21b4:	21 15       	cp	r18, r1
    21b6:	31 05       	cpc	r19, r1
    21b8:	69 f0       	breq	.+26     	; 0x21d4 <GPIO_readPin+0x66>
    21ba:	6b c0       	rjmp	.+214    	; 0x2292 <GPIO_readPin+0x124>
    21bc:	4c 81       	ldd	r20, Y+4	; 0x04
    21be:	5d 81       	ldd	r21, Y+5	; 0x05
    21c0:	42 30       	cpi	r20, 0x02	; 2
    21c2:	51 05       	cpc	r21, r1
    21c4:	b9 f1       	breq	.+110    	; 0x2234 <GPIO_readPin+0xc6>
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	83 30       	cpi	r24, 0x03	; 3
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <GPIO_readPin+0x64>
    21d0:	49 c0       	rjmp	.+146    	; 0x2264 <GPIO_readPin+0xf6>
    21d2:	5f c0       	rjmp	.+190    	; 0x2292 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    21d4:	e9 e3       	ldi	r30, 0x39	; 57
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a9 01       	movw	r20, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <GPIO_readPin+0x7e>
    21e8:	55 95       	asr	r21
    21ea:	47 95       	ror	r20
    21ec:	8a 95       	dec	r24
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <GPIO_readPin+0x7a>
    21f0:	ca 01       	movw	r24, r20
    21f2:	81 70       	andi	r24, 0x01	; 1
    21f4:	90 70       	andi	r25, 0x00	; 0
    21f6:	88 23       	and	r24, r24
    21f8:	19 f0       	breq	.+6      	; 0x2200 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	49 c0       	rjmp	.+146    	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	47 c0       	rjmp	.+142    	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2204:	e6 e3       	ldi	r30, 0x36	; 54
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <GPIO_readPin+0xae>
    2218:	55 95       	asr	r21
    221a:	47 95       	ror	r20
    221c:	8a 95       	dec	r24
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <GPIO_readPin+0xaa>
    2220:	ca 01       	movw	r24, r20
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	88 23       	and	r24, r24
    2228:	19 f0       	breq	.+6      	; 0x2230 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	31 c0       	rjmp	.+98     	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2230:	19 82       	std	Y+1, r1	; 0x01
    2232:	2f c0       	rjmp	.+94     	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2234:	e3 e3       	ldi	r30, 0x33	; 51
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <GPIO_readPin+0xde>
    2248:	55 95       	asr	r21
    224a:	47 95       	ror	r20
    224c:	8a 95       	dec	r24
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <GPIO_readPin+0xda>
    2250:	ca 01       	movw	r24, r20
    2252:	81 70       	andi	r24, 0x01	; 1
    2254:	90 70       	andi	r25, 0x00	; 0
    2256:	88 23       	and	r24, r24
    2258:	19 f0       	breq	.+6      	; 0x2260 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	19 c0       	rjmp	.+50     	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2260:	19 82       	std	Y+1, r1	; 0x01
    2262:	17 c0       	rjmp	.+46     	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2264:	e0 e3       	ldi	r30, 0x30	; 48
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <GPIO_readPin+0x10e>
    2278:	55 95       	asr	r21
    227a:	47 95       	ror	r20
    227c:	8a 95       	dec	r24
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <GPIO_readPin+0x10a>
    2280:	ca 01       	movw	r24, r20
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	90 70       	andi	r25, 0x00	; 0
    2286:	88 23       	and	r24, r24
    2288:	19 f0       	breq	.+6      	; 0x2290 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2290:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_setupPortDirection+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <GPIO_setupPortDirection+0x8>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	84 30       	cpi	r24, 0x04	; 4
    22b8:	90 f5       	brcc	.+100    	; 0x231e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	3c 83       	std	Y+4, r19	; 0x04
    22c2:	2b 83       	std	Y+3, r18	; 0x03
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	d1 f0       	breq	.+52     	; 0x2302 <GPIO_setupPortDirection+0x5e>
    22ce:	2b 81       	ldd	r18, Y+3	; 0x03
    22d0:	3c 81       	ldd	r19, Y+4	; 0x04
    22d2:	22 30       	cpi	r18, 0x02	; 2
    22d4:	31 05       	cpc	r19, r1
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <GPIO_setupPortDirection+0x3e>
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	61 f0       	breq	.+24     	; 0x22f8 <GPIO_setupPortDirection+0x54>
    22e0:	1e c0       	rjmp	.+60     	; 0x231e <GPIO_setupPortDirection+0x7a>
    22e2:	2b 81       	ldd	r18, Y+3	; 0x03
    22e4:	3c 81       	ldd	r19, Y+4	; 0x04
    22e6:	22 30       	cpi	r18, 0x02	; 2
    22e8:	31 05       	cpc	r19, r1
    22ea:	81 f0       	breq	.+32     	; 0x230c <GPIO_setupPortDirection+0x68>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	91 05       	cpc	r25, r1
    22f4:	81 f0       	breq	.+32     	; 0x2316 <GPIO_setupPortDirection+0x72>
    22f6:	13 c0       	rjmp	.+38     	; 0x231e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22f8:	ea e3       	ldi	r30, 0x3A	; 58
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	80 83       	st	Z, r24
    2300:	0e c0       	rjmp	.+28     	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2302:	e7 e3       	ldi	r30, 0x37	; 55
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	80 83       	st	Z, r24
    230a:	09 c0       	rjmp	.+18     	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    230c:	e4 e3       	ldi	r30, 0x34	; 52
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	80 83       	st	Z, r24
    2314:	04 c0       	rjmp	.+8      	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2316:	e1 e3       	ldi	r30, 0x31	; 49
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	80 83       	st	Z, r24
			break;
		}
	}
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <GPIO_writePort+0x6>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <GPIO_writePort+0x8>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	84 30       	cpi	r24, 0x04	; 4
    2340:	90 f5       	brcc	.+100    	; 0x23a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3c 83       	std	Y+4, r19	; 0x04
    234a:	2b 83       	std	Y+3, r18	; 0x03
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	d1 f0       	breq	.+52     	; 0x238a <GPIO_writePort+0x5e>
    2356:	2b 81       	ldd	r18, Y+3	; 0x03
    2358:	3c 81       	ldd	r19, Y+4	; 0x04
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <GPIO_writePort+0x3e>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <GPIO_writePort+0x54>
    2368:	1e c0       	rjmp	.+60     	; 0x23a6 <GPIO_writePort+0x7a>
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	3c 81       	ldd	r19, Y+4	; 0x04
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	81 f0       	breq	.+32     	; 0x2394 <GPIO_writePort+0x68>
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	81 f0       	breq	.+32     	; 0x239e <GPIO_writePort+0x72>
    237e:	13 c0       	rjmp	.+38     	; 0x23a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2380:	eb e3       	ldi	r30, 0x3B	; 59
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	80 83       	st	Z, r24
    2388:	0e c0       	rjmp	.+28     	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    238a:	e8 e3       	ldi	r30, 0x38	; 56
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	80 83       	st	Z, r24
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2394:	e5 e3       	ldi	r30, 0x35	; 53
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	80 83       	st	Z, r24
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    239e:	e2 e3       	ldi	r30, 0x32	; 50
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <GPIO_readPort+0x6>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <GPIO_readPort+0x8>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    23c2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	84 30       	cpi	r24, 0x04	; 4
    23c8:	90 f5       	brcc	.+100    	; 0x242e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	3c 83       	std	Y+4, r19	; 0x04
    23d2:	2b 83       	std	Y+3, r18	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	91 05       	cpc	r25, r1
    23dc:	d1 f0       	breq	.+52     	; 0x2412 <GPIO_readPort+0x5e>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <GPIO_readPort+0x3e>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	61 f0       	breq	.+24     	; 0x2408 <GPIO_readPort+0x54>
    23f0:	1e c0       	rjmp	.+60     	; 0x242e <GPIO_readPort+0x7a>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	31 05       	cpc	r19, r1
    23fa:	81 f0       	breq	.+32     	; 0x241c <GPIO_readPort+0x68>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	91 05       	cpc	r25, r1
    2404:	81 f0       	breq	.+32     	; 0x2426 <GPIO_readPort+0x72>
    2406:	13 c0       	rjmp	.+38     	; 0x242e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2408:	e9 e3       	ldi	r30, 0x39	; 57
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	0e c0       	rjmp	.+28     	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2412:	e6 e3       	ldi	r30, 0x36	; 54
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	09 c0       	rjmp	.+18     	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    241c:	e3 e3       	ldi	r30, 0x33	; 51
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	04 c0       	rjmp	.+8      	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2426:	e0 e3       	ldi	r30, 0x30	; 48
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(TIMER0_ConfigType* Config_Ptr)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <TIMER0_init+0x6>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
	/*INITIALE VALUE IS ZERO*/
	TCNT0=0;
    244c:	e2 e5       	ldi	r30, 0x52	; 82
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	10 82       	st	Z, r1

	/*CONFIG. MODE OF OPERATION
	 * BITS: 6 / 3
	 * */
	TCCR0 = (TCCR0 & 0XB7) | (Config_Ptr->oper_mode & 0X48);
    2452:	a3 e5       	ldi	r26, 0x53	; 83
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e3 e5       	ldi	r30, 0x53	; 83
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	98 2f       	mov	r25, r24
    245e:	97 7b       	andi	r25, 0xB7	; 183
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	80 81       	ld	r24, Z
    2466:	88 74       	andi	r24, 0x48	; 72
    2468:	89 2b       	or	r24, r25
    246a:	8c 93       	st	X, r24

	/*CINFIG. PWM MODE
	 * SHIFT BY 3 TO BE AT BITS COM00 & COM01
	 * */
	TCCR0 = (TCCR0 & 0XCF) | (Config_Ptr->pwm_mode<<4);
    246c:	a3 e5       	ldi	r26, 0x53	; 83
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e3 e5       	ldi	r30, 0x53	; 83
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	28 2f       	mov	r18, r24
    2478:	2f 7c       	andi	r18, 0xCF	; 207
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	81 81       	ldd	r24, Z+1	; 0x01
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	82 95       	swap	r24
    2486:	92 95       	swap	r25
    2488:	90 7f       	andi	r25, 0xF0	; 240
    248a:	98 27       	eor	r25, r24
    248c:	80 7f       	andi	r24, 0xF0	; 240
    248e:	98 27       	eor	r25, r24
    2490:	82 2b       	or	r24, r18
    2492:	8c 93       	st	X, r24

	/*CONFIG. CLK
	 * FIRST 3 BITS
	 * */
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    2494:	a3 e5       	ldi	r26, 0x53	; 83
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e3 e5       	ldi	r30, 0x53	; 83
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	98 2f       	mov	r25, r24
    24a0:	98 7f       	andi	r25, 0xF8	; 248
    24a2:	e9 81       	ldd	r30, Y+1	; 0x01
    24a4:	fa 81       	ldd	r31, Y+2	; 0x02
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	87 70       	andi	r24, 0x07	; 7
    24aa:	89 2b       	or	r24, r25
    24ac:	8c 93       	st	X, r24

	/*MAKE PB3/OC0 AS OUTPUT PIN*/
	GPIO_setupPinDirection(TIMER0_PWM_SIGNAL_PORT_ID, TIMER0_PWM_SIGNAL_PIN_ID, PIN_OUTPUT);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	63 e0       	ldi	r22, 0x03	; 3
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
}
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)
{
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	89 83       	std	Y+1, r24	; 0x01
	OCR0=(uint8)(((float)((float)duty_cycle/100))*TIMER0_OVERFLOW_VALUE);
    24d2:	0c e5       	ldi	r16, 0x5C	; 92
    24d4:	10 e0       	ldi	r17, 0x00	; 0
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e0       	ldi	r26, 0x00	; 0
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	48 ec       	ldi	r20, 0xC8	; 200
    24f6:	52 e4       	ldi	r21, 0x42	; 66
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	f8 01       	movw	r30, r16
    2522:	80 83       	st	Z, r24
}
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <TIMER0_deinit>:

void TIMER0_deinit(void)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2538:	e3 e5       	ldi	r30, 0x53	; 83
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	10 82       	st	Z, r1
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <__vector_7>:
 *******************************************************************************/


/* Timer 1 Compare Mode Interrupt ISR */
ISR(TIMER1_COMPA_vect)
{
    2544:	1f 92       	push	r1
    2546:	0f 92       	push	r0
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	0f 92       	push	r0
    254c:	11 24       	eor	r1, r1
    254e:	2f 93       	push	r18
    2550:	3f 93       	push	r19
    2552:	4f 93       	push	r20
    2554:	5f 93       	push	r21
    2556:	6f 93       	push	r22
    2558:	7f 93       	push	r23
    255a:	8f 93       	push	r24
    255c:	9f 93       	push	r25
    255e:	af 93       	push	r26
    2560:	bf 93       	push	r27
    2562:	ef 93       	push	r30
    2564:	ff 93       	push	r31
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
	/*Increment the ticks of the program*/
	if(g_callBackPtr != NULL_PTR){
    256e:	80 91 80 01 	lds	r24, 0x0180
    2572:	90 91 81 01 	lds	r25, 0x0181
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	29 f0       	breq	.+10     	; 0x2584 <__vector_7+0x40>
		(*g_callBackPtr)();
    257a:	e0 91 80 01 	lds	r30, 0x0180
    257e:	f0 91 81 01 	lds	r31, 0x0181
    2582:	09 95       	icall
	}
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	bf 91       	pop	r27
    258e:	af 91       	pop	r26
    2590:	9f 91       	pop	r25
    2592:	8f 91       	pop	r24
    2594:	7f 91       	pop	r23
    2596:	6f 91       	pop	r22
    2598:	5f 91       	pop	r21
    259a:	4f 91       	pop	r20
    259c:	3f 91       	pop	r19
    259e:	2f 91       	pop	r18
    25a0:	0f 90       	pop	r0
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	0f 90       	pop	r0
    25a6:	1f 90       	pop	r1
    25a8:	18 95       	reti

000025aa <__vector_9>:


/* Timer 1 Normal Mode Interrupt ISR */
ISR(TIMER1_OVF_vect)
{
    25aa:	1f 92       	push	r1
    25ac:	0f 92       	push	r0
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	0f 92       	push	r0
    25b2:	11 24       	eor	r1, r1
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	8f 93       	push	r24
    25c2:	9f 93       	push	r25
    25c4:	af 93       	push	r26
    25c6:	bf 93       	push	r27
    25c8:	ef 93       	push	r30
    25ca:	ff 93       	push	r31
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62

	/*Increment the ticks of the program*/
	(*g_callBackPtr)();
    25d4:	e0 91 80 01 	lds	r30, 0x0180
    25d8:	f0 91 81 01 	lds	r31, 0x0181
    25dc:	09 95       	icall

}
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	ff 91       	pop	r31
    25e4:	ef 91       	pop	r30
    25e6:	bf 91       	pop	r27
    25e8:	af 91       	pop	r26
    25ea:	9f 91       	pop	r25
    25ec:	8f 91       	pop	r24
    25ee:	7f 91       	pop	r23
    25f0:	6f 91       	pop	r22
    25f2:	5f 91       	pop	r21
    25f4:	4f 91       	pop	r20
    25f6:	3f 91       	pop	r19
    25f8:	2f 91       	pop	r18
    25fa:	0f 90       	pop	r0
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	0f 90       	pop	r0
    2600:	1f 90       	pop	r1
    2602:	18 95       	reti

00002604 <Timer1_init>:


/*	Timer 1 Initialization Function	*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <Timer1_init+0x6>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	/* initial value from the configuration pointer*/
	TCNT1=Config_Ptr->initial_value;
    2612:	ac e4       	ldi	r26, 0x4C	; 76
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	9c 93       	st	X, r25
    2622:	8e 93       	st	-X, r24


	if(Config_Ptr->mode==COMPARE)
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	85 81       	ldd	r24, Z+5	; 0x05
    262a:	84 30       	cpi	r24, 0x04	; 4
    262c:	51 f4       	brne	.+20     	; 0x2642 <Timer1_init+0x3e>
	{
		/*	if the mode is compare mode, then put the compare value to one
		 *  coming form the configuration pointer */
		OCR1A=Config_Ptr->compare_value;
    262e:	ea e4       	ldi	r30, 0x4A	; 74
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	a9 81       	ldd	r26, Y+1	; 0x01
    2634:	ba 81       	ldd	r27, Y+2	; 0x02
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	8d 91       	ld	r24, X+
    263a:	9c 91       	ld	r25, X
    263c:	13 97       	sbiw	r26, 0x03	; 3
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
	}

	/*	Module (Timer 1) Interrupt enable	*/
	TIMSK |= (1<<OCIE1A);
    2642:	a9 e5       	ldi	r26, 0x59	; 89
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e9 e5       	ldi	r30, 0x59	; 89
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	80 61       	ori	r24, 0x10	; 16
    264e:	8c 93       	st	X, r24

	/*	select mode */
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
    2650:	af e4       	ldi	r26, 0x4F	; 79
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ef e4       	ldi	r30, 0x4F	; 79
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	98 2f       	mov	r25, r24
    265c:	9c 7f       	andi	r25, 0xFC	; 252
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	85 81       	ldd	r24, Z+5	; 0x05
    2664:	83 70       	andi	r24, 0x03	; 3
    2666:	89 2b       	or	r24, r25
    2668:	88 60       	ori	r24, 0x08	; 8
    266a:	8c 93       	st	X, r24

	/* WGM12:
	 * NORMAL = 0
	 * COMPARE =1
	 * */
	TCCR1B = ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07)) | ((TCCR1B & 0xE7) |
    266c:	ae e4       	ldi	r26, 0x4E	; 78
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	ee e4       	ldi	r30, 0x4E	; 78
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	98 2f       	mov	r25, r24
    2678:	98 7f       	andi	r25, 0xF8	; 248
    267a:	e9 81       	ldd	r30, Y+1	; 0x01
    267c:	fa 81       	ldd	r31, Y+2	; 0x02
    267e:	84 81       	ldd	r24, Z+4	; 0x04
    2680:	87 70       	andi	r24, 0x07	; 7
    2682:	39 2f       	mov	r19, r25
    2684:	38 2b       	or	r19, r24
    2686:	ee e4       	ldi	r30, 0x4E	; 78
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	28 2f       	mov	r18, r24
    268e:	27 7e       	andi	r18, 0xE7	; 231
    2690:	e9 81       	ldd	r30, Y+1	; 0x01
    2692:	fa 81       	ldd	r31, Y+2	; 0x02
    2694:	85 81       	ldd	r24, Z+5	; 0x05
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	8c 70       	andi	r24, 0x0C	; 12
    269c:	90 70       	andi	r25, 0x00	; 0
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	82 2b       	or	r24, r18
    26a4:	83 2b       	or	r24, r19
    26a6:	8c 93       	st	X, r24
			((Config_Ptr->mode & 0x0C)<<1));
}
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <Timer1_deInit>:


/*	Timer 1 Disable Function	*/
void Timer1_deInit(void)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
	/*	disable the timer by turning off the clock	*/
	TCCR1A=0;
    26ba:	ef e4       	ldi	r30, 0x4F	; 79
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	10 82       	st	Z, r1
	TCCR1B=0;
    26c0:	ee e4       	ldi	r30, 0x4E	; 78
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A);
    26c6:	a9 e5       	ldi	r26, 0x59	; 89
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e5       	ldi	r30, 0x59	; 89
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	8f 7e       	andi	r24, 0xEF	; 239
    26d2:	8c 93       	st	X, r24
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <Timer1_setCallBack>:


/*	Function to set the Call Back function address for timer 1	*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <Timer1_setCallBack+0x6>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the function in a variable */
	g_callBackPtr = a_ptr;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	90 93 81 01 	sts	0x0181, r25
    26f0:	80 93 80 01 	sts	0x0180, r24
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <TWI_init>:
/*******************************************************************************
*                    	  Functions Definitions                                *
********************************************************************************/

void TWI_init(TWI_ConfigType* TWI_Config_Ptr)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <TWI_init+0x6>
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Put TWI Configuration
	 * */
	TWSR=TWI_Config_Ptr->prescaler;
    270c:	a1 e2       	ldi	r26, 0x21	; 33
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e9 81       	ldd	r30, Y+1	; 0x01
    2712:	fa 81       	ldd	r31, Y+2	; 0x02
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	8c 93       	st	X, r24
	TWBR=TWI_Config_Ptr->bit_rate;
    2718:	a0 e2       	ldi	r26, 0x20	; 32
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e9 81       	ldd	r30, Y+1	; 0x01
    271e:	fa 81       	ldd	r31, Y+2	; 0x02
    2720:	81 81       	ldd	r24, Z+1	; 0x01
    2722:	8c 93       	st	X, r24
	/*
	 * SLAVE ADDRESS
	 * */
	TWAR=(TWI_Config_Ptr->address)<<1;
    2724:	a2 e2       	ldi	r26, 0x22	; 34
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	80 81       	ld	r24, Z
    272e:	88 0f       	add	r24, r24
    2730:	8c 93       	st	X, r24

	/*
	 * ENABLE TWI
	 * */
	TWCR=(TWEN<<1);
    2732:	e6 e5       	ldi	r30, 0x56	; 86
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	80 83       	st	Z, r24
}
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <TWI_start>:

void TWI_start(void)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    274c:	e6 e5       	ldi	r30, 0x56	; 86
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	84 ea       	ldi	r24, 0xA4	; 164
    2752:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2754:	e6 e5       	ldi	r30, 0x56	; 86
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	88 23       	and	r24, r24
    275c:	dc f7       	brge	.-10     	; 0x2754 <TWI_start+0x10>
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <TWI_stop>:

void TWI_stop(void)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    276c:	e6 e5       	ldi	r30, 0x56	; 86
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	84 e9       	ldi	r24, 0x94	; 148
    2772:	80 83       	st	Z, r24
    /* NO NEED FOR POLLING TO CHECK IF STOP IS SENT AS IT IS END OF FRAME AND TO LEAVE BUS IMEDIATLY*/
}
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2786:	e3 e2       	ldi	r30, 0x23	; 35
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    278e:	e6 e5       	ldi	r30, 0x56	; 86
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	84 e8       	ldi	r24, 0x84	; 132
    2794:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2796:	e6 e5       	ldi	r30, 0x56	; 86
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 23       	and	r24, r24
    279e:	dc f7       	brge	.-10     	; 0x2796 <TWI_writeByte+0x1c>
}
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    27b0:	e6 e5       	ldi	r30, 0x56	; 86
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	84 ec       	ldi	r24, 0xC4	; 196
    27b6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27b8:	e6 e5       	ldi	r30, 0x56	; 86
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 23       	and	r24, r24
    27c0:	dc f7       	brge	.-10     	; 0x27b8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    27c2:	e3 e2       	ldi	r30, 0x23	; 35
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
}
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 * TWEA =0 NOACK
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    27d6:	e6 e5       	ldi	r30, 0x56	; 86
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	84 e8       	ldi	r24, 0x84	; 132
    27dc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27de:	e6 e5       	ldi	r30, 0x56	; 86
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	88 23       	and	r24, r24
    27e6:	dc f7       	brge	.-10     	; 0x27de <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    27e8:	e3 e2       	ldi	r30, 0x23	; 35
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <TWI_getStatus>:
/*
 * DESC: RETURN STATUS REG FOR I2C
 * 		 HELPS TO DETECT IF OPERATION (START,STOP,ACK,TRANS,RECEIVE) HEPPENS CORRECTLY OR NOT
 * */
uint8 TWI_getStatus(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	0f 92       	push	r0
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	/*GET MOST 5 BITS (STATUS) IN TWSR REG.*/
	uint8 stat=(TWSR&0XF8);
    27fe:	e1 e2       	ldi	r30, 0x21	; 33
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	88 7f       	andi	r24, 0xF8	; 248
    2806:	89 83       	std	Y+1, r24	; 0x01
	return stat;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
}
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <UART_init>:
   * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
   * 2. Enable the UART.
   * 3. Setup the UART baud rate.
   */
void UART_init(UART_ConfigType* UART_Config)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <UART_init+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <UART_init+0x8>
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2822:	1a 82       	std	Y+2, r1	; 0x02
    2824:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2826:	eb e2       	ldi	r30, 0x2B	; 43
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    282e:	ea e2       	ldi	r30, 0x2A	; 42
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	88 e1       	ldi	r24, 0x18	; 24
    2834:	80 83       	st	Z, r24
	 * USBS    = stop bit CONFIG.
	 * UCSZ1:0 = bit data mode (5,6,7,8)  *******with UCSZ2 in UCSRB******
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/* Set Bits number 3 in The Data size number in The bit UCSZ2 in Register UCSRB */
		UCSRB = (UCSRB & 0xFB) | (UART_Config->data_bits & 0x04);
    2836:	aa e2       	ldi	r26, 0x2A	; 42
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ea e2       	ldi	r30, 0x2A	; 42
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	98 2f       	mov	r25, r24
    2842:	9b 7f       	andi	r25, 0xFB	; 251
    2844:	eb 81       	ldd	r30, Y+3	; 0x03
    2846:	fc 81       	ldd	r31, Y+4	; 0x04
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	84 70       	andi	r24, 0x04	; 4
    284c:	89 2b       	or	r24, r25
    284e:	8c 93       	st	X, r24

		/* To Write in Register UCSRC, Firstly we need to make URSEL with LOGIC HIGH */
		/* But the first 2 bits in Data size in the bits UCSZ1 and UCSZ0 to Specify the size of Data */
		UCSRC = (1 << URSEL) | (UART_Config->data_bits << 1);
    2850:	a0 e4       	ldi	r26, 0x40	; 64
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	eb 81       	ldd	r30, Y+3	; 0x03
    2856:	fc 81       	ldd	r31, Y+4	; 0x04
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	8c 93       	st	X, r24

		/* Specify Parity bit Mode(Even/ Odd / Disabled) in Data frame */
		UCSRC = (UCSRC & 0xCF) | (UART_Config->parity << 4);
    2866:	a0 e4       	ldi	r26, 0x40	; 64
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e0 e4       	ldi	r30, 0x40	; 64
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	28 2f       	mov	r18, r24
    2872:	2f 7c       	andi	r18, 0xCF	; 207
    2874:	eb 81       	ldd	r30, Y+3	; 0x03
    2876:	fc 81       	ldd	r31, Y+4	; 0x04
    2878:	80 81       	ld	r24, Z
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	82 95       	swap	r24
    2880:	92 95       	swap	r25
    2882:	90 7f       	andi	r25, 0xF0	; 240
    2884:	98 27       	eor	r25, r24
    2886:	80 7f       	andi	r24, 0xF0	; 240
    2888:	98 27       	eor	r25, r24
    288a:	82 2b       	or	r24, r18
    288c:	8c 93       	st	X, r24

		/* Specify number of stop bits in the Data frame */
		UCSRC = (UCSRC & 0xF7) | (UART_Config->stop_bit << 3);
    288e:	a0 e4       	ldi	r26, 0x40	; 64
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e0 e4       	ldi	r30, 0x40	; 64
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	28 2f       	mov	r18, r24
    289a:	27 7f       	andi	r18, 0xF7	; 247
    289c:	eb 81       	ldd	r30, Y+3	; 0x03
    289e:	fc 81       	ldd	r31, Y+4	; 0x04
    28a0:	81 81       	ldd	r24, Z+1	; 0x01
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	82 2b       	or	r24, r18
    28b4:	8c 93       	st	X, r24

	if (UART_Config->data_bits == Bits_9)
    28b6:	eb 81       	ldd	r30, Y+3	; 0x03
    28b8:	fc 81       	ldd	r31, Y+4	; 0x04
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	87 30       	cpi	r24, 0x07	; 7
    28be:	39 f4       	brne	.+14     	; 0x28ce <UART_init+0xbc>
	{
		/*
		 * SET BIT UCSZ2 FOR 9-BIT MODE IN REG UCSRB
		 * */
		SET_BIT(UCSRB, UCSZ2);
    28c0:	aa e2       	ldi	r26, 0x2A	; 42
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ea e2       	ldi	r30, 0x2A	; 42
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	84 60       	ori	r24, 0x04	; 4
    28cc:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_Config->baud_rate * 8UL))) - 1);
    28ce:	eb 81       	ldd	r30, Y+3	; 0x03
    28d0:	fc 81       	ldd	r31, Y+4	; 0x04
    28d2:	83 81       	ldd	r24, Z+3	; 0x03
    28d4:	94 81       	ldd	r25, Z+4	; 0x04
    28d6:	cc 01       	movw	r24, r24
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	aa 1f       	adc	r26, r26
    28e2:	bb 1f       	adc	r27, r27
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	aa 1f       	adc	r26, r26
    28ea:	bb 1f       	adc	r27, r27
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	aa 1f       	adc	r26, r26
    28f2:	bb 1f       	adc	r27, r27
    28f4:	9c 01       	movw	r18, r24
    28f6:	ad 01       	movw	r20, r26
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	92 e1       	ldi	r25, 0x12	; 18
    28fc:	aa e7       	ldi	r26, 0x7A	; 122
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__udivmodsi4>
    2908:	da 01       	movw	r26, r20
    290a:	c9 01       	movw	r24, r18
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//CLEAR_BIT(UCSRC,URSEL);
	UBRRH = ubrr_value >> 8; /*SHIFT BY 8 BIT TO PUT IN REG. HIGH*/
    2912:	e0 e4       	ldi	r30, 0x40	; 64
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	89 2f       	mov	r24, r25
    291c:	99 27       	eor	r25, r25
    291e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2920:	e9 e2       	ldi	r30, 0x29	; 41
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	80 83       	st	Z, r24
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {}
    2942:	eb e2       	ldi	r30, 0x2B	; 43
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	80 72       	andi	r24, 0x20	; 32
    294e:	90 70       	andi	r25, 0x00	; 0
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	b9 f3       	breq	.-18     	; 0x2942 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2954:	ec e2       	ldi	r30, 0x2C	; 44
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {}
    296c:	eb e2       	ldi	r30, 0x2B	; 43
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	88 23       	and	r24, r24
    2974:	dc f7       	brge	.-10     	; 0x296c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2976:	ec e2       	ldi	r30, 0x2C	; 44
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
}
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8* Str)
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <UART_sendString+0x6>
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9b 83       	std	Y+3, r25	; 0x03
    2990:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2992:	19 82       	std	Y+1, r1	; 0x01
    2994:	0e c0       	rjmp	.+28     	; 0x29b2 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	fc 01       	movw	r30, r24
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
    29a6:	80 81       	ld	r24, Z
    29a8:	0e 94 9b 14 	call	0x2936	; 0x2936 <UART_sendByte>
		i++;
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	8f 5f       	subi	r24, 0xFF	; 255
    29b0:	89 83       	std	Y+1, r24	; 0x01
{

	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	fc 01       	movw	r30, r24
    29be:	e2 0f       	add	r30, r18
    29c0:	f3 1f       	adc	r31, r19
    29c2:	80 81       	ld	r24, Z
    29c4:	88 23       	and	r24, r24
    29c6:	39 f7       	brne	.-50     	; 0x2996 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8* Str)
{
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	00 d0       	rcall	.+0      	; 0x29de <UART_receiveString+0xa>
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	9b 83       	std	Y+3, r25	; 0x03
    29e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29e8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the '#' */
	Str[i] = UART_recieveByte();
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	8c 01       	movw	r16, r24
    29f6:	02 0f       	add	r16, r18
    29f8:	13 1f       	adc	r17, r19
    29fa:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    29fe:	f8 01       	movw	r30, r16
    2a00:	80 83       	st	Z, r24
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <UART_receiveString+0x4e>

	while (Str[i] != '#')
	{
		i++;
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	9b 81       	ldd	r25, Y+3	; 0x03
    2a14:	8c 01       	movw	r16, r24
    2a16:	02 0f       	add	r16, r18
    2a18:	13 1f       	adc	r17, r19
    2a1a:	0e 94 b2 14 	call	0x2964	; 0x2964 <UART_recieveByte>
    2a1e:	f8 01       	movw	r30, r16
    2a20:	80 83       	st	Z, r24
	uint8 i = 0;

	/* Receive the whole string until the '#' */
	Str[i] = UART_recieveByte();

	while (Str[i] != '#')
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e2 0f       	add	r30, r18
    2a30:	f3 1f       	adc	r31, r19
    2a32:	80 81       	ld	r24, Z
    2a34:	83 32       	cpi	r24, 0x23	; 35
    2a36:	31 f7       	brne	.-52     	; 0x2a04 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	9b 81       	ldd	r25, Y+3	; 0x03
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	10 82       	st	Z, r1
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <__udivmodsi4>:
    2a5a:	a1 e2       	ldi	r26, 0x21	; 33
    2a5c:	1a 2e       	mov	r1, r26
    2a5e:	aa 1b       	sub	r26, r26
    2a60:	bb 1b       	sub	r27, r27
    2a62:	fd 01       	movw	r30, r26
    2a64:	0d c0       	rjmp	.+26     	; 0x2a80 <__udivmodsi4_ep>

00002a66 <__udivmodsi4_loop>:
    2a66:	aa 1f       	adc	r26, r26
    2a68:	bb 1f       	adc	r27, r27
    2a6a:	ee 1f       	adc	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	a2 17       	cp	r26, r18
    2a70:	b3 07       	cpc	r27, r19
    2a72:	e4 07       	cpc	r30, r20
    2a74:	f5 07       	cpc	r31, r21
    2a76:	20 f0       	brcs	.+8      	; 0x2a80 <__udivmodsi4_ep>
    2a78:	a2 1b       	sub	r26, r18
    2a7a:	b3 0b       	sbc	r27, r19
    2a7c:	e4 0b       	sbc	r30, r20
    2a7e:	f5 0b       	sbc	r31, r21

00002a80 <__udivmodsi4_ep>:
    2a80:	66 1f       	adc	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	1a 94       	dec	r1
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <__udivmodsi4_loop>
    2a8c:	60 95       	com	r22
    2a8e:	70 95       	com	r23
    2a90:	80 95       	com	r24
    2a92:	90 95       	com	r25
    2a94:	9b 01       	movw	r18, r22
    2a96:	ac 01       	movw	r20, r24
    2a98:	bd 01       	movw	r22, r26
    2a9a:	cf 01       	movw	r24, r30
    2a9c:	08 95       	ret

00002a9e <__prologue_saves__>:
    2a9e:	2f 92       	push	r2
    2aa0:	3f 92       	push	r3
    2aa2:	4f 92       	push	r4
    2aa4:	5f 92       	push	r5
    2aa6:	6f 92       	push	r6
    2aa8:	7f 92       	push	r7
    2aaa:	8f 92       	push	r8
    2aac:	9f 92       	push	r9
    2aae:	af 92       	push	r10
    2ab0:	bf 92       	push	r11
    2ab2:	cf 92       	push	r12
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	ca 1b       	sub	r28, r26
    2ac8:	db 0b       	sbc	r29, r27
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	09 94       	ijmp

00002ad6 <__epilogue_restores__>:
    2ad6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad8:	39 88       	ldd	r3, Y+17	; 0x11
    2ada:	48 88       	ldd	r4, Y+16	; 0x10
    2adc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ade:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aea:	c8 84       	ldd	r12, Y+8	; 0x08
    2aec:	df 80       	ldd	r13, Y+7	; 0x07
    2aee:	ee 80       	ldd	r14, Y+6	; 0x06
    2af0:	fd 80       	ldd	r15, Y+5	; 0x05
    2af2:	0c 81       	ldd	r16, Y+4	; 0x04
    2af4:	1b 81       	ldd	r17, Y+3	; 0x03
    2af6:	aa 81       	ldd	r26, Y+2	; 0x02
    2af8:	b9 81       	ldd	r27, Y+1	; 0x01
    2afa:	ce 0f       	add	r28, r30
    2afc:	d1 1d       	adc	r29, r1
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	ed 01       	movw	r28, r26
    2b0a:	08 95       	ret

00002b0c <_exit>:
    2b0c:	f8 94       	cli

00002b0e <__stop_program>:
    2b0e:	ff cf       	rjmp	.-2      	; 0x2b0e <__stop_program>
