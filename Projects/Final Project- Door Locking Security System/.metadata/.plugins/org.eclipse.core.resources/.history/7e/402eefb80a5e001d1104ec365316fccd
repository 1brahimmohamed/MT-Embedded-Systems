/*
 * controlMain.c
 *
 *  Created on: Nov 1, 2022
 *      Author: Ahmed
 */

#include "CTRL_Helpers.h"

/*******************************************************************************
 *                          	Global Variables                               *
 *******************************************************************************/

volatile uint8 timerTicks=0;

uint8 UART_data;

uint8 eeprom_mem_loc_add;

uint8 password[PASS_LENGTH+1];
uint8 password_confirmed[PASS_LENGTH+1];
uint8 password_toBeChecked[PASS_LENGTH+1];
uint8 password_saved[PASS_LENGTH];

int matching_state=0;


uint8 i=0;

/*first memory address inside eeprom*/
uint16 eeprom_address=0x0313;


/*******************************************************************************
 *                          	Function Definitions	                       *
 *******************************************************************************/
void TIMER1_CallBack(void)
{
	timerTicks++;
}

void CTRL_savePassword(void)
{
	eeprom_address=0x0313;

	/*	write the value inside the first address then one by one	*/
	for(i=0;i<PASS_LENGTH;i++)
	{
		EEPROM_writeByte(eeprom_address, password[i]);
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
	}
}

void CTRL_unlock(void)
{

	/* rest timer*/
	timerTicks=0;

	/*	open door for 15 secs */
	DcMotor_Rotate(CW, 90);
	while(timerTicks<DOOR_OPEN);

	/*hold for 3 secs*/
	DcMotor_Rotate(STOP, 0);
	while(timerTicks<(DOOR_OPEN+DOOR_HOLD));

	/*	close door for 15 secs */
	DcMotor_Rotate(ACW, 90);
	while(timerTicks<(DOOR_OPEN+DOOR_HOLD+DOOR_CLOSE));

	/*stop*/
	DcMotor_Rotate(STOP, 0);
}

void CTRL_buzzerOn(void)
{
	/*	reset timer1	*/
	timerTicks=0;

	/*	turn on buzzer for 1 min	*/
	Buzzer_on();
	while(timerTicks<BUZZER_ACTIVE);
	Buzzer_off();
}


void CTRL_passwordCheck(void)
{
	matching_state=1;
	i=0;

	/*send ready to the other mc*/
	UART_sendByte(CON_READY);

	/*	recive password from HMI	*/
	int rec_pass_counter = 0;
	while(rec_pass_counter<PASS_LENGTH)
	{
		password_toBeChecked[rec_pass_counter]=UART_recieveByte();
		_delay_ms(UART_DELAY);
		rec_pass_counter++;
	}

	/*	get the stored password and check	*/
	eeprom_address=0x0313;
	for(i=0;i<PASS_LENGTH;i++)
	{
		EEPROM_readByte(eeprom_address,password_saved+i);
		_delay_ms(EEPROM_DELAY);
		eeprom_address++;
	}


	matching_state=1;

	/*	start checking	*/
	int checking_counter=0;
	while(checking_counter<PASS_LENGTH)
	{
		/*	if they don't match break the function and set state to 0 (unmatch)	*/
		if(password_toBeChecked[checking_counter] != password_saved[checking_counter])
		{
			matching_state=0;
			break;
		}
		checking_counter++;
	}
}

void CTRL_openDoor(void)
{
	int doorErrors=0;
	matching_state=0;

	while(matching_state==0 && doorErrors<3)
	{
		/*	check passwords	*/
		CTRL_passwordCheck();

		/*	wait till other mc is ready	*/
		while(UART_recieveByte() != HMI_READY);

		/*	send the matching state*/
		UART_sendByte(matching_state);
		_delay_ms(UART_DELAY);

		/*increment door errors*/
		doorErrors++;
	}

	/*	if passwords match, unlock*/
	if(matching_state==1)
	{
		CTRL_unlock();
	}

	/*	if passwords un-match after reaching out max errors, activate buzzer*/
	else
	{
		CTRL_buzzerOn();
	}
}

void CTRL_createPassword(void)
{
	matching_state=0
			;
	while(matching_state==0)
	{
		matching_state=1;

		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);

		/*	Receive new password from HMI	*/
		int new_pass_counter = 0;
		while(new_pass_counter<PASS_LENGTH)
		{
			password[new_pass_counter]=UART_recieveByte();
			_delay_ms(UART_DELAY);
			new_pass_counter++;
		}

		/*	send ready to the other mc	*/
		UART_sendByte(CON_READY);

		/*	Receive new password from HMI	*/
		int new_passConf_counter = 0;
		while(new_passConf_counter<PASS_LENGTH)
		{
			password_confirmed[new_passConf_counter]=UART_recieveByte();
			_delay_ms(UART_DELAY);
			new_passConf_counter++;
		}

		/*	check if two passwords matches	*/
		int new_passCheck_counter = 0;
		while(new_passCheck_counter<PASS_LENGTH)
		{
			if(password[new_passCheck_counter] != password_confirmed[new_passCheck_counter])
			{
				matching_state=0;
				break;
			}
			new_passCheck_counter++;
		}

		/*	wait for the other mc to be ready	*/
		while(UART_recieveByte() != HMI_READY);

		/*	sent the matching state	*/
		UART_sendByte(matching_state);
		_delay_ms(UART_DELAY);
	}

	/*store password in eeprom*/
	CTRL_savePassword();
}

void CTRL_changePassword(void)
{

	int passwordError=0;
	matching_state=0;

	while(matching_state==0 && passwordError<3)
	{
		/*	check password	*/
		CTRL_passwordCheck();

		/*	wait for HMI to be ready*/
		while(UART_recieveByte() != HMI_READY);

		/*	sent the matching state	*/
		UART_sendByte(matching_state);
		_delay_ms(UART_DELAY);

		/*increment password error*/
		++passwordError;
	}
	/*	if passwords match, create new pass*/

	if(matching_state==1)
	{
		CTRL_createPassword();
	}

	/*	if passwords un-match after reaching out max errors, activate buzzer*/
	else
	{
		CTRL_buzzerOn();
	}
}

void CTRL_mainMenu(void)
{
	/*	send ready to HMI	*/
	UART_sendByte(CON_READY);

	/*	get the user option	*/
	int opt=UART_recieveByte();
	_delay_ms(UART_DELAY);

	/*	check if user choose +,open door options	*/
	if(opt=='+')
	{
		CTRL_openDoor();
	}
	/*	else user choose -,change password options	*/
	else
	{
		CTRL_changePassword();
	}
}

